
f103_App_TestBlink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08004000  08004000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ef0  08004110  08004110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000041c  08009000  08009000  00006000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800941c  0800941c  000071d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800941c  0800941c  0000641c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009424  08009424  000071d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009424  08009424  00006424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009428  08009428  00006428  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800942c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  200001d4  08009600  000071d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08009600  0000738c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000071d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006e43  00000000  00000000  000071fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001514  00000000  00000000  0000e040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0000f558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000051b  00000000  00000000  0000fc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000178ae  00000000  00000000  00010133  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007f7d  00000000  00000000  000279e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083d31  00000000  00000000  0002f95e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b368f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b58  00000000  00000000  000b36d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000b622c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004110 <__do_global_dtors_aux>:
 8004110:	b510      	push	{r4, lr}
 8004112:	4c05      	ldr	r4, [pc, #20]	@ (8004128 <__do_global_dtors_aux+0x18>)
 8004114:	7823      	ldrb	r3, [r4, #0]
 8004116:	b933      	cbnz	r3, 8004126 <__do_global_dtors_aux+0x16>
 8004118:	4b04      	ldr	r3, [pc, #16]	@ (800412c <__do_global_dtors_aux+0x1c>)
 800411a:	b113      	cbz	r3, 8004122 <__do_global_dtors_aux+0x12>
 800411c:	4804      	ldr	r0, [pc, #16]	@ (8004130 <__do_global_dtors_aux+0x20>)
 800411e:	f3af 8000 	nop.w
 8004122:	2301      	movs	r3, #1
 8004124:	7023      	strb	r3, [r4, #0]
 8004126:	bd10      	pop	{r4, pc}
 8004128:	200001d4 	.word	0x200001d4
 800412c:	00000000 	.word	0x00000000
 8004130:	08008fe8 	.word	0x08008fe8

08004134 <frame_dummy>:
 8004134:	b508      	push	{r3, lr}
 8004136:	4b03      	ldr	r3, [pc, #12]	@ (8004144 <frame_dummy+0x10>)
 8004138:	b11b      	cbz	r3, 8004142 <frame_dummy+0xe>
 800413a:	4903      	ldr	r1, [pc, #12]	@ (8004148 <frame_dummy+0x14>)
 800413c:	4803      	ldr	r0, [pc, #12]	@ (800414c <frame_dummy+0x18>)
 800413e:	f3af 8000 	nop.w
 8004142:	bd08      	pop	{r3, pc}
 8004144:	00000000 	.word	0x00000000
 8004148:	200001d8 	.word	0x200001d8
 800414c:	08008fe8 	.word	0x08008fe8

08004150 <strlen>:
 8004150:	4603      	mov	r3, r0
 8004152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004156:	2a00      	cmp	r2, #0
 8004158:	d1fb      	bne.n	8004152 <strlen+0x2>
 800415a:	1a18      	subs	r0, r3, r0
 800415c:	3801      	subs	r0, #1
 800415e:	4770      	bx	lr

08004160 <__aeabi_drsub>:
 8004160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8004164:	e002      	b.n	800416c <__adddf3>
 8004166:	bf00      	nop

08004168 <__aeabi_dsub>:
 8004168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800416c <__adddf3>:
 800416c:	b530      	push	{r4, r5, lr}
 800416e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8004172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8004176:	ea94 0f05 	teq	r4, r5
 800417a:	bf08      	it	eq
 800417c:	ea90 0f02 	teqeq	r0, r2
 8004180:	bf1f      	itttt	ne
 8004182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8004186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800418a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800418e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004192:	f000 80e2 	beq.w	800435a <__adddf3+0x1ee>
 8004196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800419a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800419e:	bfb8      	it	lt
 80041a0:	426d      	neglt	r5, r5
 80041a2:	dd0c      	ble.n	80041be <__adddf3+0x52>
 80041a4:	442c      	add	r4, r5
 80041a6:	ea80 0202 	eor.w	r2, r0, r2
 80041aa:	ea81 0303 	eor.w	r3, r1, r3
 80041ae:	ea82 0000 	eor.w	r0, r2, r0
 80041b2:	ea83 0101 	eor.w	r1, r3, r1
 80041b6:	ea80 0202 	eor.w	r2, r0, r2
 80041ba:	ea81 0303 	eor.w	r3, r1, r3
 80041be:	2d36      	cmp	r5, #54	@ 0x36
 80041c0:	bf88      	it	hi
 80041c2:	bd30      	pophi	{r4, r5, pc}
 80041c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80041c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80041cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80041d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80041d4:	d002      	beq.n	80041dc <__adddf3+0x70>
 80041d6:	4240      	negs	r0, r0
 80041d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80041dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80041e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80041e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80041e8:	d002      	beq.n	80041f0 <__adddf3+0x84>
 80041ea:	4252      	negs	r2, r2
 80041ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80041f0:	ea94 0f05 	teq	r4, r5
 80041f4:	f000 80a7 	beq.w	8004346 <__adddf3+0x1da>
 80041f8:	f1a4 0401 	sub.w	r4, r4, #1
 80041fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8004200:	db0d      	blt.n	800421e <__adddf3+0xb2>
 8004202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8004206:	fa22 f205 	lsr.w	r2, r2, r5
 800420a:	1880      	adds	r0, r0, r2
 800420c:	f141 0100 	adc.w	r1, r1, #0
 8004210:	fa03 f20e 	lsl.w	r2, r3, lr
 8004214:	1880      	adds	r0, r0, r2
 8004216:	fa43 f305 	asr.w	r3, r3, r5
 800421a:	4159      	adcs	r1, r3
 800421c:	e00e      	b.n	800423c <__adddf3+0xd0>
 800421e:	f1a5 0520 	sub.w	r5, r5, #32
 8004222:	f10e 0e20 	add.w	lr, lr, #32
 8004226:	2a01      	cmp	r2, #1
 8004228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800422c:	bf28      	it	cs
 800422e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8004232:	fa43 f305 	asr.w	r3, r3, r5
 8004236:	18c0      	adds	r0, r0, r3
 8004238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800423c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8004240:	d507      	bpl.n	8004252 <__adddf3+0xe6>
 8004242:	f04f 0e00 	mov.w	lr, #0
 8004246:	f1dc 0c00 	rsbs	ip, ip, #0
 800424a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800424e:	eb6e 0101 	sbc.w	r1, lr, r1
 8004252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8004256:	d31b      	bcc.n	8004290 <__adddf3+0x124>
 8004258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800425c:	d30c      	bcc.n	8004278 <__adddf3+0x10c>
 800425e:	0849      	lsrs	r1, r1, #1
 8004260:	ea5f 0030 	movs.w	r0, r0, rrx
 8004264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8004268:	f104 0401 	add.w	r4, r4, #1
 800426c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8004270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8004274:	f080 809a 	bcs.w	80043ac <__adddf3+0x240>
 8004278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800427c:	bf08      	it	eq
 800427e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004282:	f150 0000 	adcs.w	r0, r0, #0
 8004286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800428a:	ea41 0105 	orr.w	r1, r1, r5
 800428e:	bd30      	pop	{r4, r5, pc}
 8004290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8004294:	4140      	adcs	r0, r0
 8004296:	eb41 0101 	adc.w	r1, r1, r1
 800429a:	3c01      	subs	r4, #1
 800429c:	bf28      	it	cs
 800429e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80042a2:	d2e9      	bcs.n	8004278 <__adddf3+0x10c>
 80042a4:	f091 0f00 	teq	r1, #0
 80042a8:	bf04      	itt	eq
 80042aa:	4601      	moveq	r1, r0
 80042ac:	2000      	moveq	r0, #0
 80042ae:	fab1 f381 	clz	r3, r1
 80042b2:	bf08      	it	eq
 80042b4:	3320      	addeq	r3, #32
 80042b6:	f1a3 030b 	sub.w	r3, r3, #11
 80042ba:	f1b3 0220 	subs.w	r2, r3, #32
 80042be:	da0c      	bge.n	80042da <__adddf3+0x16e>
 80042c0:	320c      	adds	r2, #12
 80042c2:	dd08      	ble.n	80042d6 <__adddf3+0x16a>
 80042c4:	f102 0c14 	add.w	ip, r2, #20
 80042c8:	f1c2 020c 	rsb	r2, r2, #12
 80042cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80042d0:	fa21 f102 	lsr.w	r1, r1, r2
 80042d4:	e00c      	b.n	80042f0 <__adddf3+0x184>
 80042d6:	f102 0214 	add.w	r2, r2, #20
 80042da:	bfd8      	it	le
 80042dc:	f1c2 0c20 	rsble	ip, r2, #32
 80042e0:	fa01 f102 	lsl.w	r1, r1, r2
 80042e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80042e8:	bfdc      	itt	le
 80042ea:	ea41 010c 	orrle.w	r1, r1, ip
 80042ee:	4090      	lslle	r0, r2
 80042f0:	1ae4      	subs	r4, r4, r3
 80042f2:	bfa2      	ittt	ge
 80042f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80042f8:	4329      	orrge	r1, r5
 80042fa:	bd30      	popge	{r4, r5, pc}
 80042fc:	ea6f 0404 	mvn.w	r4, r4
 8004300:	3c1f      	subs	r4, #31
 8004302:	da1c      	bge.n	800433e <__adddf3+0x1d2>
 8004304:	340c      	adds	r4, #12
 8004306:	dc0e      	bgt.n	8004326 <__adddf3+0x1ba>
 8004308:	f104 0414 	add.w	r4, r4, #20
 800430c:	f1c4 0220 	rsb	r2, r4, #32
 8004310:	fa20 f004 	lsr.w	r0, r0, r4
 8004314:	fa01 f302 	lsl.w	r3, r1, r2
 8004318:	ea40 0003 	orr.w	r0, r0, r3
 800431c:	fa21 f304 	lsr.w	r3, r1, r4
 8004320:	ea45 0103 	orr.w	r1, r5, r3
 8004324:	bd30      	pop	{r4, r5, pc}
 8004326:	f1c4 040c 	rsb	r4, r4, #12
 800432a:	f1c4 0220 	rsb	r2, r4, #32
 800432e:	fa20 f002 	lsr.w	r0, r0, r2
 8004332:	fa01 f304 	lsl.w	r3, r1, r4
 8004336:	ea40 0003 	orr.w	r0, r0, r3
 800433a:	4629      	mov	r1, r5
 800433c:	bd30      	pop	{r4, r5, pc}
 800433e:	fa21 f004 	lsr.w	r0, r1, r4
 8004342:	4629      	mov	r1, r5
 8004344:	bd30      	pop	{r4, r5, pc}
 8004346:	f094 0f00 	teq	r4, #0
 800434a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800434e:	bf06      	itte	eq
 8004350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8004354:	3401      	addeq	r4, #1
 8004356:	3d01      	subne	r5, #1
 8004358:	e74e      	b.n	80041f8 <__adddf3+0x8c>
 800435a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800435e:	bf18      	it	ne
 8004360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8004364:	d029      	beq.n	80043ba <__adddf3+0x24e>
 8004366:	ea94 0f05 	teq	r4, r5
 800436a:	bf08      	it	eq
 800436c:	ea90 0f02 	teqeq	r0, r2
 8004370:	d005      	beq.n	800437e <__adddf3+0x212>
 8004372:	ea54 0c00 	orrs.w	ip, r4, r0
 8004376:	bf04      	itt	eq
 8004378:	4619      	moveq	r1, r3
 800437a:	4610      	moveq	r0, r2
 800437c:	bd30      	pop	{r4, r5, pc}
 800437e:	ea91 0f03 	teq	r1, r3
 8004382:	bf1e      	ittt	ne
 8004384:	2100      	movne	r1, #0
 8004386:	2000      	movne	r0, #0
 8004388:	bd30      	popne	{r4, r5, pc}
 800438a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800438e:	d105      	bne.n	800439c <__adddf3+0x230>
 8004390:	0040      	lsls	r0, r0, #1
 8004392:	4149      	adcs	r1, r1
 8004394:	bf28      	it	cs
 8004396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800439a:	bd30      	pop	{r4, r5, pc}
 800439c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80043a0:	bf3c      	itt	cc
 80043a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80043a6:	bd30      	popcc	{r4, r5, pc}
 80043a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80043ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80043b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80043b4:	f04f 0000 	mov.w	r0, #0
 80043b8:	bd30      	pop	{r4, r5, pc}
 80043ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80043be:	bf1a      	itte	ne
 80043c0:	4619      	movne	r1, r3
 80043c2:	4610      	movne	r0, r2
 80043c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80043c8:	bf1c      	itt	ne
 80043ca:	460b      	movne	r3, r1
 80043cc:	4602      	movne	r2, r0
 80043ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80043d2:	bf06      	itte	eq
 80043d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80043d8:	ea91 0f03 	teqeq	r1, r3
 80043dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80043e0:	bd30      	pop	{r4, r5, pc}
 80043e2:	bf00      	nop

080043e4 <__aeabi_ui2d>:
 80043e4:	f090 0f00 	teq	r0, #0
 80043e8:	bf04      	itt	eq
 80043ea:	2100      	moveq	r1, #0
 80043ec:	4770      	bxeq	lr
 80043ee:	b530      	push	{r4, r5, lr}
 80043f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80043f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80043f8:	f04f 0500 	mov.w	r5, #0
 80043fc:	f04f 0100 	mov.w	r1, #0
 8004400:	e750      	b.n	80042a4 <__adddf3+0x138>
 8004402:	bf00      	nop

08004404 <__aeabi_i2d>:
 8004404:	f090 0f00 	teq	r0, #0
 8004408:	bf04      	itt	eq
 800440a:	2100      	moveq	r1, #0
 800440c:	4770      	bxeq	lr
 800440e:	b530      	push	{r4, r5, lr}
 8004410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8004414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8004418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800441c:	bf48      	it	mi
 800441e:	4240      	negmi	r0, r0
 8004420:	f04f 0100 	mov.w	r1, #0
 8004424:	e73e      	b.n	80042a4 <__adddf3+0x138>
 8004426:	bf00      	nop

08004428 <__aeabi_f2d>:
 8004428:	0042      	lsls	r2, r0, #1
 800442a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800442e:	ea4f 0131 	mov.w	r1, r1, rrx
 8004432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8004436:	bf1f      	itttt	ne
 8004438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800443c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8004440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8004444:	4770      	bxne	lr
 8004446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800444a:	bf08      	it	eq
 800444c:	4770      	bxeq	lr
 800444e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8004452:	bf04      	itt	eq
 8004454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8004458:	4770      	bxeq	lr
 800445a:	b530      	push	{r4, r5, lr}
 800445c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8004460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8004464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004468:	e71c      	b.n	80042a4 <__adddf3+0x138>
 800446a:	bf00      	nop

0800446c <__aeabi_ul2d>:
 800446c:	ea50 0201 	orrs.w	r2, r0, r1
 8004470:	bf08      	it	eq
 8004472:	4770      	bxeq	lr
 8004474:	b530      	push	{r4, r5, lr}
 8004476:	f04f 0500 	mov.w	r5, #0
 800447a:	e00a      	b.n	8004492 <__aeabi_l2d+0x16>

0800447c <__aeabi_l2d>:
 800447c:	ea50 0201 	orrs.w	r2, r0, r1
 8004480:	bf08      	it	eq
 8004482:	4770      	bxeq	lr
 8004484:	b530      	push	{r4, r5, lr}
 8004486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800448a:	d502      	bpl.n	8004492 <__aeabi_l2d+0x16>
 800448c:	4240      	negs	r0, r0
 800448e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8004492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8004496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800449a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800449e:	f43f aed8 	beq.w	8004252 <__adddf3+0xe6>
 80044a2:	f04f 0203 	mov.w	r2, #3
 80044a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80044aa:	bf18      	it	ne
 80044ac:	3203      	addne	r2, #3
 80044ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80044b2:	bf18      	it	ne
 80044b4:	3203      	addne	r2, #3
 80044b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80044ba:	f1c2 0320 	rsb	r3, r2, #32
 80044be:	fa00 fc03 	lsl.w	ip, r0, r3
 80044c2:	fa20 f002 	lsr.w	r0, r0, r2
 80044c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80044ca:	ea40 000e 	orr.w	r0, r0, lr
 80044ce:	fa21 f102 	lsr.w	r1, r1, r2
 80044d2:	4414      	add	r4, r2
 80044d4:	e6bd      	b.n	8004252 <__adddf3+0xe6>
 80044d6:	bf00      	nop

080044d8 <__aeabi_dmul>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80044de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80044e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80044e6:	bf1d      	ittte	ne
 80044e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80044ec:	ea94 0f0c 	teqne	r4, ip
 80044f0:	ea95 0f0c 	teqne	r5, ip
 80044f4:	f000 f8de 	bleq	80046b4 <__aeabi_dmul+0x1dc>
 80044f8:	442c      	add	r4, r5
 80044fa:	ea81 0603 	eor.w	r6, r1, r3
 80044fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8004502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8004506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800450a:	bf18      	it	ne
 800450c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8004510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8004514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004518:	d038      	beq.n	800458c <__aeabi_dmul+0xb4>
 800451a:	fba0 ce02 	umull	ip, lr, r0, r2
 800451e:	f04f 0500 	mov.w	r5, #0
 8004522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8004526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800452a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800452e:	f04f 0600 	mov.w	r6, #0
 8004532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8004536:	f09c 0f00 	teq	ip, #0
 800453a:	bf18      	it	ne
 800453c:	f04e 0e01 	orrne.w	lr, lr, #1
 8004540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8004544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8004548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800454c:	d204      	bcs.n	8004558 <__aeabi_dmul+0x80>
 800454e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8004552:	416d      	adcs	r5, r5
 8004554:	eb46 0606 	adc.w	r6, r6, r6
 8004558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800455c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8004560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8004564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8004568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800456c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8004570:	bf88      	it	hi
 8004572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8004576:	d81e      	bhi.n	80045b6 <__aeabi_dmul+0xde>
 8004578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800457c:	bf08      	it	eq
 800457e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8004582:	f150 0000 	adcs.w	r0, r0, #0
 8004586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800458a:	bd70      	pop	{r4, r5, r6, pc}
 800458c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8004590:	ea46 0101 	orr.w	r1, r6, r1
 8004594:	ea40 0002 	orr.w	r0, r0, r2
 8004598:	ea81 0103 	eor.w	r1, r1, r3
 800459c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80045a0:	bfc2      	ittt	gt
 80045a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80045a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80045aa:	bd70      	popgt	{r4, r5, r6, pc}
 80045ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80045b0:	f04f 0e00 	mov.w	lr, #0
 80045b4:	3c01      	subs	r4, #1
 80045b6:	f300 80ab 	bgt.w	8004710 <__aeabi_dmul+0x238>
 80045ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80045be:	bfde      	ittt	le
 80045c0:	2000      	movle	r0, #0
 80045c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80045c6:	bd70      	pople	{r4, r5, r6, pc}
 80045c8:	f1c4 0400 	rsb	r4, r4, #0
 80045cc:	3c20      	subs	r4, #32
 80045ce:	da35      	bge.n	800463c <__aeabi_dmul+0x164>
 80045d0:	340c      	adds	r4, #12
 80045d2:	dc1b      	bgt.n	800460c <__aeabi_dmul+0x134>
 80045d4:	f104 0414 	add.w	r4, r4, #20
 80045d8:	f1c4 0520 	rsb	r5, r4, #32
 80045dc:	fa00 f305 	lsl.w	r3, r0, r5
 80045e0:	fa20 f004 	lsr.w	r0, r0, r4
 80045e4:	fa01 f205 	lsl.w	r2, r1, r5
 80045e8:	ea40 0002 	orr.w	r0, r0, r2
 80045ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80045f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80045f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80045f8:	fa21 f604 	lsr.w	r6, r1, r4
 80045fc:	eb42 0106 	adc.w	r1, r2, r6
 8004600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004604:	bf08      	it	eq
 8004606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800460a:	bd70      	pop	{r4, r5, r6, pc}
 800460c:	f1c4 040c 	rsb	r4, r4, #12
 8004610:	f1c4 0520 	rsb	r5, r4, #32
 8004614:	fa00 f304 	lsl.w	r3, r0, r4
 8004618:	fa20 f005 	lsr.w	r0, r0, r5
 800461c:	fa01 f204 	lsl.w	r2, r1, r4
 8004620:	ea40 0002 	orr.w	r0, r0, r2
 8004624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8004628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800462c:	f141 0100 	adc.w	r1, r1, #0
 8004630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8004634:	bf08      	it	eq
 8004636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800463a:	bd70      	pop	{r4, r5, r6, pc}
 800463c:	f1c4 0520 	rsb	r5, r4, #32
 8004640:	fa00 f205 	lsl.w	r2, r0, r5
 8004644:	ea4e 0e02 	orr.w	lr, lr, r2
 8004648:	fa20 f304 	lsr.w	r3, r0, r4
 800464c:	fa01 f205 	lsl.w	r2, r1, r5
 8004650:	ea43 0302 	orr.w	r3, r3, r2
 8004654:	fa21 f004 	lsr.w	r0, r1, r4
 8004658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800465c:	fa21 f204 	lsr.w	r2, r1, r4
 8004660:	ea20 0002 	bic.w	r0, r0, r2
 8004664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8004668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800466c:	bf08      	it	eq
 800466e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8004672:	bd70      	pop	{r4, r5, r6, pc}
 8004674:	f094 0f00 	teq	r4, #0
 8004678:	d10f      	bne.n	800469a <__aeabi_dmul+0x1c2>
 800467a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800467e:	0040      	lsls	r0, r0, #1
 8004680:	eb41 0101 	adc.w	r1, r1, r1
 8004684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8004688:	bf08      	it	eq
 800468a:	3c01      	subeq	r4, #1
 800468c:	d0f7      	beq.n	800467e <__aeabi_dmul+0x1a6>
 800468e:	ea41 0106 	orr.w	r1, r1, r6
 8004692:	f095 0f00 	teq	r5, #0
 8004696:	bf18      	it	ne
 8004698:	4770      	bxne	lr
 800469a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800469e:	0052      	lsls	r2, r2, #1
 80046a0:	eb43 0303 	adc.w	r3, r3, r3
 80046a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80046a8:	bf08      	it	eq
 80046aa:	3d01      	subeq	r5, #1
 80046ac:	d0f7      	beq.n	800469e <__aeabi_dmul+0x1c6>
 80046ae:	ea43 0306 	orr.w	r3, r3, r6
 80046b2:	4770      	bx	lr
 80046b4:	ea94 0f0c 	teq	r4, ip
 80046b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80046bc:	bf18      	it	ne
 80046be:	ea95 0f0c 	teqne	r5, ip
 80046c2:	d00c      	beq.n	80046de <__aeabi_dmul+0x206>
 80046c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80046c8:	bf18      	it	ne
 80046ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80046ce:	d1d1      	bne.n	8004674 <__aeabi_dmul+0x19c>
 80046d0:	ea81 0103 	eor.w	r1, r1, r3
 80046d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80046d8:	f04f 0000 	mov.w	r0, #0
 80046dc:	bd70      	pop	{r4, r5, r6, pc}
 80046de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80046e2:	bf06      	itte	eq
 80046e4:	4610      	moveq	r0, r2
 80046e6:	4619      	moveq	r1, r3
 80046e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80046ec:	d019      	beq.n	8004722 <__aeabi_dmul+0x24a>
 80046ee:	ea94 0f0c 	teq	r4, ip
 80046f2:	d102      	bne.n	80046fa <__aeabi_dmul+0x222>
 80046f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80046f8:	d113      	bne.n	8004722 <__aeabi_dmul+0x24a>
 80046fa:	ea95 0f0c 	teq	r5, ip
 80046fe:	d105      	bne.n	800470c <__aeabi_dmul+0x234>
 8004700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8004704:	bf1c      	itt	ne
 8004706:	4610      	movne	r0, r2
 8004708:	4619      	movne	r1, r3
 800470a:	d10a      	bne.n	8004722 <__aeabi_dmul+0x24a>
 800470c:	ea81 0103 	eor.w	r1, r1, r3
 8004710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8004714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8004718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800471c:	f04f 0000 	mov.w	r0, #0
 8004720:	bd70      	pop	{r4, r5, r6, pc}
 8004722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8004726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800472a:	bd70      	pop	{r4, r5, r6, pc}

0800472c <__aeabi_ddiv>:
 800472c:	b570      	push	{r4, r5, r6, lr}
 800472e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8004732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8004736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800473a:	bf1d      	ittte	ne
 800473c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8004740:	ea94 0f0c 	teqne	r4, ip
 8004744:	ea95 0f0c 	teqne	r5, ip
 8004748:	f000 f8a7 	bleq	800489a <__aeabi_ddiv+0x16e>
 800474c:	eba4 0405 	sub.w	r4, r4, r5
 8004750:	ea81 0e03 	eor.w	lr, r1, r3
 8004754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800475c:	f000 8088 	beq.w	8004870 <__aeabi_ddiv+0x144>
 8004760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8004764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8004768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800476c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8004770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8004774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8004778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800477c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8004784:	429d      	cmp	r5, r3
 8004786:	bf08      	it	eq
 8004788:	4296      	cmpeq	r6, r2
 800478a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800478e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8004792:	d202      	bcs.n	800479a <__aeabi_ddiv+0x6e>
 8004794:	085b      	lsrs	r3, r3, #1
 8004796:	ea4f 0232 	mov.w	r2, r2, rrx
 800479a:	1ab6      	subs	r6, r6, r2
 800479c:	eb65 0503 	sbc.w	r5, r5, r3
 80047a0:	085b      	lsrs	r3, r3, #1
 80047a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80047a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80047aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80047ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80047b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80047b6:	bf22      	ittt	cs
 80047b8:	1ab6      	subcs	r6, r6, r2
 80047ba:	4675      	movcs	r5, lr
 80047bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80047c0:	085b      	lsrs	r3, r3, #1
 80047c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80047c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80047ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80047ce:	bf22      	ittt	cs
 80047d0:	1ab6      	subcs	r6, r6, r2
 80047d2:	4675      	movcs	r5, lr
 80047d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80047d8:	085b      	lsrs	r3, r3, #1
 80047da:	ea4f 0232 	mov.w	r2, r2, rrx
 80047de:	ebb6 0e02 	subs.w	lr, r6, r2
 80047e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80047e6:	bf22      	ittt	cs
 80047e8:	1ab6      	subcs	r6, r6, r2
 80047ea:	4675      	movcs	r5, lr
 80047ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80047f0:	085b      	lsrs	r3, r3, #1
 80047f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80047f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80047fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80047fe:	bf22      	ittt	cs
 8004800:	1ab6      	subcs	r6, r6, r2
 8004802:	4675      	movcs	r5, lr
 8004804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8004808:	ea55 0e06 	orrs.w	lr, r5, r6
 800480c:	d018      	beq.n	8004840 <__aeabi_ddiv+0x114>
 800480e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8004812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8004816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800481a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800481e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8004822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8004826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800482a:	d1c0      	bne.n	80047ae <__aeabi_ddiv+0x82>
 800482c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8004830:	d10b      	bne.n	800484a <__aeabi_ddiv+0x11e>
 8004832:	ea41 0100 	orr.w	r1, r1, r0
 8004836:	f04f 0000 	mov.w	r0, #0
 800483a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800483e:	e7b6      	b.n	80047ae <__aeabi_ddiv+0x82>
 8004840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8004844:	bf04      	itt	eq
 8004846:	4301      	orreq	r1, r0
 8004848:	2000      	moveq	r0, #0
 800484a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800484e:	bf88      	it	hi
 8004850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8004854:	f63f aeaf 	bhi.w	80045b6 <__aeabi_dmul+0xde>
 8004858:	ebb5 0c03 	subs.w	ip, r5, r3
 800485c:	bf04      	itt	eq
 800485e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8004862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8004866:	f150 0000 	adcs.w	r0, r0, #0
 800486a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800486e:	bd70      	pop	{r4, r5, r6, pc}
 8004870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8004874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8004878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800487c:	bfc2      	ittt	gt
 800487e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004886:	bd70      	popgt	{r4, r5, r6, pc}
 8004888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800488c:	f04f 0e00 	mov.w	lr, #0
 8004890:	3c01      	subs	r4, #1
 8004892:	e690      	b.n	80045b6 <__aeabi_dmul+0xde>
 8004894:	ea45 0e06 	orr.w	lr, r5, r6
 8004898:	e68d      	b.n	80045b6 <__aeabi_dmul+0xde>
 800489a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800489e:	ea94 0f0c 	teq	r4, ip
 80048a2:	bf08      	it	eq
 80048a4:	ea95 0f0c 	teqeq	r5, ip
 80048a8:	f43f af3b 	beq.w	8004722 <__aeabi_dmul+0x24a>
 80048ac:	ea94 0f0c 	teq	r4, ip
 80048b0:	d10a      	bne.n	80048c8 <__aeabi_ddiv+0x19c>
 80048b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80048b6:	f47f af34 	bne.w	8004722 <__aeabi_dmul+0x24a>
 80048ba:	ea95 0f0c 	teq	r5, ip
 80048be:	f47f af25 	bne.w	800470c <__aeabi_dmul+0x234>
 80048c2:	4610      	mov	r0, r2
 80048c4:	4619      	mov	r1, r3
 80048c6:	e72c      	b.n	8004722 <__aeabi_dmul+0x24a>
 80048c8:	ea95 0f0c 	teq	r5, ip
 80048cc:	d106      	bne.n	80048dc <__aeabi_ddiv+0x1b0>
 80048ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80048d2:	f43f aefd 	beq.w	80046d0 <__aeabi_dmul+0x1f8>
 80048d6:	4610      	mov	r0, r2
 80048d8:	4619      	mov	r1, r3
 80048da:	e722      	b.n	8004722 <__aeabi_dmul+0x24a>
 80048dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80048e0:	bf18      	it	ne
 80048e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80048e6:	f47f aec5 	bne.w	8004674 <__aeabi_dmul+0x19c>
 80048ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80048ee:	f47f af0d 	bne.w	800470c <__aeabi_dmul+0x234>
 80048f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80048f6:	f47f aeeb 	bne.w	80046d0 <__aeabi_dmul+0x1f8>
 80048fa:	e712      	b.n	8004722 <__aeabi_dmul+0x24a>

080048fc <__gedf2>:
 80048fc:	f04f 3cff 	mov.w	ip, #4294967295
 8004900:	e006      	b.n	8004910 <__cmpdf2+0x4>
 8004902:	bf00      	nop

08004904 <__ledf2>:
 8004904:	f04f 0c01 	mov.w	ip, #1
 8004908:	e002      	b.n	8004910 <__cmpdf2+0x4>
 800490a:	bf00      	nop

0800490c <__cmpdf2>:
 800490c:	f04f 0c01 	mov.w	ip, #1
 8004910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8004914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800491c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004920:	bf18      	it	ne
 8004922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8004926:	d01b      	beq.n	8004960 <__cmpdf2+0x54>
 8004928:	b001      	add	sp, #4
 800492a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800492e:	bf0c      	ite	eq
 8004930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8004934:	ea91 0f03 	teqne	r1, r3
 8004938:	bf02      	ittt	eq
 800493a:	ea90 0f02 	teqeq	r0, r2
 800493e:	2000      	moveq	r0, #0
 8004940:	4770      	bxeq	lr
 8004942:	f110 0f00 	cmn.w	r0, #0
 8004946:	ea91 0f03 	teq	r1, r3
 800494a:	bf58      	it	pl
 800494c:	4299      	cmppl	r1, r3
 800494e:	bf08      	it	eq
 8004950:	4290      	cmpeq	r0, r2
 8004952:	bf2c      	ite	cs
 8004954:	17d8      	asrcs	r0, r3, #31
 8004956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800495a:	f040 0001 	orr.w	r0, r0, #1
 800495e:	4770      	bx	lr
 8004960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004968:	d102      	bne.n	8004970 <__cmpdf2+0x64>
 800496a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800496e:	d107      	bne.n	8004980 <__cmpdf2+0x74>
 8004970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004978:	d1d6      	bne.n	8004928 <__cmpdf2+0x1c>
 800497a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800497e:	d0d3      	beq.n	8004928 <__cmpdf2+0x1c>
 8004980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop

08004988 <__aeabi_cdrcmple>:
 8004988:	4684      	mov	ip, r0
 800498a:	4610      	mov	r0, r2
 800498c:	4662      	mov	r2, ip
 800498e:	468c      	mov	ip, r1
 8004990:	4619      	mov	r1, r3
 8004992:	4663      	mov	r3, ip
 8004994:	e000      	b.n	8004998 <__aeabi_cdcmpeq>
 8004996:	bf00      	nop

08004998 <__aeabi_cdcmpeq>:
 8004998:	b501      	push	{r0, lr}
 800499a:	f7ff ffb7 	bl	800490c <__cmpdf2>
 800499e:	2800      	cmp	r0, #0
 80049a0:	bf48      	it	mi
 80049a2:	f110 0f00 	cmnmi.w	r0, #0
 80049a6:	bd01      	pop	{r0, pc}

080049a8 <__aeabi_dcmpeq>:
 80049a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80049ac:	f7ff fff4 	bl	8004998 <__aeabi_cdcmpeq>
 80049b0:	bf0c      	ite	eq
 80049b2:	2001      	moveq	r0, #1
 80049b4:	2000      	movne	r0, #0
 80049b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80049ba:	bf00      	nop

080049bc <__aeabi_dcmplt>:
 80049bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80049c0:	f7ff ffea 	bl	8004998 <__aeabi_cdcmpeq>
 80049c4:	bf34      	ite	cc
 80049c6:	2001      	movcc	r0, #1
 80049c8:	2000      	movcs	r0, #0
 80049ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80049ce:	bf00      	nop

080049d0 <__aeabi_dcmple>:
 80049d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80049d4:	f7ff ffe0 	bl	8004998 <__aeabi_cdcmpeq>
 80049d8:	bf94      	ite	ls
 80049da:	2001      	movls	r0, #1
 80049dc:	2000      	movhi	r0, #0
 80049de:	f85d fb08 	ldr.w	pc, [sp], #8
 80049e2:	bf00      	nop

080049e4 <__aeabi_dcmpge>:
 80049e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80049e8:	f7ff ffce 	bl	8004988 <__aeabi_cdrcmple>
 80049ec:	bf94      	ite	ls
 80049ee:	2001      	movls	r0, #1
 80049f0:	2000      	movhi	r0, #0
 80049f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80049f6:	bf00      	nop

080049f8 <__aeabi_dcmpgt>:
 80049f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80049fc:	f7ff ffc4 	bl	8004988 <__aeabi_cdrcmple>
 8004a00:	bf34      	ite	cc
 8004a02:	2001      	movcc	r0, #1
 8004a04:	2000      	movcs	r0, #0
 8004a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8004a0a:	bf00      	nop

08004a0c <__aeabi_dcmpun>:
 8004a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a14:	d102      	bne.n	8004a1c <__aeabi_dcmpun+0x10>
 8004a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004a1a:	d10a      	bne.n	8004a32 <__aeabi_dcmpun+0x26>
 8004a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004a24:	d102      	bne.n	8004a2c <__aeabi_dcmpun+0x20>
 8004a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004a2a:	d102      	bne.n	8004a32 <__aeabi_dcmpun+0x26>
 8004a2c:	f04f 0000 	mov.w	r0, #0
 8004a30:	4770      	bx	lr
 8004a32:	f04f 0001 	mov.w	r0, #1
 8004a36:	4770      	bx	lr

08004a38 <__aeabi_d2iz>:
 8004a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8004a40:	d215      	bcs.n	8004a6e <__aeabi_d2iz+0x36>
 8004a42:	d511      	bpl.n	8004a68 <__aeabi_d2iz+0x30>
 8004a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8004a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004a4c:	d912      	bls.n	8004a74 <__aeabi_d2iz+0x3c>
 8004a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8004a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8004a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8004a62:	bf18      	it	ne
 8004a64:	4240      	negne	r0, r0
 8004a66:	4770      	bx	lr
 8004a68:	f04f 0000 	mov.w	r0, #0
 8004a6c:	4770      	bx	lr
 8004a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8004a72:	d105      	bne.n	8004a80 <__aeabi_d2iz+0x48>
 8004a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8004a78:	bf08      	it	eq
 8004a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8004a7e:	4770      	bx	lr
 8004a80:	f04f 0000 	mov.w	r0, #0
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop

08004a88 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	//early_blink();
	debug_printf("Before HAL_Init\r\n");
 8004a8e:	481e      	ldr	r0, [pc, #120]	@ (8004b08 <main+0x80>)
 8004a90:	f000 f90a 	bl	8004ca8 <debug_printf>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004a94:	f000 facc 	bl	8005030 <HAL_Init>
	//__enable_irq();
	debug_printf("After HAL_Init\r\n");
 8004a98:	481c      	ldr	r0, [pc, #112]	@ (8004b0c <main+0x84>)
 8004a9a:	f000 f905 	bl	8004ca8 <debug_printf>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8004a9e:	f000 f847 	bl	8004b30 <SystemClock_Config>
	SCB->VTOR = 0x08004000;
 8004aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8004b10 <main+0x88>)
 8004aa4:	4a1b      	ldr	r2, [pc, #108]	@ (8004b14 <main+0x8c>)
 8004aa6:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8004aa8:	f000 f8b2 	bl	8004c10 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8004aac:	f000 f886 	bl	8004bbc <MX_USART1_UART_Init>

	/* USER CODE BEGIN 2 */

	debug_printf("App: Entered main()\r\n");
 8004ab0:	4819      	ldr	r0, [pc, #100]	@ (8004b18 <main+0x90>)
 8004ab2:	f000 f8f9 	bl	8004ca8 <debug_printf>
	uint32_t val = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8004ab6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004aba:	4818      	ldr	r0, [pc, #96]	@ (8004b1c <main+0x94>)
 8004abc:	f000 fda6 	bl	800560c <HAL_GPIO_ReadPin>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	607b      	str	r3, [r7, #4]
	debug_printf("GPIOC13 = %lu\r\n", val);
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	4816      	ldr	r0, [pc, #88]	@ (8004b20 <main+0x98>)
 8004ac8:	f000 f8ee 	bl	8004ca8 <debug_printf>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8004acc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004ad0:	4812      	ldr	r0, [pc, #72]	@ (8004b1c <main+0x94>)
 8004ad2:	f000 fdca 	bl	800566a <HAL_GPIO_TogglePin>
	    for (volatile uint32_t i = 0; i < 500000; i++);
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	603b      	str	r3, [r7, #0]
 8004ada:	e002      	b.n	8004ae2 <main+0x5a>
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	603b      	str	r3, [r7, #0]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	4a0f      	ldr	r2, [pc, #60]	@ (8004b24 <main+0x9c>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d9f8      	bls.n	8004adc <main+0x54>
	    HAL_Delay(100);
 8004aea:	2064      	movs	r0, #100	@ 0x64
 8004aec:	f000 fb02 	bl	80050f4 <HAL_Delay>
	    debug_printf("App running...\r\n");
 8004af0:	480d      	ldr	r0, [pc, #52]	@ (8004b28 <main+0xa0>)
 8004af2:	f000 f8d9 	bl	8004ca8 <debug_printf>
	    HAL_Delay(500);
 8004af6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8004afa:	f000 fafb 	bl	80050f4 <HAL_Delay>
	    debug_printf("Flash ByCANBUS....\r\n");
 8004afe:	480b      	ldr	r0, [pc, #44]	@ (8004b2c <main+0xa4>)
 8004b00:	f000 f8d2 	bl	8004ca8 <debug_printf>
	    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8004b04:	e7e2      	b.n	8004acc <main+0x44>
 8004b06:	bf00      	nop
 8004b08:	08009000 	.word	0x08009000
 8004b0c:	08009014 	.word	0x08009014
 8004b10:	e000ed00 	.word	0xe000ed00
 8004b14:	08004000 	.word	0x08004000
 8004b18:	08009028 	.word	0x08009028
 8004b1c:	40011000 	.word	0x40011000
 8004b20:	08009040 	.word	0x08009040
 8004b24:	0007a11f 	.word	0x0007a11f
 8004b28:	08009050 	.word	0x08009050
 8004b2c:	08009064 	.word	0x08009064

08004b30 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b090      	sub	sp, #64	@ 0x40
 8004b34:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8004b36:	f107 0318 	add.w	r3, r7, #24
 8004b3a:	2228      	movs	r2, #40	@ 0x28
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f002 f97c 	bl	8006e3c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8004b44:	1d3b      	adds	r3, r7, #4
 8004b46:	2200      	movs	r2, #0
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	605a      	str	r2, [r3, #4]
 8004b4c:	609a      	str	r2, [r3, #8]
 8004b4e:	60da      	str	r2, [r3, #12]
 8004b50:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004b52:	2301      	movs	r3, #1
 8004b54:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004b56:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004b5a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004b60:	2301      	movs	r3, #1
 8004b62:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b64:	2302      	movs	r3, #2
 8004b66:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004b68:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004b6c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8004b6e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8004b72:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8004b74:	f107 0318 	add.w	r3, r7, #24
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 fd8f 	bl	800569c <HAL_RCC_OscConfig>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d001      	beq.n	8004b88 <SystemClock_Config+0x58>
		Error_Handler();
 8004b84:	f000 f8b6 	bl	8004cf4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8004b88:	230f      	movs	r3, #15
 8004b8a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b8c:	2302      	movs	r3, #2
 8004b8e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004b90:	2300      	movs	r3, #0
 8004b92:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004b94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b98:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8004b9e:	1d3b      	adds	r3, r7, #4
 8004ba0:	2102      	movs	r1, #2
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fffc 	bl	8005ba0 <HAL_RCC_ClockConfig>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <SystemClock_Config+0x82>
		Error_Handler();
 8004bae:	f000 f8a1 	bl	8004cf4 <Error_Handler>
	}
}
 8004bb2:	bf00      	nop
 8004bb4:	3740      	adds	r7, #64	@ 0x40
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}
	...

08004bbc <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8004bc0:	4b11      	ldr	r3, [pc, #68]	@ (8004c08 <MX_USART1_UART_Init+0x4c>)
 8004bc2:	4a12      	ldr	r2, [pc, #72]	@ (8004c0c <MX_USART1_UART_Init+0x50>)
 8004bc4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8004bc6:	4b10      	ldr	r3, [pc, #64]	@ (8004c08 <MX_USART1_UART_Init+0x4c>)
 8004bc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004bcc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004bce:	4b0e      	ldr	r3, [pc, #56]	@ (8004c08 <MX_USART1_UART_Init+0x4c>)
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004c08 <MX_USART1_UART_Init+0x4c>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8004bda:	4b0b      	ldr	r3, [pc, #44]	@ (8004c08 <MX_USART1_UART_Init+0x4c>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8004be0:	4b09      	ldr	r3, [pc, #36]	@ (8004c08 <MX_USART1_UART_Init+0x4c>)
 8004be2:	220c      	movs	r2, #12
 8004be4:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004be6:	4b08      	ldr	r3, [pc, #32]	@ (8004c08 <MX_USART1_UART_Init+0x4c>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bec:	4b06      	ldr	r3, [pc, #24]	@ (8004c08 <MX_USART1_UART_Init+0x4c>)
 8004bee:	2200      	movs	r2, #0
 8004bf0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8004bf2:	4805      	ldr	r0, [pc, #20]	@ (8004c08 <MX_USART1_UART_Init+0x4c>)
 8004bf4:	f001 f962 	bl	8005ebc <HAL_UART_Init>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d001      	beq.n	8004c02 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8004bfe:	f000 f879 	bl	8004cf4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8004c02:	bf00      	nop
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	200001f0 	.word	0x200001f0
 8004c0c:	40013800 	.word	0x40013800

08004c10 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b088      	sub	sp, #32
 8004c14:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8004c16:	f107 0310 	add.w	r3, r7, #16
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	605a      	str	r2, [r3, #4]
 8004c20:	609a      	str	r2, [r3, #8]
 8004c22:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8004c24:	4b1e      	ldr	r3, [pc, #120]	@ (8004ca0 <MX_GPIO_Init+0x90>)
 8004c26:	699b      	ldr	r3, [r3, #24]
 8004c28:	4a1d      	ldr	r2, [pc, #116]	@ (8004ca0 <MX_GPIO_Init+0x90>)
 8004c2a:	f043 0310 	orr.w	r3, r3, #16
 8004c2e:	6193      	str	r3, [r2, #24]
 8004c30:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca0 <MX_GPIO_Init+0x90>)
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	f003 0310 	and.w	r3, r3, #16
 8004c38:	60fb      	str	r3, [r7, #12]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8004c3c:	4b18      	ldr	r3, [pc, #96]	@ (8004ca0 <MX_GPIO_Init+0x90>)
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	4a17      	ldr	r2, [pc, #92]	@ (8004ca0 <MX_GPIO_Init+0x90>)
 8004c42:	f043 0320 	orr.w	r3, r3, #32
 8004c46:	6193      	str	r3, [r2, #24]
 8004c48:	4b15      	ldr	r3, [pc, #84]	@ (8004ca0 <MX_GPIO_Init+0x90>)
 8004c4a:	699b      	ldr	r3, [r3, #24]
 8004c4c:	f003 0320 	and.w	r3, r3, #32
 8004c50:	60bb      	str	r3, [r7, #8]
 8004c52:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8004c54:	4b12      	ldr	r3, [pc, #72]	@ (8004ca0 <MX_GPIO_Init+0x90>)
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	4a11      	ldr	r2, [pc, #68]	@ (8004ca0 <MX_GPIO_Init+0x90>)
 8004c5a:	f043 0304 	orr.w	r3, r3, #4
 8004c5e:	6193      	str	r3, [r2, #24]
 8004c60:	4b0f      	ldr	r3, [pc, #60]	@ (8004ca0 <MX_GPIO_Init+0x90>)
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	f003 0304 	and.w	r3, r3, #4
 8004c68:	607b      	str	r3, [r7, #4]
 8004c6a:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004c72:	480c      	ldr	r0, [pc, #48]	@ (8004ca4 <MX_GPIO_Init+0x94>)
 8004c74:	f000 fce1 	bl	800563a <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004c78:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004c7c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c82:	2300      	movs	r3, #0
 8004c84:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c86:	2302      	movs	r3, #2
 8004c88:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c8a:	f107 0310 	add.w	r3, r7, #16
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4804      	ldr	r0, [pc, #16]	@ (8004ca4 <MX_GPIO_Init+0x94>)
 8004c92:	f000 fb37 	bl	8005304 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8004c96:	bf00      	nop
 8004c98:	3720      	adds	r7, #32
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40021000 	.word	0x40021000
 8004ca4:	40011000 	.word	0x40011000

08004ca8 <debug_printf>:

/* USER CODE BEGIN 4 */
void debug_printf(const char *format, ...) {
 8004ca8:	b40f      	push	{r0, r1, r2, r3}
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b0a2      	sub	sp, #136	@ 0x88
 8004cae:	af00      	add	r7, sp, #0
	char buffer[128];
	va_list args;
	va_start(args, format);
 8004cb0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8004cb4:	607b      	str	r3, [r7, #4]
	vsnprintf(buffer, sizeof(buffer), format, args);
 8004cb6:	f107 0008 	add.w	r0, r7, #8
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8004cc0:	2180      	movs	r1, #128	@ 0x80
 8004cc2:	f002 f8ad 	bl	8006e20 <vsniprintf>
	va_end(args);
	HAL_UART_Transmit(&huart1, (uint8_t*) buffer, strlen(buffer),
 8004cc6:	f107 0308 	add.w	r3, r7, #8
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f7ff fa40 	bl	8004150 <strlen>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	f107 0108 	add.w	r1, r7, #8
 8004cd8:	f04f 33ff 	mov.w	r3, #4294967295
 8004cdc:	4804      	ldr	r0, [pc, #16]	@ (8004cf0 <debug_printf+0x48>)
 8004cde:	f001 f93d 	bl	8005f5c <HAL_UART_Transmit>
	HAL_MAX_DELAY);
}
 8004ce2:	bf00      	nop
 8004ce4:	3788      	adds	r7, #136	@ 0x88
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cec:	b004      	add	sp, #16
 8004cee:	4770      	bx	lr
 8004cf0:	200001f0 	.word	0x200001f0

08004cf4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004cf8:	b672      	cpsid	i
}
 8004cfa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004cfc:	bf00      	nop
 8004cfe:	e7fd      	b.n	8004cfc <Error_Handler+0x8>

08004d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d00:	b480      	push	{r7}
 8004d02:	b085      	sub	sp, #20
 8004d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004d06:	4b15      	ldr	r3, [pc, #84]	@ (8004d5c <HAL_MspInit+0x5c>)
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	4a14      	ldr	r2, [pc, #80]	@ (8004d5c <HAL_MspInit+0x5c>)
 8004d0c:	f043 0301 	orr.w	r3, r3, #1
 8004d10:	6193      	str	r3, [r2, #24]
 8004d12:	4b12      	ldr	r3, [pc, #72]	@ (8004d5c <HAL_MspInit+0x5c>)
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	f003 0301 	and.w	r3, r3, #1
 8004d1a:	60bb      	str	r3, [r7, #8]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d1e:	4b0f      	ldr	r3, [pc, #60]	@ (8004d5c <HAL_MspInit+0x5c>)
 8004d20:	69db      	ldr	r3, [r3, #28]
 8004d22:	4a0e      	ldr	r2, [pc, #56]	@ (8004d5c <HAL_MspInit+0x5c>)
 8004d24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d28:	61d3      	str	r3, [r2, #28]
 8004d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d5c <HAL_MspInit+0x5c>)
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d32:	607b      	str	r3, [r7, #4]
 8004d34:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004d36:	4b0a      	ldr	r3, [pc, #40]	@ (8004d60 <HAL_MspInit+0x60>)
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	4a04      	ldr	r2, [pc, #16]	@ (8004d60 <HAL_MspInit+0x60>)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d52:	bf00      	nop
 8004d54:	3714      	adds	r7, #20
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bc80      	pop	{r7}
 8004d5a:	4770      	bx	lr
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	40010000 	.word	0x40010000

08004d64 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d6c:	f107 0310 	add.w	r3, r7, #16
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	605a      	str	r2, [r3, #4]
 8004d76:	609a      	str	r2, [r3, #8]
 8004d78:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	4a1c      	ldr	r2, [pc, #112]	@ (8004df0 <HAL_UART_MspInit+0x8c>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d131      	bne.n	8004de8 <HAL_UART_MspInit+0x84>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004d84:	4b1b      	ldr	r3, [pc, #108]	@ (8004df4 <HAL_UART_MspInit+0x90>)
 8004d86:	699b      	ldr	r3, [r3, #24]
 8004d88:	4a1a      	ldr	r2, [pc, #104]	@ (8004df4 <HAL_UART_MspInit+0x90>)
 8004d8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d8e:	6193      	str	r3, [r2, #24]
 8004d90:	4b18      	ldr	r3, [pc, #96]	@ (8004df4 <HAL_UART_MspInit+0x90>)
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d9c:	4b15      	ldr	r3, [pc, #84]	@ (8004df4 <HAL_UART_MspInit+0x90>)
 8004d9e:	699b      	ldr	r3, [r3, #24]
 8004da0:	4a14      	ldr	r2, [pc, #80]	@ (8004df4 <HAL_UART_MspInit+0x90>)
 8004da2:	f043 0304 	orr.w	r3, r3, #4
 8004da6:	6193      	str	r3, [r2, #24]
 8004da8:	4b12      	ldr	r3, [pc, #72]	@ (8004df4 <HAL_UART_MspInit+0x90>)
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	60bb      	str	r3, [r7, #8]
 8004db2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004db4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004db8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dba:	2302      	movs	r3, #2
 8004dbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dc2:	f107 0310 	add.w	r3, r7, #16
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	480b      	ldr	r0, [pc, #44]	@ (8004df8 <HAL_UART_MspInit+0x94>)
 8004dca:	f000 fa9b 	bl	8005304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8004dce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004dd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ddc:	f107 0310 	add.w	r3, r7, #16
 8004de0:	4619      	mov	r1, r3
 8004de2:	4805      	ldr	r0, [pc, #20]	@ (8004df8 <HAL_UART_MspInit+0x94>)
 8004de4:	f000 fa8e 	bl	8005304 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8004de8:	bf00      	nop
 8004dea:	3720      	adds	r7, #32
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bd80      	pop	{r7, pc}
 8004df0:	40013800 	.word	0x40013800
 8004df4:	40021000 	.word	0x40021000
 8004df8:	40010800 	.word	0x40010800

08004dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004e00:	bf00      	nop
 8004e02:	e7fd      	b.n	8004e00 <NMI_Handler+0x4>

08004e04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e08:	bf00      	nop
 8004e0a:	e7fd      	b.n	8004e08 <HardFault_Handler+0x4>

08004e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e10:	bf00      	nop
 8004e12:	e7fd      	b.n	8004e10 <MemManage_Handler+0x4>

08004e14 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e18:	bf00      	nop
 8004e1a:	e7fd      	b.n	8004e18 <BusFault_Handler+0x4>

08004e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e20:	bf00      	nop
 8004e22:	e7fd      	b.n	8004e20 <UsageFault_Handler+0x4>

08004e24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e28:	bf00      	nop
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bc80      	pop	{r7}
 8004e2e:	4770      	bx	lr

08004e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e34:	bf00      	nop
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bc80      	pop	{r7}
 8004e3a:	4770      	bx	lr

08004e3c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e40:	bf00      	nop
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bc80      	pop	{r7}
 8004e46:	4770      	bx	lr

08004e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e4c:	f000 f936 	bl	80050bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e50:	bf00      	nop
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
  return 1;
 8004e58:	2301      	movs	r3, #1
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bc80      	pop	{r7}
 8004e60:	4770      	bx	lr

08004e62 <_kill>:

int _kill(int pid, int sig)
{
 8004e62:	b580      	push	{r7, lr}
 8004e64:	b082      	sub	sp, #8
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
 8004e6a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004e6c:	f002 f838 	bl	8006ee0 <__errno>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2216      	movs	r2, #22
 8004e74:	601a      	str	r2, [r3, #0]
  return -1;
 8004e76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <_exit>:

void _exit (int status)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004e8a:	f04f 31ff 	mov.w	r1, #4294967295
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7ff ffe7 	bl	8004e62 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004e94:	bf00      	nop
 8004e96:	e7fd      	b.n	8004e94 <_exit+0x12>

08004e98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b086      	sub	sp, #24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	617b      	str	r3, [r7, #20]
 8004ea8:	e00a      	b.n	8004ec0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004eaa:	f3af 8000 	nop.w
 8004eae:	4601      	mov	r1, r0
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	60ba      	str	r2, [r7, #8]
 8004eb6:	b2ca      	uxtb	r2, r1
 8004eb8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	697a      	ldr	r2, [r7, #20]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	dbf0      	blt.n	8004eaa <_read+0x12>
  }

  return len;
 8004ec8:	687b      	ldr	r3, [r7, #4]
}
 8004eca:	4618      	mov	r0, r3
 8004ecc:	3718      	adds	r7, #24
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	bd80      	pop	{r7, pc}

08004ed2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004ed2:	b580      	push	{r7, lr}
 8004ed4:	b086      	sub	sp, #24
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	60f8      	str	r0, [r7, #12]
 8004eda:	60b9      	str	r1, [r7, #8]
 8004edc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ede:	2300      	movs	r3, #0
 8004ee0:	617b      	str	r3, [r7, #20]
 8004ee2:	e009      	b.n	8004ef8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	60ba      	str	r2, [r7, #8]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	4618      	mov	r0, r3
 8004eee:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	3301      	adds	r3, #1
 8004ef6:	617b      	str	r3, [r7, #20]
 8004ef8:	697a      	ldr	r2, [r7, #20]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	dbf1      	blt.n	8004ee4 <_write+0x12>
  }
  return len;
 8004f00:	687b      	ldr	r3, [r7, #4]
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3718      	adds	r7, #24
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <_close>:

int _close(int file)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b083      	sub	sp, #12
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004f12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr

08004f20 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004f30:	605a      	str	r2, [r3, #4]
  return 0;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bc80      	pop	{r7}
 8004f3c:	4770      	bx	lr

08004f3e <_isatty>:

int _isatty(int file)
{
 8004f3e:	b480      	push	{r7}
 8004f40:	b083      	sub	sp, #12
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004f46:	2301      	movs	r3, #1
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr

08004f52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b085      	sub	sp, #20
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	60f8      	str	r0, [r7, #12]
 8004f5a:	60b9      	str	r1, [r7, #8]
 8004f5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3714      	adds	r7, #20
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bc80      	pop	{r7}
 8004f68:	4770      	bx	lr
	...

08004f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b086      	sub	sp, #24
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f74:	4a14      	ldr	r2, [pc, #80]	@ (8004fc8 <_sbrk+0x5c>)
 8004f76:	4b15      	ldr	r3, [pc, #84]	@ (8004fcc <_sbrk+0x60>)
 8004f78:	1ad3      	subs	r3, r2, r3
 8004f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004f80:	4b13      	ldr	r3, [pc, #76]	@ (8004fd0 <_sbrk+0x64>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d102      	bne.n	8004f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004f88:	4b11      	ldr	r3, [pc, #68]	@ (8004fd0 <_sbrk+0x64>)
 8004f8a:	4a12      	ldr	r2, [pc, #72]	@ (8004fd4 <_sbrk+0x68>)
 8004f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004f8e:	4b10      	ldr	r3, [pc, #64]	@ (8004fd0 <_sbrk+0x64>)
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4413      	add	r3, r2
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d207      	bcs.n	8004fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004f9c:	f001 ffa0 	bl	8006ee0 <__errno>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	220c      	movs	r2, #12
 8004fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8004faa:	e009      	b.n	8004fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004fac:	4b08      	ldr	r3, [pc, #32]	@ (8004fd0 <_sbrk+0x64>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004fb2:	4b07      	ldr	r3, [pc, #28]	@ (8004fd0 <_sbrk+0x64>)
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4413      	add	r3, r2
 8004fba:	4a05      	ldr	r2, [pc, #20]	@ (8004fd0 <_sbrk+0x64>)
 8004fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3718      	adds	r7, #24
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	20005000 	.word	0x20005000
 8004fcc:	00000400 	.word	0x00000400
 8004fd0:	20000238 	.word	0x20000238
 8004fd4:	20000390 	.word	0x20000390

08004fd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004fdc:	bf00      	nop
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bc80      	pop	{r7}
 8004fe2:	4770      	bx	lr

08004fe4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004fe4:	f7ff fff8 	bl	8004fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004fe8:	480b      	ldr	r0, [pc, #44]	@ (8005018 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8004fea:	490c      	ldr	r1, [pc, #48]	@ (800501c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8004fec:	4a0c      	ldr	r2, [pc, #48]	@ (8005020 <LoopFillZerobss+0x16>)
  movs r3, #0
 8004fee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004ff0:	e002      	b.n	8004ff8 <LoopCopyDataInit>

08004ff2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004ff2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004ff4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004ff6:	3304      	adds	r3, #4

08004ff8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004ff8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004ffa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004ffc:	d3f9      	bcc.n	8004ff2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004ffe:	4a09      	ldr	r2, [pc, #36]	@ (8005024 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8005000:	4c09      	ldr	r4, [pc, #36]	@ (8005028 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005002:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005004:	e001      	b.n	800500a <LoopFillZerobss>

08005006 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005006:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005008:	3204      	adds	r2, #4

0800500a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800500a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800500c:	d3fb      	bcc.n	8005006 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800500e:	f001 ff6d 	bl	8006eec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005012:	f7ff fd39 	bl	8004a88 <main>
  bx lr
 8005016:	4770      	bx	lr
  ldr r0, =_sdata
 8005018:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800501c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8005020:	0800942c 	.word	0x0800942c
  ldr r2, =_sbss
 8005024:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8005028:	2000038c 	.word	0x2000038c

0800502c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800502c:	e7fe      	b.n	800502c <ADC1_2_IRQHandler>
	...

08005030 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005034:	4b08      	ldr	r3, [pc, #32]	@ (8005058 <HAL_Init+0x28>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a07      	ldr	r2, [pc, #28]	@ (8005058 <HAL_Init+0x28>)
 800503a:	f043 0310 	orr.w	r3, r3, #16
 800503e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005040:	2003      	movs	r0, #3
 8005042:	f000 f92b 	bl	800529c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005046:	200f      	movs	r0, #15
 8005048:	f000 f808 	bl	800505c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800504c:	f7ff fe58 	bl	8004d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	40022000 	.word	0x40022000

0800505c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b082      	sub	sp, #8
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005064:	4b12      	ldr	r3, [pc, #72]	@ (80050b0 <HAL_InitTick+0x54>)
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	4b12      	ldr	r3, [pc, #72]	@ (80050b4 <HAL_InitTick+0x58>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	4619      	mov	r1, r3
 800506e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005072:	fbb3 f3f1 	udiv	r3, r3, r1
 8005076:	fbb2 f3f3 	udiv	r3, r2, r3
 800507a:	4618      	mov	r0, r3
 800507c:	f000 f935 	bl	80052ea <HAL_SYSTICK_Config>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e00e      	b.n	80050a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b0f      	cmp	r3, #15
 800508e:	d80a      	bhi.n	80050a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005090:	2200      	movs	r2, #0
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	f04f 30ff 	mov.w	r0, #4294967295
 8005098:	f000 f90b 	bl	80052b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800509c:	4a06      	ldr	r2, [pc, #24]	@ (80050b8 <HAL_InitTick+0x5c>)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	e000      	b.n	80050a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3708      	adds	r7, #8
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	20000000 	.word	0x20000000
 80050b4:	20000008 	.word	0x20000008
 80050b8:	20000004 	.word	0x20000004

080050bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050c0:	4b05      	ldr	r3, [pc, #20]	@ (80050d8 <HAL_IncTick+0x1c>)
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	461a      	mov	r2, r3
 80050c6:	4b05      	ldr	r3, [pc, #20]	@ (80050dc <HAL_IncTick+0x20>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4413      	add	r3, r2
 80050cc:	4a03      	ldr	r2, [pc, #12]	@ (80050dc <HAL_IncTick+0x20>)
 80050ce:	6013      	str	r3, [r2, #0]
}
 80050d0:	bf00      	nop
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bc80      	pop	{r7}
 80050d6:	4770      	bx	lr
 80050d8:	20000008 	.word	0x20000008
 80050dc:	2000023c 	.word	0x2000023c

080050e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  return uwTick;
 80050e4:	4b02      	ldr	r3, [pc, #8]	@ (80050f0 <HAL_GetTick+0x10>)
 80050e6:	681b      	ldr	r3, [r3, #0]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bc80      	pop	{r7}
 80050ee:	4770      	bx	lr
 80050f0:	2000023c 	.word	0x2000023c

080050f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050fc:	f7ff fff0 	bl	80050e0 <HAL_GetTick>
 8005100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800510c:	d005      	beq.n	800511a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800510e:	4b0a      	ldr	r3, [pc, #40]	@ (8005138 <HAL_Delay+0x44>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800511a:	bf00      	nop
 800511c:	f7ff ffe0 	bl	80050e0 <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	429a      	cmp	r2, r3
 800512a:	d8f7      	bhi.n	800511c <HAL_Delay+0x28>
  {
  }
}
 800512c:	bf00      	nop
 800512e:	bf00      	nop
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	20000008 	.word	0x20000008

0800513c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800514c:	4b0c      	ldr	r3, [pc, #48]	@ (8005180 <__NVIC_SetPriorityGrouping+0x44>)
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005158:	4013      	ands	r3, r2
 800515a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005164:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005168:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800516c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800516e:	4a04      	ldr	r2, [pc, #16]	@ (8005180 <__NVIC_SetPriorityGrouping+0x44>)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	60d3      	str	r3, [r2, #12]
}
 8005174:	bf00      	nop
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	bc80      	pop	{r7}
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	e000ed00 	.word	0xe000ed00

08005184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005188:	4b04      	ldr	r3, [pc, #16]	@ (800519c <__NVIC_GetPriorityGrouping+0x18>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	0a1b      	lsrs	r3, r3, #8
 800518e:	f003 0307 	and.w	r3, r3, #7
}
 8005192:	4618      	mov	r0, r3
 8005194:	46bd      	mov	sp, r7
 8005196:	bc80      	pop	{r7}
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	e000ed00 	.word	0xe000ed00

080051a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	4603      	mov	r3, r0
 80051a8:	6039      	str	r1, [r7, #0]
 80051aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	db0a      	blt.n	80051ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	b2da      	uxtb	r2, r3
 80051b8:	490c      	ldr	r1, [pc, #48]	@ (80051ec <__NVIC_SetPriority+0x4c>)
 80051ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051be:	0112      	lsls	r2, r2, #4
 80051c0:	b2d2      	uxtb	r2, r2
 80051c2:	440b      	add	r3, r1
 80051c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051c8:	e00a      	b.n	80051e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	4908      	ldr	r1, [pc, #32]	@ (80051f0 <__NVIC_SetPriority+0x50>)
 80051d0:	79fb      	ldrb	r3, [r7, #7]
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	3b04      	subs	r3, #4
 80051d8:	0112      	lsls	r2, r2, #4
 80051da:	b2d2      	uxtb	r2, r2
 80051dc:	440b      	add	r3, r1
 80051de:	761a      	strb	r2, [r3, #24]
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bc80      	pop	{r7}
 80051e8:	4770      	bx	lr
 80051ea:	bf00      	nop
 80051ec:	e000e100 	.word	0xe000e100
 80051f0:	e000ed00 	.word	0xe000ed00

080051f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b089      	sub	sp, #36	@ 0x24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f003 0307 	and.w	r3, r3, #7
 8005206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	f1c3 0307 	rsb	r3, r3, #7
 800520e:	2b04      	cmp	r3, #4
 8005210:	bf28      	it	cs
 8005212:	2304      	movcs	r3, #4
 8005214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	3304      	adds	r3, #4
 800521a:	2b06      	cmp	r3, #6
 800521c:	d902      	bls.n	8005224 <NVIC_EncodePriority+0x30>
 800521e:	69fb      	ldr	r3, [r7, #28]
 8005220:	3b03      	subs	r3, #3
 8005222:	e000      	b.n	8005226 <NVIC_EncodePriority+0x32>
 8005224:	2300      	movs	r3, #0
 8005226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005228:	f04f 32ff 	mov.w	r2, #4294967295
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	fa02 f303 	lsl.w	r3, r2, r3
 8005232:	43da      	mvns	r2, r3
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	401a      	ands	r2, r3
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800523c:	f04f 31ff 	mov.w	r1, #4294967295
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	fa01 f303 	lsl.w	r3, r1, r3
 8005246:	43d9      	mvns	r1, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800524c:	4313      	orrs	r3, r2
         );
}
 800524e:	4618      	mov	r0, r3
 8005250:	3724      	adds	r7, #36	@ 0x24
 8005252:	46bd      	mov	sp, r7
 8005254:	bc80      	pop	{r7}
 8005256:	4770      	bx	lr

08005258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3b01      	subs	r3, #1
 8005264:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005268:	d301      	bcc.n	800526e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800526a:	2301      	movs	r3, #1
 800526c:	e00f      	b.n	800528e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800526e:	4a0a      	ldr	r2, [pc, #40]	@ (8005298 <SysTick_Config+0x40>)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	3b01      	subs	r3, #1
 8005274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005276:	210f      	movs	r1, #15
 8005278:	f04f 30ff 	mov.w	r0, #4294967295
 800527c:	f7ff ff90 	bl	80051a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005280:	4b05      	ldr	r3, [pc, #20]	@ (8005298 <SysTick_Config+0x40>)
 8005282:	2200      	movs	r2, #0
 8005284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005286:	4b04      	ldr	r3, [pc, #16]	@ (8005298 <SysTick_Config+0x40>)
 8005288:	2207      	movs	r2, #7
 800528a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3708      	adds	r7, #8
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	e000e010 	.word	0xe000e010

0800529c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f7ff ff49 	bl	800513c <__NVIC_SetPriorityGrouping>
}
 80052aa:	bf00      	nop
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b086      	sub	sp, #24
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	4603      	mov	r3, r0
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	607a      	str	r2, [r7, #4]
 80052be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052c0:	2300      	movs	r3, #0
 80052c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052c4:	f7ff ff5e 	bl	8005184 <__NVIC_GetPriorityGrouping>
 80052c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	68b9      	ldr	r1, [r7, #8]
 80052ce:	6978      	ldr	r0, [r7, #20]
 80052d0:	f7ff ff90 	bl	80051f4 <NVIC_EncodePriority>
 80052d4:	4602      	mov	r2, r0
 80052d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052da:	4611      	mov	r1, r2
 80052dc:	4618      	mov	r0, r3
 80052de:	f7ff ff5f 	bl	80051a0 <__NVIC_SetPriority>
}
 80052e2:	bf00      	nop
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b082      	sub	sp, #8
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f7ff ffb0 	bl	8005258 <SysTick_Config>
 80052f8:	4603      	mov	r3, r0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005304:	b480      	push	{r7}
 8005306:	b08b      	sub	sp, #44	@ 0x2c
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800530e:	2300      	movs	r3, #0
 8005310:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8005312:	2300      	movs	r3, #0
 8005314:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005316:	e169      	b.n	80055ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8005318:	2201      	movs	r2, #1
 800531a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531c:	fa02 f303 	lsl.w	r3, r2, r3
 8005320:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	4013      	ands	r3, r2
 800532a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	429a      	cmp	r2, r3
 8005332:	f040 8158 	bne.w	80055e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	4a9a      	ldr	r2, [pc, #616]	@ (80055a4 <HAL_GPIO_Init+0x2a0>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d05e      	beq.n	80053fe <HAL_GPIO_Init+0xfa>
 8005340:	4a98      	ldr	r2, [pc, #608]	@ (80055a4 <HAL_GPIO_Init+0x2a0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d875      	bhi.n	8005432 <HAL_GPIO_Init+0x12e>
 8005346:	4a98      	ldr	r2, [pc, #608]	@ (80055a8 <HAL_GPIO_Init+0x2a4>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d058      	beq.n	80053fe <HAL_GPIO_Init+0xfa>
 800534c:	4a96      	ldr	r2, [pc, #600]	@ (80055a8 <HAL_GPIO_Init+0x2a4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d86f      	bhi.n	8005432 <HAL_GPIO_Init+0x12e>
 8005352:	4a96      	ldr	r2, [pc, #600]	@ (80055ac <HAL_GPIO_Init+0x2a8>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d052      	beq.n	80053fe <HAL_GPIO_Init+0xfa>
 8005358:	4a94      	ldr	r2, [pc, #592]	@ (80055ac <HAL_GPIO_Init+0x2a8>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d869      	bhi.n	8005432 <HAL_GPIO_Init+0x12e>
 800535e:	4a94      	ldr	r2, [pc, #592]	@ (80055b0 <HAL_GPIO_Init+0x2ac>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d04c      	beq.n	80053fe <HAL_GPIO_Init+0xfa>
 8005364:	4a92      	ldr	r2, [pc, #584]	@ (80055b0 <HAL_GPIO_Init+0x2ac>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d863      	bhi.n	8005432 <HAL_GPIO_Init+0x12e>
 800536a:	4a92      	ldr	r2, [pc, #584]	@ (80055b4 <HAL_GPIO_Init+0x2b0>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d046      	beq.n	80053fe <HAL_GPIO_Init+0xfa>
 8005370:	4a90      	ldr	r2, [pc, #576]	@ (80055b4 <HAL_GPIO_Init+0x2b0>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d85d      	bhi.n	8005432 <HAL_GPIO_Init+0x12e>
 8005376:	2b12      	cmp	r3, #18
 8005378:	d82a      	bhi.n	80053d0 <HAL_GPIO_Init+0xcc>
 800537a:	2b12      	cmp	r3, #18
 800537c:	d859      	bhi.n	8005432 <HAL_GPIO_Init+0x12e>
 800537e:	a201      	add	r2, pc, #4	@ (adr r2, 8005384 <HAL_GPIO_Init+0x80>)
 8005380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005384:	080053ff 	.word	0x080053ff
 8005388:	080053d9 	.word	0x080053d9
 800538c:	080053eb 	.word	0x080053eb
 8005390:	0800542d 	.word	0x0800542d
 8005394:	08005433 	.word	0x08005433
 8005398:	08005433 	.word	0x08005433
 800539c:	08005433 	.word	0x08005433
 80053a0:	08005433 	.word	0x08005433
 80053a4:	08005433 	.word	0x08005433
 80053a8:	08005433 	.word	0x08005433
 80053ac:	08005433 	.word	0x08005433
 80053b0:	08005433 	.word	0x08005433
 80053b4:	08005433 	.word	0x08005433
 80053b8:	08005433 	.word	0x08005433
 80053bc:	08005433 	.word	0x08005433
 80053c0:	08005433 	.word	0x08005433
 80053c4:	08005433 	.word	0x08005433
 80053c8:	080053e1 	.word	0x080053e1
 80053cc:	080053f5 	.word	0x080053f5
 80053d0:	4a79      	ldr	r2, [pc, #484]	@ (80055b8 <HAL_GPIO_Init+0x2b4>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d013      	beq.n	80053fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80053d6:	e02c      	b.n	8005432 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	623b      	str	r3, [r7, #32]
          break;
 80053de:	e029      	b.n	8005434 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	3304      	adds	r3, #4
 80053e6:	623b      	str	r3, [r7, #32]
          break;
 80053e8:	e024      	b.n	8005434 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	3308      	adds	r3, #8
 80053f0:	623b      	str	r3, [r7, #32]
          break;
 80053f2:	e01f      	b.n	8005434 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	330c      	adds	r3, #12
 80053fa:	623b      	str	r3, [r7, #32]
          break;
 80053fc:	e01a      	b.n	8005434 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d102      	bne.n	800540c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8005406:	2304      	movs	r3, #4
 8005408:	623b      	str	r3, [r7, #32]
          break;
 800540a:	e013      	b.n	8005434 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d105      	bne.n	8005420 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005414:	2308      	movs	r3, #8
 8005416:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	69fa      	ldr	r2, [r7, #28]
 800541c:	611a      	str	r2, [r3, #16]
          break;
 800541e:	e009      	b.n	8005434 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8005420:	2308      	movs	r3, #8
 8005422:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	69fa      	ldr	r2, [r7, #28]
 8005428:	615a      	str	r2, [r3, #20]
          break;
 800542a:	e003      	b.n	8005434 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800542c:	2300      	movs	r3, #0
 800542e:	623b      	str	r3, [r7, #32]
          break;
 8005430:	e000      	b.n	8005434 <HAL_GPIO_Init+0x130>
          break;
 8005432:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	2bff      	cmp	r3, #255	@ 0xff
 8005438:	d801      	bhi.n	800543e <HAL_GPIO_Init+0x13a>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	e001      	b.n	8005442 <HAL_GPIO_Init+0x13e>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	3304      	adds	r3, #4
 8005442:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	2bff      	cmp	r3, #255	@ 0xff
 8005448:	d802      	bhi.n	8005450 <HAL_GPIO_Init+0x14c>
 800544a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544c:	009b      	lsls	r3, r3, #2
 800544e:	e002      	b.n	8005456 <HAL_GPIO_Init+0x152>
 8005450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005452:	3b08      	subs	r3, #8
 8005454:	009b      	lsls	r3, r3, #2
 8005456:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	210f      	movs	r1, #15
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	fa01 f303 	lsl.w	r3, r1, r3
 8005464:	43db      	mvns	r3, r3
 8005466:	401a      	ands	r2, r3
 8005468:	6a39      	ldr	r1, [r7, #32]
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	fa01 f303 	lsl.w	r3, r1, r3
 8005470:	431a      	orrs	r2, r3
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800547e:	2b00      	cmp	r3, #0
 8005480:	f000 80b1 	beq.w	80055e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8005484:	4b4d      	ldr	r3, [pc, #308]	@ (80055bc <HAL_GPIO_Init+0x2b8>)
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	4a4c      	ldr	r2, [pc, #304]	@ (80055bc <HAL_GPIO_Init+0x2b8>)
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	6193      	str	r3, [r2, #24]
 8005490:	4b4a      	ldr	r3, [pc, #296]	@ (80055bc <HAL_GPIO_Init+0x2b8>)
 8005492:	699b      	ldr	r3, [r3, #24]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	60bb      	str	r3, [r7, #8]
 800549a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800549c:	4a48      	ldr	r2, [pc, #288]	@ (80055c0 <HAL_GPIO_Init+0x2bc>)
 800549e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a0:	089b      	lsrs	r3, r3, #2
 80054a2:	3302      	adds	r3, #2
 80054a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80054aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ac:	f003 0303 	and.w	r3, r3, #3
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	220f      	movs	r2, #15
 80054b4:	fa02 f303 	lsl.w	r3, r2, r3
 80054b8:	43db      	mvns	r3, r3
 80054ba:	68fa      	ldr	r2, [r7, #12]
 80054bc:	4013      	ands	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4a40      	ldr	r2, [pc, #256]	@ (80055c4 <HAL_GPIO_Init+0x2c0>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d013      	beq.n	80054f0 <HAL_GPIO_Init+0x1ec>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a3f      	ldr	r2, [pc, #252]	@ (80055c8 <HAL_GPIO_Init+0x2c4>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d00d      	beq.n	80054ec <HAL_GPIO_Init+0x1e8>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a3e      	ldr	r2, [pc, #248]	@ (80055cc <HAL_GPIO_Init+0x2c8>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d007      	beq.n	80054e8 <HAL_GPIO_Init+0x1e4>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a3d      	ldr	r2, [pc, #244]	@ (80055d0 <HAL_GPIO_Init+0x2cc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d101      	bne.n	80054e4 <HAL_GPIO_Init+0x1e0>
 80054e0:	2303      	movs	r3, #3
 80054e2:	e006      	b.n	80054f2 <HAL_GPIO_Init+0x1ee>
 80054e4:	2304      	movs	r3, #4
 80054e6:	e004      	b.n	80054f2 <HAL_GPIO_Init+0x1ee>
 80054e8:	2302      	movs	r3, #2
 80054ea:	e002      	b.n	80054f2 <HAL_GPIO_Init+0x1ee>
 80054ec:	2301      	movs	r3, #1
 80054ee:	e000      	b.n	80054f2 <HAL_GPIO_Init+0x1ee>
 80054f0:	2300      	movs	r3, #0
 80054f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054f4:	f002 0203 	and.w	r2, r2, #3
 80054f8:	0092      	lsls	r2, r2, #2
 80054fa:	4093      	lsls	r3, r2
 80054fc:	68fa      	ldr	r2, [r7, #12]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8005502:	492f      	ldr	r1, [pc, #188]	@ (80055c0 <HAL_GPIO_Init+0x2bc>)
 8005504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005506:	089b      	lsrs	r3, r3, #2
 8005508:	3302      	adds	r3, #2
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d006      	beq.n	800552a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800551c:	4b2d      	ldr	r3, [pc, #180]	@ (80055d4 <HAL_GPIO_Init+0x2d0>)
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	492c      	ldr	r1, [pc, #176]	@ (80055d4 <HAL_GPIO_Init+0x2d0>)
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	4313      	orrs	r3, r2
 8005526:	608b      	str	r3, [r1, #8]
 8005528:	e006      	b.n	8005538 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800552a:	4b2a      	ldr	r3, [pc, #168]	@ (80055d4 <HAL_GPIO_Init+0x2d0>)
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	43db      	mvns	r3, r3
 8005532:	4928      	ldr	r1, [pc, #160]	@ (80055d4 <HAL_GPIO_Init+0x2d0>)
 8005534:	4013      	ands	r3, r2
 8005536:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d006      	beq.n	8005552 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8005544:	4b23      	ldr	r3, [pc, #140]	@ (80055d4 <HAL_GPIO_Init+0x2d0>)
 8005546:	68da      	ldr	r2, [r3, #12]
 8005548:	4922      	ldr	r1, [pc, #136]	@ (80055d4 <HAL_GPIO_Init+0x2d0>)
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	4313      	orrs	r3, r2
 800554e:	60cb      	str	r3, [r1, #12]
 8005550:	e006      	b.n	8005560 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8005552:	4b20      	ldr	r3, [pc, #128]	@ (80055d4 <HAL_GPIO_Init+0x2d0>)
 8005554:	68da      	ldr	r2, [r3, #12]
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	43db      	mvns	r3, r3
 800555a:	491e      	ldr	r1, [pc, #120]	@ (80055d4 <HAL_GPIO_Init+0x2d0>)
 800555c:	4013      	ands	r3, r2
 800555e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d006      	beq.n	800557a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800556c:	4b19      	ldr	r3, [pc, #100]	@ (80055d4 <HAL_GPIO_Init+0x2d0>)
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	4918      	ldr	r1, [pc, #96]	@ (80055d4 <HAL_GPIO_Init+0x2d0>)
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	4313      	orrs	r3, r2
 8005576:	604b      	str	r3, [r1, #4]
 8005578:	e006      	b.n	8005588 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800557a:	4b16      	ldr	r3, [pc, #88]	@ (80055d4 <HAL_GPIO_Init+0x2d0>)
 800557c:	685a      	ldr	r2, [r3, #4]
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	43db      	mvns	r3, r3
 8005582:	4914      	ldr	r1, [pc, #80]	@ (80055d4 <HAL_GPIO_Init+0x2d0>)
 8005584:	4013      	ands	r3, r2
 8005586:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d021      	beq.n	80055d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8005594:	4b0f      	ldr	r3, [pc, #60]	@ (80055d4 <HAL_GPIO_Init+0x2d0>)
 8005596:	681a      	ldr	r2, [r3, #0]
 8005598:	490e      	ldr	r1, [pc, #56]	@ (80055d4 <HAL_GPIO_Init+0x2d0>)
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	4313      	orrs	r3, r2
 800559e:	600b      	str	r3, [r1, #0]
 80055a0:	e021      	b.n	80055e6 <HAL_GPIO_Init+0x2e2>
 80055a2:	bf00      	nop
 80055a4:	10320000 	.word	0x10320000
 80055a8:	10310000 	.word	0x10310000
 80055ac:	10220000 	.word	0x10220000
 80055b0:	10210000 	.word	0x10210000
 80055b4:	10120000 	.word	0x10120000
 80055b8:	10110000 	.word	0x10110000
 80055bc:	40021000 	.word	0x40021000
 80055c0:	40010000 	.word	0x40010000
 80055c4:	40010800 	.word	0x40010800
 80055c8:	40010c00 	.word	0x40010c00
 80055cc:	40011000 	.word	0x40011000
 80055d0:	40011400 	.word	0x40011400
 80055d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80055d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005608 <HAL_GPIO_Init+0x304>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	69bb      	ldr	r3, [r7, #24]
 80055de:	43db      	mvns	r3, r3
 80055e0:	4909      	ldr	r1, [pc, #36]	@ (8005608 <HAL_GPIO_Init+0x304>)
 80055e2:	4013      	ands	r3, r2
 80055e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80055e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e8:	3301      	adds	r3, #1
 80055ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055f2:	fa22 f303 	lsr.w	r3, r2, r3
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	f47f ae8e 	bne.w	8005318 <HAL_GPIO_Init+0x14>
  }
}
 80055fc:	bf00      	nop
 80055fe:	bf00      	nop
 8005600:	372c      	adds	r7, #44	@ 0x2c
 8005602:	46bd      	mov	sp, r7
 8005604:	bc80      	pop	{r7}
 8005606:	4770      	bx	lr
 8005608:	40010400 	.word	0x40010400

0800560c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800560c:	b480      	push	{r7}
 800560e:	b085      	sub	sp, #20
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	460b      	mov	r3, r1
 8005616:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	887b      	ldrh	r3, [r7, #2]
 800561e:	4013      	ands	r3, r2
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005624:	2301      	movs	r3, #1
 8005626:	73fb      	strb	r3, [r7, #15]
 8005628:	e001      	b.n	800562e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800562a:	2300      	movs	r3, #0
 800562c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800562e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005630:	4618      	mov	r0, r3
 8005632:	3714      	adds	r7, #20
 8005634:	46bd      	mov	sp, r7
 8005636:	bc80      	pop	{r7}
 8005638:	4770      	bx	lr

0800563a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800563a:	b480      	push	{r7}
 800563c:	b083      	sub	sp, #12
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	460b      	mov	r3, r1
 8005644:	807b      	strh	r3, [r7, #2]
 8005646:	4613      	mov	r3, r2
 8005648:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800564a:	787b      	ldrb	r3, [r7, #1]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005650:	887a      	ldrh	r2, [r7, #2]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005656:	e003      	b.n	8005660 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005658:	887b      	ldrh	r3, [r7, #2]
 800565a:	041a      	lsls	r2, r3, #16
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	611a      	str	r2, [r3, #16]
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	bc80      	pop	{r7}
 8005668:	4770      	bx	lr

0800566a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800566a:	b480      	push	{r7}
 800566c:	b085      	sub	sp, #20
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	460b      	mov	r3, r1
 8005674:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800567c:	887a      	ldrh	r2, [r7, #2]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4013      	ands	r3, r2
 8005682:	041a      	lsls	r2, r3, #16
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	43d9      	mvns	r1, r3
 8005688:	887b      	ldrh	r3, [r7, #2]
 800568a:	400b      	ands	r3, r1
 800568c:	431a      	orrs	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	611a      	str	r2, [r3, #16]
}
 8005692:	bf00      	nop
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	bc80      	pop	{r7}
 800569a:	4770      	bx	lr

0800569c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b086      	sub	sp, #24
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	e272      	b.n	8005b94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f000 8087 	beq.w	80057ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80056bc:	4b92      	ldr	r3, [pc, #584]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	f003 030c 	and.w	r3, r3, #12
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	d00c      	beq.n	80056e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80056c8:	4b8f      	ldr	r3, [pc, #572]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	f003 030c 	and.w	r3, r3, #12
 80056d0:	2b08      	cmp	r3, #8
 80056d2:	d112      	bne.n	80056fa <HAL_RCC_OscConfig+0x5e>
 80056d4:	4b8c      	ldr	r3, [pc, #560]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80056dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056e0:	d10b      	bne.n	80056fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e2:	4b89      	ldr	r3, [pc, #548]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d06c      	beq.n	80057c8 <HAL_RCC_OscConfig+0x12c>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d168      	bne.n	80057c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e24c      	b.n	8005b94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005702:	d106      	bne.n	8005712 <HAL_RCC_OscConfig+0x76>
 8005704:	4b80      	ldr	r3, [pc, #512]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a7f      	ldr	r2, [pc, #508]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 800570a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800570e:	6013      	str	r3, [r2, #0]
 8005710:	e02e      	b.n	8005770 <HAL_RCC_OscConfig+0xd4>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d10c      	bne.n	8005734 <HAL_RCC_OscConfig+0x98>
 800571a:	4b7b      	ldr	r3, [pc, #492]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a7a      	ldr	r2, [pc, #488]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 8005720:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	4b78      	ldr	r3, [pc, #480]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a77      	ldr	r2, [pc, #476]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 800572c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005730:	6013      	str	r3, [r2, #0]
 8005732:	e01d      	b.n	8005770 <HAL_RCC_OscConfig+0xd4>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800573c:	d10c      	bne.n	8005758 <HAL_RCC_OscConfig+0xbc>
 800573e:	4b72      	ldr	r3, [pc, #456]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a71      	ldr	r2, [pc, #452]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 8005744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	4b6f      	ldr	r3, [pc, #444]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a6e      	ldr	r2, [pc, #440]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 8005750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005754:	6013      	str	r3, [r2, #0]
 8005756:	e00b      	b.n	8005770 <HAL_RCC_OscConfig+0xd4>
 8005758:	4b6b      	ldr	r3, [pc, #428]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a6a      	ldr	r2, [pc, #424]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 800575e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005762:	6013      	str	r3, [r2, #0]
 8005764:	4b68      	ldr	r3, [pc, #416]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a67      	ldr	r2, [pc, #412]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 800576a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800576e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d013      	beq.n	80057a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005778:	f7ff fcb2 	bl	80050e0 <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005780:	f7ff fcae 	bl	80050e0 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b64      	cmp	r3, #100	@ 0x64
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e200      	b.n	8005b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005792:	4b5d      	ldr	r3, [pc, #372]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0f0      	beq.n	8005780 <HAL_RCC_OscConfig+0xe4>
 800579e:	e014      	b.n	80057ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a0:	f7ff fc9e 	bl	80050e0 <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057a6:	e008      	b.n	80057ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057a8:	f7ff fc9a 	bl	80050e0 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	2b64      	cmp	r3, #100	@ 0x64
 80057b4:	d901      	bls.n	80057ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80057b6:	2303      	movs	r3, #3
 80057b8:	e1ec      	b.n	8005b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80057ba:	4b53      	ldr	r3, [pc, #332]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1f0      	bne.n	80057a8 <HAL_RCC_OscConfig+0x10c>
 80057c6:	e000      	b.n	80057ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d063      	beq.n	800589e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80057d6:	4b4c      	ldr	r3, [pc, #304]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	f003 030c 	and.w	r3, r3, #12
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d00b      	beq.n	80057fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80057e2:	4b49      	ldr	r3, [pc, #292]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f003 030c 	and.w	r3, r3, #12
 80057ea:	2b08      	cmp	r3, #8
 80057ec:	d11c      	bne.n	8005828 <HAL_RCC_OscConfig+0x18c>
 80057ee:	4b46      	ldr	r3, [pc, #280]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d116      	bne.n	8005828 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057fa:	4b43      	ldr	r3, [pc, #268]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d005      	beq.n	8005812 <HAL_RCC_OscConfig+0x176>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d001      	beq.n	8005812 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e1c0      	b.n	8005b94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005812:	4b3d      	ldr	r3, [pc, #244]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	00db      	lsls	r3, r3, #3
 8005820:	4939      	ldr	r1, [pc, #228]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 8005822:	4313      	orrs	r3, r2
 8005824:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005826:	e03a      	b.n	800589e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d020      	beq.n	8005872 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005830:	4b36      	ldr	r3, [pc, #216]	@ (800590c <HAL_RCC_OscConfig+0x270>)
 8005832:	2201      	movs	r2, #1
 8005834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005836:	f7ff fc53 	bl	80050e0 <HAL_GetTick>
 800583a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800583c:	e008      	b.n	8005850 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800583e:	f7ff fc4f 	bl	80050e0 <HAL_GetTick>
 8005842:	4602      	mov	r2, r0
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	1ad3      	subs	r3, r2, r3
 8005848:	2b02      	cmp	r3, #2
 800584a:	d901      	bls.n	8005850 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e1a1      	b.n	8005b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005850:	4b2d      	ldr	r3, [pc, #180]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d0f0      	beq.n	800583e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800585c:	4b2a      	ldr	r3, [pc, #168]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	4927      	ldr	r1, [pc, #156]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 800586c:	4313      	orrs	r3, r2
 800586e:	600b      	str	r3, [r1, #0]
 8005870:	e015      	b.n	800589e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005872:	4b26      	ldr	r3, [pc, #152]	@ (800590c <HAL_RCC_OscConfig+0x270>)
 8005874:	2200      	movs	r2, #0
 8005876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005878:	f7ff fc32 	bl	80050e0 <HAL_GetTick>
 800587c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800587e:	e008      	b.n	8005892 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005880:	f7ff fc2e 	bl	80050e0 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b02      	cmp	r3, #2
 800588c:	d901      	bls.n	8005892 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e180      	b.n	8005b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005892:	4b1d      	ldr	r3, [pc, #116]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1f0      	bne.n	8005880 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0308 	and.w	r3, r3, #8
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d03a      	beq.n	8005920 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d019      	beq.n	80058e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80058b2:	4b17      	ldr	r3, [pc, #92]	@ (8005910 <HAL_RCC_OscConfig+0x274>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058b8:	f7ff fc12 	bl	80050e0 <HAL_GetTick>
 80058bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058be:	e008      	b.n	80058d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058c0:	f7ff fc0e 	bl	80050e0 <HAL_GetTick>
 80058c4:	4602      	mov	r2, r0
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	1ad3      	subs	r3, r2, r3
 80058ca:	2b02      	cmp	r3, #2
 80058cc:	d901      	bls.n	80058d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80058ce:	2303      	movs	r3, #3
 80058d0:	e160      	b.n	8005b94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005908 <HAL_RCC_OscConfig+0x26c>)
 80058d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d6:	f003 0302 	and.w	r3, r3, #2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d0f0      	beq.n	80058c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80058de:	2001      	movs	r0, #1
 80058e0:	f000 face 	bl	8005e80 <RCC_Delay>
 80058e4:	e01c      	b.n	8005920 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005910 <HAL_RCC_OscConfig+0x274>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80058ec:	f7ff fbf8 	bl	80050e0 <HAL_GetTick>
 80058f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058f2:	e00f      	b.n	8005914 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058f4:	f7ff fbf4 	bl	80050e0 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d908      	bls.n	8005914 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e146      	b.n	8005b94 <HAL_RCC_OscConfig+0x4f8>
 8005906:	bf00      	nop
 8005908:	40021000 	.word	0x40021000
 800590c:	42420000 	.word	0x42420000
 8005910:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005914:	4b92      	ldr	r3, [pc, #584]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 8005916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005918:	f003 0302 	and.w	r3, r3, #2
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1e9      	bne.n	80058f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 80a6 	beq.w	8005a7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800592e:	2300      	movs	r3, #0
 8005930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005932:	4b8b      	ldr	r3, [pc, #556]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 8005934:	69db      	ldr	r3, [r3, #28]
 8005936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800593a:	2b00      	cmp	r3, #0
 800593c:	d10d      	bne.n	800595a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800593e:	4b88      	ldr	r3, [pc, #544]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	4a87      	ldr	r2, [pc, #540]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 8005944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005948:	61d3      	str	r3, [r2, #28]
 800594a:	4b85      	ldr	r3, [pc, #532]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005952:	60bb      	str	r3, [r7, #8]
 8005954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005956:	2301      	movs	r3, #1
 8005958:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800595a:	4b82      	ldr	r3, [pc, #520]	@ (8005b64 <HAL_RCC_OscConfig+0x4c8>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005962:	2b00      	cmp	r3, #0
 8005964:	d118      	bne.n	8005998 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005966:	4b7f      	ldr	r3, [pc, #508]	@ (8005b64 <HAL_RCC_OscConfig+0x4c8>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a7e      	ldr	r2, [pc, #504]	@ (8005b64 <HAL_RCC_OscConfig+0x4c8>)
 800596c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005972:	f7ff fbb5 	bl	80050e0 <HAL_GetTick>
 8005976:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005978:	e008      	b.n	800598c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800597a:	f7ff fbb1 	bl	80050e0 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b64      	cmp	r3, #100	@ 0x64
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e103      	b.n	8005b94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800598c:	4b75      	ldr	r3, [pc, #468]	@ (8005b64 <HAL_RCC_OscConfig+0x4c8>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005994:	2b00      	cmp	r3, #0
 8005996:	d0f0      	beq.n	800597a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d106      	bne.n	80059ae <HAL_RCC_OscConfig+0x312>
 80059a0:	4b6f      	ldr	r3, [pc, #444]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	4a6e      	ldr	r2, [pc, #440]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 80059a6:	f043 0301 	orr.w	r3, r3, #1
 80059aa:	6213      	str	r3, [r2, #32]
 80059ac:	e02d      	b.n	8005a0a <HAL_RCC_OscConfig+0x36e>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	68db      	ldr	r3, [r3, #12]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d10c      	bne.n	80059d0 <HAL_RCC_OscConfig+0x334>
 80059b6:	4b6a      	ldr	r3, [pc, #424]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 80059b8:	6a1b      	ldr	r3, [r3, #32]
 80059ba:	4a69      	ldr	r2, [pc, #420]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 80059bc:	f023 0301 	bic.w	r3, r3, #1
 80059c0:	6213      	str	r3, [r2, #32]
 80059c2:	4b67      	ldr	r3, [pc, #412]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	4a66      	ldr	r2, [pc, #408]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 80059c8:	f023 0304 	bic.w	r3, r3, #4
 80059cc:	6213      	str	r3, [r2, #32]
 80059ce:	e01c      	b.n	8005a0a <HAL_RCC_OscConfig+0x36e>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	2b05      	cmp	r3, #5
 80059d6:	d10c      	bne.n	80059f2 <HAL_RCC_OscConfig+0x356>
 80059d8:	4b61      	ldr	r3, [pc, #388]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 80059da:	6a1b      	ldr	r3, [r3, #32]
 80059dc:	4a60      	ldr	r2, [pc, #384]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 80059de:	f043 0304 	orr.w	r3, r3, #4
 80059e2:	6213      	str	r3, [r2, #32]
 80059e4:	4b5e      	ldr	r3, [pc, #376]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	4a5d      	ldr	r2, [pc, #372]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 80059ea:	f043 0301 	orr.w	r3, r3, #1
 80059ee:	6213      	str	r3, [r2, #32]
 80059f0:	e00b      	b.n	8005a0a <HAL_RCC_OscConfig+0x36e>
 80059f2:	4b5b      	ldr	r3, [pc, #364]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	4a5a      	ldr	r2, [pc, #360]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 80059f8:	f023 0301 	bic.w	r3, r3, #1
 80059fc:	6213      	str	r3, [r2, #32]
 80059fe:	4b58      	ldr	r3, [pc, #352]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 8005a00:	6a1b      	ldr	r3, [r3, #32]
 8005a02:	4a57      	ldr	r2, [pc, #348]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 8005a04:	f023 0304 	bic.w	r3, r3, #4
 8005a08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	68db      	ldr	r3, [r3, #12]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d015      	beq.n	8005a3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a12:	f7ff fb65 	bl	80050e0 <HAL_GetTick>
 8005a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a18:	e00a      	b.n	8005a30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a1a:	f7ff fb61 	bl	80050e0 <HAL_GetTick>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	1ad3      	subs	r3, r2, r3
 8005a24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d901      	bls.n	8005a30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e0b1      	b.n	8005b94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a30:	4b4b      	ldr	r3, [pc, #300]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 8005a32:	6a1b      	ldr	r3, [r3, #32]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d0ee      	beq.n	8005a1a <HAL_RCC_OscConfig+0x37e>
 8005a3c:	e014      	b.n	8005a68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a3e:	f7ff fb4f 	bl	80050e0 <HAL_GetTick>
 8005a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a44:	e00a      	b.n	8005a5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a46:	f7ff fb4b 	bl	80050e0 <HAL_GetTick>
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	693b      	ldr	r3, [r7, #16]
 8005a4e:	1ad3      	subs	r3, r2, r3
 8005a50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d901      	bls.n	8005a5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005a58:	2303      	movs	r3, #3
 8005a5a:	e09b      	b.n	8005b94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a5c:	4b40      	ldr	r3, [pc, #256]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 8005a5e:	6a1b      	ldr	r3, [r3, #32]
 8005a60:	f003 0302 	and.w	r3, r3, #2
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d1ee      	bne.n	8005a46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005a68:	7dfb      	ldrb	r3, [r7, #23]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d105      	bne.n	8005a7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a6e:	4b3c      	ldr	r3, [pc, #240]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	4a3b      	ldr	r2, [pc, #236]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 8005a74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	69db      	ldr	r3, [r3, #28]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	f000 8087 	beq.w	8005b92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a84:	4b36      	ldr	r3, [pc, #216]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f003 030c 	and.w	r3, r3, #12
 8005a8c:	2b08      	cmp	r3, #8
 8005a8e:	d061      	beq.n	8005b54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	69db      	ldr	r3, [r3, #28]
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d146      	bne.n	8005b26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a98:	4b33      	ldr	r3, [pc, #204]	@ (8005b68 <HAL_RCC_OscConfig+0x4cc>)
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a9e:	f7ff fb1f 	bl	80050e0 <HAL_GetTick>
 8005aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005aa4:	e008      	b.n	8005ab8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005aa6:	f7ff fb1b 	bl	80050e0 <HAL_GetTick>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d901      	bls.n	8005ab8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e06d      	b.n	8005b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005ab8:	4b29      	ldr	r3, [pc, #164]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1f0      	bne.n	8005aa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005acc:	d108      	bne.n	8005ae0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8005ace:	4b24      	ldr	r3, [pc, #144]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	4921      	ldr	r1, [pc, #132]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a19      	ldr	r1, [r3, #32]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af0:	430b      	orrs	r3, r1
 8005af2:	491b      	ldr	r1, [pc, #108]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 8005af4:	4313      	orrs	r3, r2
 8005af6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005af8:	4b1b      	ldr	r3, [pc, #108]	@ (8005b68 <HAL_RCC_OscConfig+0x4cc>)
 8005afa:	2201      	movs	r2, #1
 8005afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005afe:	f7ff faef 	bl	80050e0 <HAL_GetTick>
 8005b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b04:	e008      	b.n	8005b18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b06:	f7ff faeb 	bl	80050e0 <HAL_GetTick>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	1ad3      	subs	r3, r2, r3
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d901      	bls.n	8005b18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e03d      	b.n	8005b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005b18:	4b11      	ldr	r3, [pc, #68]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d0f0      	beq.n	8005b06 <HAL_RCC_OscConfig+0x46a>
 8005b24:	e035      	b.n	8005b92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b26:	4b10      	ldr	r3, [pc, #64]	@ (8005b68 <HAL_RCC_OscConfig+0x4cc>)
 8005b28:	2200      	movs	r2, #0
 8005b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b2c:	f7ff fad8 	bl	80050e0 <HAL_GetTick>
 8005b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b32:	e008      	b.n	8005b46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b34:	f7ff fad4 	bl	80050e0 <HAL_GetTick>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	693b      	ldr	r3, [r7, #16]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e026      	b.n	8005b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005b46:	4b06      	ldr	r3, [pc, #24]	@ (8005b60 <HAL_RCC_OscConfig+0x4c4>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d1f0      	bne.n	8005b34 <HAL_RCC_OscConfig+0x498>
 8005b52:	e01e      	b.n	8005b92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d107      	bne.n	8005b6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e019      	b.n	8005b94 <HAL_RCC_OscConfig+0x4f8>
 8005b60:	40021000 	.word	0x40021000
 8005b64:	40007000 	.word	0x40007000
 8005b68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8005b9c <HAL_RCC_OscConfig+0x500>)
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a1b      	ldr	r3, [r3, #32]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d106      	bne.n	8005b8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d001      	beq.n	8005b92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e000      	b.n	8005b94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005b92:	2300      	movs	r3, #0
}
 8005b94:	4618      	mov	r0, r3
 8005b96:	3718      	adds	r7, #24
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	bd80      	pop	{r7, pc}
 8005b9c:	40021000 	.word	0x40021000

08005ba0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e0d0      	b.n	8005d56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bb4:	4b6a      	ldr	r3, [pc, #424]	@ (8005d60 <HAL_RCC_ClockConfig+0x1c0>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f003 0307 	and.w	r3, r3, #7
 8005bbc:	683a      	ldr	r2, [r7, #0]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d910      	bls.n	8005be4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc2:	4b67      	ldr	r3, [pc, #412]	@ (8005d60 <HAL_RCC_ClockConfig+0x1c0>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f023 0207 	bic.w	r2, r3, #7
 8005bca:	4965      	ldr	r1, [pc, #404]	@ (8005d60 <HAL_RCC_ClockConfig+0x1c0>)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bd2:	4b63      	ldr	r3, [pc, #396]	@ (8005d60 <HAL_RCC_ClockConfig+0x1c0>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	d001      	beq.n	8005be4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005be0:	2301      	movs	r3, #1
 8005be2:	e0b8      	b.n	8005d56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0302 	and.w	r3, r3, #2
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d020      	beq.n	8005c32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d005      	beq.n	8005c08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bfc:	4b59      	ldr	r3, [pc, #356]	@ (8005d64 <HAL_RCC_ClockConfig+0x1c4>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	4a58      	ldr	r2, [pc, #352]	@ (8005d64 <HAL_RCC_ClockConfig+0x1c4>)
 8005c02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005c06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0308 	and.w	r3, r3, #8
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d005      	beq.n	8005c20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005c14:	4b53      	ldr	r3, [pc, #332]	@ (8005d64 <HAL_RCC_ClockConfig+0x1c4>)
 8005c16:	685b      	ldr	r3, [r3, #4]
 8005c18:	4a52      	ldr	r2, [pc, #328]	@ (8005d64 <HAL_RCC_ClockConfig+0x1c4>)
 8005c1a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8005c1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c20:	4b50      	ldr	r3, [pc, #320]	@ (8005d64 <HAL_RCC_ClockConfig+0x1c4>)
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	494d      	ldr	r1, [pc, #308]	@ (8005d64 <HAL_RCC_ClockConfig+0x1c4>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d040      	beq.n	8005cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d107      	bne.n	8005c56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c46:	4b47      	ldr	r3, [pc, #284]	@ (8005d64 <HAL_RCC_ClockConfig+0x1c4>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d115      	bne.n	8005c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c52:	2301      	movs	r3, #1
 8005c54:	e07f      	b.n	8005d56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	2b02      	cmp	r3, #2
 8005c5c:	d107      	bne.n	8005c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c5e:	4b41      	ldr	r3, [pc, #260]	@ (8005d64 <HAL_RCC_ClockConfig+0x1c4>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d109      	bne.n	8005c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e073      	b.n	8005d56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005c6e:	4b3d      	ldr	r3, [pc, #244]	@ (8005d64 <HAL_RCC_ClockConfig+0x1c4>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0302 	and.w	r3, r3, #2
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d101      	bne.n	8005c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e06b      	b.n	8005d56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005c7e:	4b39      	ldr	r3, [pc, #228]	@ (8005d64 <HAL_RCC_ClockConfig+0x1c4>)
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f023 0203 	bic.w	r2, r3, #3
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	685b      	ldr	r3, [r3, #4]
 8005c8a:	4936      	ldr	r1, [pc, #216]	@ (8005d64 <HAL_RCC_ClockConfig+0x1c4>)
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005c90:	f7ff fa26 	bl	80050e0 <HAL_GetTick>
 8005c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c96:	e00a      	b.n	8005cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c98:	f7ff fa22 	bl	80050e0 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d901      	bls.n	8005cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005caa:	2303      	movs	r3, #3
 8005cac:	e053      	b.n	8005d56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cae:	4b2d      	ldr	r3, [pc, #180]	@ (8005d64 <HAL_RCC_ClockConfig+0x1c4>)
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	f003 020c 	and.w	r2, r3, #12
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d1eb      	bne.n	8005c98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cc0:	4b27      	ldr	r3, [pc, #156]	@ (8005d60 <HAL_RCC_ClockConfig+0x1c0>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d210      	bcs.n	8005cf0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cce:	4b24      	ldr	r3, [pc, #144]	@ (8005d60 <HAL_RCC_ClockConfig+0x1c0>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f023 0207 	bic.w	r2, r3, #7
 8005cd6:	4922      	ldr	r1, [pc, #136]	@ (8005d60 <HAL_RCC_ClockConfig+0x1c0>)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cde:	4b20      	ldr	r3, [pc, #128]	@ (8005d60 <HAL_RCC_ClockConfig+0x1c0>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f003 0307 	and.w	r3, r3, #7
 8005ce6:	683a      	ldr	r2, [r7, #0]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d001      	beq.n	8005cf0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e032      	b.n	8005d56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0304 	and.w	r3, r3, #4
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d008      	beq.n	8005d0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005cfc:	4b19      	ldr	r3, [pc, #100]	@ (8005d64 <HAL_RCC_ClockConfig+0x1c4>)
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	4916      	ldr	r1, [pc, #88]	@ (8005d64 <HAL_RCC_ClockConfig+0x1c4>)
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0308 	and.w	r3, r3, #8
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d009      	beq.n	8005d2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005d1a:	4b12      	ldr	r3, [pc, #72]	@ (8005d64 <HAL_RCC_ClockConfig+0x1c4>)
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	691b      	ldr	r3, [r3, #16]
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	490e      	ldr	r1, [pc, #56]	@ (8005d64 <HAL_RCC_ClockConfig+0x1c4>)
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005d2e:	f000 f821 	bl	8005d74 <HAL_RCC_GetSysClockFreq>
 8005d32:	4602      	mov	r2, r0
 8005d34:	4b0b      	ldr	r3, [pc, #44]	@ (8005d64 <HAL_RCC_ClockConfig+0x1c4>)
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	091b      	lsrs	r3, r3, #4
 8005d3a:	f003 030f 	and.w	r3, r3, #15
 8005d3e:	490a      	ldr	r1, [pc, #40]	@ (8005d68 <HAL_RCC_ClockConfig+0x1c8>)
 8005d40:	5ccb      	ldrb	r3, [r1, r3]
 8005d42:	fa22 f303 	lsr.w	r3, r2, r3
 8005d46:	4a09      	ldr	r2, [pc, #36]	@ (8005d6c <HAL_RCC_ClockConfig+0x1cc>)
 8005d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005d4a:	4b09      	ldr	r3, [pc, #36]	@ (8005d70 <HAL_RCC_ClockConfig+0x1d0>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7ff f984 	bl	800505c <HAL_InitTick>

  return HAL_OK;
 8005d54:	2300      	movs	r3, #0
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}
 8005d5e:	bf00      	nop
 8005d60:	40022000 	.word	0x40022000
 8005d64:	40021000 	.word	0x40021000
 8005d68:	0800907c 	.word	0x0800907c
 8005d6c:	20000000 	.word	0x20000000
 8005d70:	20000004 	.word	0x20000004

08005d74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60bb      	str	r3, [r7, #8]
 8005d82:	2300      	movs	r3, #0
 8005d84:	617b      	str	r3, [r7, #20]
 8005d86:	2300      	movs	r3, #0
 8005d88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8005d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0x94>)
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f003 030c 	and.w	r3, r3, #12
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d002      	beq.n	8005da4 <HAL_RCC_GetSysClockFreq+0x30>
 8005d9e:	2b08      	cmp	r3, #8
 8005da0:	d003      	beq.n	8005daa <HAL_RCC_GetSysClockFreq+0x36>
 8005da2:	e027      	b.n	8005df4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005da4:	4b19      	ldr	r3, [pc, #100]	@ (8005e0c <HAL_RCC_GetSysClockFreq+0x98>)
 8005da6:	613b      	str	r3, [r7, #16]
      break;
 8005da8:	e027      	b.n	8005dfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	0c9b      	lsrs	r3, r3, #18
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	4a17      	ldr	r2, [pc, #92]	@ (8005e10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005db4:	5cd3      	ldrb	r3, [r2, r3]
 8005db6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d010      	beq.n	8005de4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005dc2:	4b11      	ldr	r3, [pc, #68]	@ (8005e08 <HAL_RCC_GetSysClockFreq+0x94>)
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	0c5b      	lsrs	r3, r3, #17
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	4a11      	ldr	r2, [pc, #68]	@ (8005e14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8005dce:	5cd3      	ldrb	r3, [r2, r3]
 8005dd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8005e0c <HAL_RCC_GetSysClockFreq+0x98>)
 8005dd6:	fb03 f202 	mul.w	r2, r3, r2
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de0:	617b      	str	r3, [r7, #20]
 8005de2:	e004      	b.n	8005dee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	4a0c      	ldr	r2, [pc, #48]	@ (8005e18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005de8:	fb02 f303 	mul.w	r3, r2, r3
 8005dec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	613b      	str	r3, [r7, #16]
      break;
 8005df2:	e002      	b.n	8005dfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005df4:	4b05      	ldr	r3, [pc, #20]	@ (8005e0c <HAL_RCC_GetSysClockFreq+0x98>)
 8005df6:	613b      	str	r3, [r7, #16]
      break;
 8005df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005dfa:	693b      	ldr	r3, [r7, #16]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	371c      	adds	r7, #28
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bc80      	pop	{r7}
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	40021000 	.word	0x40021000
 8005e0c:	007a1200 	.word	0x007a1200
 8005e10:	08009094 	.word	0x08009094
 8005e14:	080090a4 	.word	0x080090a4
 8005e18:	003d0900 	.word	0x003d0900

08005e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e20:	4b02      	ldr	r3, [pc, #8]	@ (8005e2c <HAL_RCC_GetHCLKFreq+0x10>)
 8005e22:	681b      	ldr	r3, [r3, #0]
}
 8005e24:	4618      	mov	r0, r3
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bc80      	pop	{r7}
 8005e2a:	4770      	bx	lr
 8005e2c:	20000000 	.word	0x20000000

08005e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005e34:	f7ff fff2 	bl	8005e1c <HAL_RCC_GetHCLKFreq>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	4b05      	ldr	r3, [pc, #20]	@ (8005e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	0a1b      	lsrs	r3, r3, #8
 8005e40:	f003 0307 	and.w	r3, r3, #7
 8005e44:	4903      	ldr	r1, [pc, #12]	@ (8005e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005e46:	5ccb      	ldrb	r3, [r1, r3]
 8005e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	bd80      	pop	{r7, pc}
 8005e50:	40021000 	.word	0x40021000
 8005e54:	0800908c 	.word	0x0800908c

08005e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005e5c:	f7ff ffde 	bl	8005e1c <HAL_RCC_GetHCLKFreq>
 8005e60:	4602      	mov	r2, r0
 8005e62:	4b05      	ldr	r3, [pc, #20]	@ (8005e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	0adb      	lsrs	r3, r3, #11
 8005e68:	f003 0307 	and.w	r3, r3, #7
 8005e6c:	4903      	ldr	r1, [pc, #12]	@ (8005e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005e6e:	5ccb      	ldrb	r3, [r1, r3]
 8005e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	40021000 	.word	0x40021000
 8005e7c:	0800908c 	.word	0x0800908c

08005e80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b085      	sub	sp, #20
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005e88:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb4 <RCC_Delay+0x34>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8005eb8 <RCC_Delay+0x38>)
 8005e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e92:	0a5b      	lsrs	r3, r3, #9
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	fb02 f303 	mul.w	r3, r2, r3
 8005e9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005e9c:	bf00      	nop
  }
  while (Delay --);
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	1e5a      	subs	r2, r3, #1
 8005ea2:	60fa      	str	r2, [r7, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1f9      	bne.n	8005e9c <RCC_Delay+0x1c>
}
 8005ea8:	bf00      	nop
 8005eaa:	bf00      	nop
 8005eac:	3714      	adds	r7, #20
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bc80      	pop	{r7}
 8005eb2:	4770      	bx	lr
 8005eb4:	20000000 	.word	0x20000000
 8005eb8:	10624dd3 	.word	0x10624dd3

08005ebc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b082      	sub	sp, #8
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d101      	bne.n	8005ece <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e042      	b.n	8005f54 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d106      	bne.n	8005ee8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f7fe ff3e 	bl	8004d64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2224      	movs	r2, #36	@ 0x24
 8005eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005efe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f971 	bl	80061e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	691a      	ldr	r2, [r3, #16]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f14:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	695a      	ldr	r2, [r3, #20]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f24:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	68da      	ldr	r2, [r3, #12]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f34:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2220      	movs	r2, #32
 8005f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2220      	movs	r2, #32
 8005f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f52:	2300      	movs	r3, #0
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b08a      	sub	sp, #40	@ 0x28
 8005f60:	af02      	add	r7, sp, #8
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	603b      	str	r3, [r7, #0]
 8005f68:	4613      	mov	r3, r2
 8005f6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f76:	b2db      	uxtb	r3, r3
 8005f78:	2b20      	cmp	r3, #32
 8005f7a:	d175      	bne.n	8006068 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d002      	beq.n	8005f88 <HAL_UART_Transmit+0x2c>
 8005f82:	88fb      	ldrh	r3, [r7, #6]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e06e      	b.n	800606a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2221      	movs	r2, #33	@ 0x21
 8005f96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f9a:	f7ff f8a1 	bl	80050e0 <HAL_GetTick>
 8005f9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	88fa      	ldrh	r2, [r7, #6]
 8005fa4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	88fa      	ldrh	r2, [r7, #6]
 8005faa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fb4:	d108      	bne.n	8005fc8 <HAL_UART_Transmit+0x6c>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d104      	bne.n	8005fc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	61bb      	str	r3, [r7, #24]
 8005fc6:	e003      	b.n	8005fd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fd0:	e02e      	b.n	8006030 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	9300      	str	r3, [sp, #0]
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	2180      	movs	r1, #128	@ 0x80
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f000 f848 	bl	8006072 <UART_WaitOnFlagUntilTimeout>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d005      	beq.n	8005ff4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e03a      	b.n	800606a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10b      	bne.n	8006012 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	881b      	ldrh	r3, [r3, #0]
 8005ffe:	461a      	mov	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006008:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	3302      	adds	r3, #2
 800600e:	61bb      	str	r3, [r7, #24]
 8006010:	e007      	b.n	8006022 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	781a      	ldrb	r2, [r3, #0]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	3301      	adds	r3, #1
 8006020:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006026:	b29b      	uxth	r3, r3
 8006028:	3b01      	subs	r3, #1
 800602a:	b29a      	uxth	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006034:	b29b      	uxth	r3, r3
 8006036:	2b00      	cmp	r3, #0
 8006038:	d1cb      	bne.n	8005fd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2200      	movs	r2, #0
 8006042:	2140      	movs	r1, #64	@ 0x40
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f000 f814 	bl	8006072 <UART_WaitOnFlagUntilTimeout>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d005      	beq.n	800605c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006058:	2303      	movs	r3, #3
 800605a:	e006      	b.n	800606a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2220      	movs	r2, #32
 8006060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006064:	2300      	movs	r3, #0
 8006066:	e000      	b.n	800606a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006068:	2302      	movs	r3, #2
  }
}
 800606a:	4618      	mov	r0, r3
 800606c:	3720      	adds	r7, #32
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}

08006072 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006072:	b580      	push	{r7, lr}
 8006074:	b086      	sub	sp, #24
 8006076:	af00      	add	r7, sp, #0
 8006078:	60f8      	str	r0, [r7, #12]
 800607a:	60b9      	str	r1, [r7, #8]
 800607c:	603b      	str	r3, [r7, #0]
 800607e:	4613      	mov	r3, r2
 8006080:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006082:	e03b      	b.n	80060fc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800608a:	d037      	beq.n	80060fc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800608c:	f7ff f828 	bl	80050e0 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	6a3a      	ldr	r2, [r7, #32]
 8006098:	429a      	cmp	r2, r3
 800609a:	d302      	bcc.n	80060a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d101      	bne.n	80060a6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e03a      	b.n	800611c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68db      	ldr	r3, [r3, #12]
 80060ac:	f003 0304 	and.w	r3, r3, #4
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d023      	beq.n	80060fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	2b80      	cmp	r3, #128	@ 0x80
 80060b8:	d020      	beq.n	80060fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	2b40      	cmp	r3, #64	@ 0x40
 80060be:	d01d      	beq.n	80060fc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 0308 	and.w	r3, r3, #8
 80060ca:	2b08      	cmp	r3, #8
 80060cc:	d116      	bne.n	80060fc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80060ce:	2300      	movs	r3, #0
 80060d0:	617b      	str	r3, [r7, #20]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	617b      	str	r3, [r7, #20]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	685b      	ldr	r3, [r3, #4]
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 f81d 	bl	8006124 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2208      	movs	r2, #8
 80060ee:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e00f      	b.n	800611c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	4013      	ands	r3, r2
 8006106:	68ba      	ldr	r2, [r7, #8]
 8006108:	429a      	cmp	r2, r3
 800610a:	bf0c      	ite	eq
 800610c:	2301      	moveq	r3, #1
 800610e:	2300      	movne	r3, #0
 8006110:	b2db      	uxtb	r3, r3
 8006112:	461a      	mov	r2, r3
 8006114:	79fb      	ldrb	r3, [r7, #7]
 8006116:	429a      	cmp	r2, r3
 8006118:	d0b4      	beq.n	8006084 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3718      	adds	r7, #24
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006124:	b480      	push	{r7}
 8006126:	b095      	sub	sp, #84	@ 0x54
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	330c      	adds	r3, #12
 8006132:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006134:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006136:	e853 3f00 	ldrex	r3, [r3]
 800613a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800613c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006142:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	330c      	adds	r3, #12
 800614a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800614c:	643a      	str	r2, [r7, #64]	@ 0x40
 800614e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006150:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006152:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006154:	e841 2300 	strex	r3, r2, [r1]
 8006158:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800615a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800615c:	2b00      	cmp	r3, #0
 800615e:	d1e5      	bne.n	800612c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3314      	adds	r3, #20
 8006166:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	e853 3f00 	ldrex	r3, [r3]
 800616e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	f023 0301 	bic.w	r3, r3, #1
 8006176:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	3314      	adds	r3, #20
 800617e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006180:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006182:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006184:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006188:	e841 2300 	strex	r3, r2, [r1]
 800618c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800618e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006190:	2b00      	cmp	r3, #0
 8006192:	d1e5      	bne.n	8006160 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006198:	2b01      	cmp	r3, #1
 800619a:	d119      	bne.n	80061d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	330c      	adds	r3, #12
 80061a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	e853 3f00 	ldrex	r3, [r3]
 80061aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f023 0310 	bic.w	r3, r3, #16
 80061b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	330c      	adds	r3, #12
 80061ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061bc:	61ba      	str	r2, [r7, #24]
 80061be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061c0:	6979      	ldr	r1, [r7, #20]
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	e841 2300 	strex	r3, r2, [r1]
 80061c8:	613b      	str	r3, [r7, #16]
   return(result);
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1e5      	bne.n	800619c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2220      	movs	r2, #32
 80061d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80061de:	bf00      	nop
 80061e0:	3754      	adds	r7, #84	@ 0x54
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bc80      	pop	{r7}
 80061e6:	4770      	bx	lr

080061e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68da      	ldr	r2, [r3, #12]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	430a      	orrs	r2, r1
 8006204:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	689a      	ldr	r2, [r3, #8]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	691b      	ldr	r3, [r3, #16]
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	4313      	orrs	r3, r2
 8006216:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8006222:	f023 030c 	bic.w	r3, r3, #12
 8006226:	687a      	ldr	r2, [r7, #4]
 8006228:	6812      	ldr	r2, [r2, #0]
 800622a:	68b9      	ldr	r1, [r7, #8]
 800622c:	430b      	orrs	r3, r1
 800622e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699a      	ldr	r2, [r3, #24]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	4a2c      	ldr	r2, [pc, #176]	@ (80062fc <UART_SetConfig+0x114>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d103      	bne.n	8006258 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006250:	f7ff fe02 	bl	8005e58 <HAL_RCC_GetPCLK2Freq>
 8006254:	60f8      	str	r0, [r7, #12]
 8006256:	e002      	b.n	800625e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006258:	f7ff fdea 	bl	8005e30 <HAL_RCC_GetPCLK1Freq>
 800625c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	4613      	mov	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	4413      	add	r3, r2
 8006266:	009a      	lsls	r2, r3, #2
 8006268:	441a      	add	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	009b      	lsls	r3, r3, #2
 8006270:	fbb2 f3f3 	udiv	r3, r2, r3
 8006274:	4a22      	ldr	r2, [pc, #136]	@ (8006300 <UART_SetConfig+0x118>)
 8006276:	fba2 2303 	umull	r2, r3, r2, r3
 800627a:	095b      	lsrs	r3, r3, #5
 800627c:	0119      	lsls	r1, r3, #4
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	4613      	mov	r3, r2
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	4413      	add	r3, r2
 8006286:	009a      	lsls	r2, r3, #2
 8006288:	441a      	add	r2, r3
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	fbb2 f2f3 	udiv	r2, r2, r3
 8006294:	4b1a      	ldr	r3, [pc, #104]	@ (8006300 <UART_SetConfig+0x118>)
 8006296:	fba3 0302 	umull	r0, r3, r3, r2
 800629a:	095b      	lsrs	r3, r3, #5
 800629c:	2064      	movs	r0, #100	@ 0x64
 800629e:	fb00 f303 	mul.w	r3, r0, r3
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	011b      	lsls	r3, r3, #4
 80062a6:	3332      	adds	r3, #50	@ 0x32
 80062a8:	4a15      	ldr	r2, [pc, #84]	@ (8006300 <UART_SetConfig+0x118>)
 80062aa:	fba2 2303 	umull	r2, r3, r2, r3
 80062ae:	095b      	lsrs	r3, r3, #5
 80062b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062b4:	4419      	add	r1, r3
 80062b6:	68fa      	ldr	r2, [r7, #12]
 80062b8:	4613      	mov	r3, r2
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	4413      	add	r3, r2
 80062be:	009a      	lsls	r2, r3, #2
 80062c0:	441a      	add	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80062cc:	4b0c      	ldr	r3, [pc, #48]	@ (8006300 <UART_SetConfig+0x118>)
 80062ce:	fba3 0302 	umull	r0, r3, r3, r2
 80062d2:	095b      	lsrs	r3, r3, #5
 80062d4:	2064      	movs	r0, #100	@ 0x64
 80062d6:	fb00 f303 	mul.w	r3, r0, r3
 80062da:	1ad3      	subs	r3, r2, r3
 80062dc:	011b      	lsls	r3, r3, #4
 80062de:	3332      	adds	r3, #50	@ 0x32
 80062e0:	4a07      	ldr	r2, [pc, #28]	@ (8006300 <UART_SetConfig+0x118>)
 80062e2:	fba2 2303 	umull	r2, r3, r2, r3
 80062e6:	095b      	lsrs	r3, r3, #5
 80062e8:	f003 020f 	and.w	r2, r3, #15
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	440a      	add	r2, r1
 80062f2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80062f4:	bf00      	nop
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	40013800 	.word	0x40013800
 8006300:	51eb851f 	.word	0x51eb851f

08006304 <__cvt>:
 8006304:	2b00      	cmp	r3, #0
 8006306:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800630a:	461d      	mov	r5, r3
 800630c:	bfbb      	ittet	lt
 800630e:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006312:	461d      	movlt	r5, r3
 8006314:	2300      	movge	r3, #0
 8006316:	232d      	movlt	r3, #45	@ 0x2d
 8006318:	b088      	sub	sp, #32
 800631a:	4614      	mov	r4, r2
 800631c:	bfb8      	it	lt
 800631e:	4614      	movlt	r4, r2
 8006320:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006322:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006324:	7013      	strb	r3, [r2, #0]
 8006326:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006328:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800632c:	f023 0820 	bic.w	r8, r3, #32
 8006330:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006334:	d005      	beq.n	8006342 <__cvt+0x3e>
 8006336:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800633a:	d100      	bne.n	800633e <__cvt+0x3a>
 800633c:	3601      	adds	r6, #1
 800633e:	2302      	movs	r3, #2
 8006340:	e000      	b.n	8006344 <__cvt+0x40>
 8006342:	2303      	movs	r3, #3
 8006344:	aa07      	add	r2, sp, #28
 8006346:	9204      	str	r2, [sp, #16]
 8006348:	aa06      	add	r2, sp, #24
 800634a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800634e:	e9cd 3600 	strd	r3, r6, [sp]
 8006352:	4622      	mov	r2, r4
 8006354:	462b      	mov	r3, r5
 8006356:	f000 fe87 	bl	8007068 <_dtoa_r>
 800635a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800635e:	4607      	mov	r7, r0
 8006360:	d119      	bne.n	8006396 <__cvt+0x92>
 8006362:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006364:	07db      	lsls	r3, r3, #31
 8006366:	d50e      	bpl.n	8006386 <__cvt+0x82>
 8006368:	eb00 0906 	add.w	r9, r0, r6
 800636c:	2200      	movs	r2, #0
 800636e:	2300      	movs	r3, #0
 8006370:	4620      	mov	r0, r4
 8006372:	4629      	mov	r1, r5
 8006374:	f7fe fb18 	bl	80049a8 <__aeabi_dcmpeq>
 8006378:	b108      	cbz	r0, 800637e <__cvt+0x7a>
 800637a:	f8cd 901c 	str.w	r9, [sp, #28]
 800637e:	2230      	movs	r2, #48	@ 0x30
 8006380:	9b07      	ldr	r3, [sp, #28]
 8006382:	454b      	cmp	r3, r9
 8006384:	d31e      	bcc.n	80063c4 <__cvt+0xc0>
 8006386:	4638      	mov	r0, r7
 8006388:	9b07      	ldr	r3, [sp, #28]
 800638a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800638c:	1bdb      	subs	r3, r3, r7
 800638e:	6013      	str	r3, [r2, #0]
 8006390:	b008      	add	sp, #32
 8006392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006396:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800639a:	eb00 0906 	add.w	r9, r0, r6
 800639e:	d1e5      	bne.n	800636c <__cvt+0x68>
 80063a0:	7803      	ldrb	r3, [r0, #0]
 80063a2:	2b30      	cmp	r3, #48	@ 0x30
 80063a4:	d10a      	bne.n	80063bc <__cvt+0xb8>
 80063a6:	2200      	movs	r2, #0
 80063a8:	2300      	movs	r3, #0
 80063aa:	4620      	mov	r0, r4
 80063ac:	4629      	mov	r1, r5
 80063ae:	f7fe fafb 	bl	80049a8 <__aeabi_dcmpeq>
 80063b2:	b918      	cbnz	r0, 80063bc <__cvt+0xb8>
 80063b4:	f1c6 0601 	rsb	r6, r6, #1
 80063b8:	f8ca 6000 	str.w	r6, [sl]
 80063bc:	f8da 3000 	ldr.w	r3, [sl]
 80063c0:	4499      	add	r9, r3
 80063c2:	e7d3      	b.n	800636c <__cvt+0x68>
 80063c4:	1c59      	adds	r1, r3, #1
 80063c6:	9107      	str	r1, [sp, #28]
 80063c8:	701a      	strb	r2, [r3, #0]
 80063ca:	e7d9      	b.n	8006380 <__cvt+0x7c>

080063cc <__exponent>:
 80063cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063ce:	2900      	cmp	r1, #0
 80063d0:	bfb6      	itet	lt
 80063d2:	232d      	movlt	r3, #45	@ 0x2d
 80063d4:	232b      	movge	r3, #43	@ 0x2b
 80063d6:	4249      	neglt	r1, r1
 80063d8:	2909      	cmp	r1, #9
 80063da:	7002      	strb	r2, [r0, #0]
 80063dc:	7043      	strb	r3, [r0, #1]
 80063de:	dd29      	ble.n	8006434 <__exponent+0x68>
 80063e0:	f10d 0307 	add.w	r3, sp, #7
 80063e4:	461d      	mov	r5, r3
 80063e6:	270a      	movs	r7, #10
 80063e8:	fbb1 f6f7 	udiv	r6, r1, r7
 80063ec:	461a      	mov	r2, r3
 80063ee:	fb07 1416 	mls	r4, r7, r6, r1
 80063f2:	3430      	adds	r4, #48	@ 0x30
 80063f4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80063f8:	460c      	mov	r4, r1
 80063fa:	2c63      	cmp	r4, #99	@ 0x63
 80063fc:	4631      	mov	r1, r6
 80063fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8006402:	dcf1      	bgt.n	80063e8 <__exponent+0x1c>
 8006404:	3130      	adds	r1, #48	@ 0x30
 8006406:	1e94      	subs	r4, r2, #2
 8006408:	f803 1c01 	strb.w	r1, [r3, #-1]
 800640c:	4623      	mov	r3, r4
 800640e:	1c41      	adds	r1, r0, #1
 8006410:	42ab      	cmp	r3, r5
 8006412:	d30a      	bcc.n	800642a <__exponent+0x5e>
 8006414:	f10d 0309 	add.w	r3, sp, #9
 8006418:	1a9b      	subs	r3, r3, r2
 800641a:	42ac      	cmp	r4, r5
 800641c:	bf88      	it	hi
 800641e:	2300      	movhi	r3, #0
 8006420:	3302      	adds	r3, #2
 8006422:	4403      	add	r3, r0
 8006424:	1a18      	subs	r0, r3, r0
 8006426:	b003      	add	sp, #12
 8006428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800642a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800642e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006432:	e7ed      	b.n	8006410 <__exponent+0x44>
 8006434:	2330      	movs	r3, #48	@ 0x30
 8006436:	3130      	adds	r1, #48	@ 0x30
 8006438:	7083      	strb	r3, [r0, #2]
 800643a:	70c1      	strb	r1, [r0, #3]
 800643c:	1d03      	adds	r3, r0, #4
 800643e:	e7f1      	b.n	8006424 <__exponent+0x58>

08006440 <_printf_float>:
 8006440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006444:	b091      	sub	sp, #68	@ 0x44
 8006446:	460c      	mov	r4, r1
 8006448:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800644c:	4616      	mov	r6, r2
 800644e:	461f      	mov	r7, r3
 8006450:	4605      	mov	r5, r0
 8006452:	f000 fcfb 	bl	8006e4c <_localeconv_r>
 8006456:	6803      	ldr	r3, [r0, #0]
 8006458:	4618      	mov	r0, r3
 800645a:	9308      	str	r3, [sp, #32]
 800645c:	f7fd fe78 	bl	8004150 <strlen>
 8006460:	2300      	movs	r3, #0
 8006462:	930e      	str	r3, [sp, #56]	@ 0x38
 8006464:	f8d8 3000 	ldr.w	r3, [r8]
 8006468:	9009      	str	r0, [sp, #36]	@ 0x24
 800646a:	3307      	adds	r3, #7
 800646c:	f023 0307 	bic.w	r3, r3, #7
 8006470:	f103 0208 	add.w	r2, r3, #8
 8006474:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006478:	f8d4 b000 	ldr.w	fp, [r4]
 800647c:	f8c8 2000 	str.w	r2, [r8]
 8006480:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006484:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006488:	930b      	str	r3, [sp, #44]	@ 0x2c
 800648a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800648e:	f04f 32ff 	mov.w	r2, #4294967295
 8006492:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006496:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800649a:	4b9c      	ldr	r3, [pc, #624]	@ (800670c <_printf_float+0x2cc>)
 800649c:	f7fe fab6 	bl	8004a0c <__aeabi_dcmpun>
 80064a0:	bb70      	cbnz	r0, 8006500 <_printf_float+0xc0>
 80064a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80064a6:	f04f 32ff 	mov.w	r2, #4294967295
 80064aa:	4b98      	ldr	r3, [pc, #608]	@ (800670c <_printf_float+0x2cc>)
 80064ac:	f7fe fa90 	bl	80049d0 <__aeabi_dcmple>
 80064b0:	bb30      	cbnz	r0, 8006500 <_printf_float+0xc0>
 80064b2:	2200      	movs	r2, #0
 80064b4:	2300      	movs	r3, #0
 80064b6:	4640      	mov	r0, r8
 80064b8:	4649      	mov	r1, r9
 80064ba:	f7fe fa7f 	bl	80049bc <__aeabi_dcmplt>
 80064be:	b110      	cbz	r0, 80064c6 <_printf_float+0x86>
 80064c0:	232d      	movs	r3, #45	@ 0x2d
 80064c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064c6:	4a92      	ldr	r2, [pc, #584]	@ (8006710 <_printf_float+0x2d0>)
 80064c8:	4b92      	ldr	r3, [pc, #584]	@ (8006714 <_printf_float+0x2d4>)
 80064ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80064ce:	bf8c      	ite	hi
 80064d0:	4690      	movhi	r8, r2
 80064d2:	4698      	movls	r8, r3
 80064d4:	2303      	movs	r3, #3
 80064d6:	f04f 0900 	mov.w	r9, #0
 80064da:	6123      	str	r3, [r4, #16]
 80064dc:	f02b 0304 	bic.w	r3, fp, #4
 80064e0:	6023      	str	r3, [r4, #0]
 80064e2:	4633      	mov	r3, r6
 80064e4:	4621      	mov	r1, r4
 80064e6:	4628      	mov	r0, r5
 80064e8:	9700      	str	r7, [sp, #0]
 80064ea:	aa0f      	add	r2, sp, #60	@ 0x3c
 80064ec:	f000 f9d4 	bl	8006898 <_printf_common>
 80064f0:	3001      	adds	r0, #1
 80064f2:	f040 8090 	bne.w	8006616 <_printf_float+0x1d6>
 80064f6:	f04f 30ff 	mov.w	r0, #4294967295
 80064fa:	b011      	add	sp, #68	@ 0x44
 80064fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006500:	4642      	mov	r2, r8
 8006502:	464b      	mov	r3, r9
 8006504:	4640      	mov	r0, r8
 8006506:	4649      	mov	r1, r9
 8006508:	f7fe fa80 	bl	8004a0c <__aeabi_dcmpun>
 800650c:	b148      	cbz	r0, 8006522 <_printf_float+0xe2>
 800650e:	464b      	mov	r3, r9
 8006510:	2b00      	cmp	r3, #0
 8006512:	bfb8      	it	lt
 8006514:	232d      	movlt	r3, #45	@ 0x2d
 8006516:	4a80      	ldr	r2, [pc, #512]	@ (8006718 <_printf_float+0x2d8>)
 8006518:	bfb8      	it	lt
 800651a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800651e:	4b7f      	ldr	r3, [pc, #508]	@ (800671c <_printf_float+0x2dc>)
 8006520:	e7d3      	b.n	80064ca <_printf_float+0x8a>
 8006522:	6863      	ldr	r3, [r4, #4]
 8006524:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	d13f      	bne.n	80065ac <_printf_float+0x16c>
 800652c:	2306      	movs	r3, #6
 800652e:	6063      	str	r3, [r4, #4]
 8006530:	2200      	movs	r2, #0
 8006532:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006536:	6023      	str	r3, [r4, #0]
 8006538:	9206      	str	r2, [sp, #24]
 800653a:	aa0e      	add	r2, sp, #56	@ 0x38
 800653c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006540:	aa0d      	add	r2, sp, #52	@ 0x34
 8006542:	9203      	str	r2, [sp, #12]
 8006544:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006548:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800654c:	6863      	ldr	r3, [r4, #4]
 800654e:	4642      	mov	r2, r8
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	4628      	mov	r0, r5
 8006554:	464b      	mov	r3, r9
 8006556:	910a      	str	r1, [sp, #40]	@ 0x28
 8006558:	f7ff fed4 	bl	8006304 <__cvt>
 800655c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800655e:	4680      	mov	r8, r0
 8006560:	2947      	cmp	r1, #71	@ 0x47
 8006562:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006564:	d128      	bne.n	80065b8 <_printf_float+0x178>
 8006566:	1cc8      	adds	r0, r1, #3
 8006568:	db02      	blt.n	8006570 <_printf_float+0x130>
 800656a:	6863      	ldr	r3, [r4, #4]
 800656c:	4299      	cmp	r1, r3
 800656e:	dd40      	ble.n	80065f2 <_printf_float+0x1b2>
 8006570:	f1aa 0a02 	sub.w	sl, sl, #2
 8006574:	fa5f fa8a 	uxtb.w	sl, sl
 8006578:	4652      	mov	r2, sl
 800657a:	3901      	subs	r1, #1
 800657c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006580:	910d      	str	r1, [sp, #52]	@ 0x34
 8006582:	f7ff ff23 	bl	80063cc <__exponent>
 8006586:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006588:	4681      	mov	r9, r0
 800658a:	1813      	adds	r3, r2, r0
 800658c:	2a01      	cmp	r2, #1
 800658e:	6123      	str	r3, [r4, #16]
 8006590:	dc02      	bgt.n	8006598 <_printf_float+0x158>
 8006592:	6822      	ldr	r2, [r4, #0]
 8006594:	07d2      	lsls	r2, r2, #31
 8006596:	d501      	bpl.n	800659c <_printf_float+0x15c>
 8006598:	3301      	adds	r3, #1
 800659a:	6123      	str	r3, [r4, #16]
 800659c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d09e      	beq.n	80064e2 <_printf_float+0xa2>
 80065a4:	232d      	movs	r3, #45	@ 0x2d
 80065a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80065aa:	e79a      	b.n	80064e2 <_printf_float+0xa2>
 80065ac:	2947      	cmp	r1, #71	@ 0x47
 80065ae:	d1bf      	bne.n	8006530 <_printf_float+0xf0>
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1bd      	bne.n	8006530 <_printf_float+0xf0>
 80065b4:	2301      	movs	r3, #1
 80065b6:	e7ba      	b.n	800652e <_printf_float+0xee>
 80065b8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80065bc:	d9dc      	bls.n	8006578 <_printf_float+0x138>
 80065be:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80065c2:	d118      	bne.n	80065f6 <_printf_float+0x1b6>
 80065c4:	2900      	cmp	r1, #0
 80065c6:	6863      	ldr	r3, [r4, #4]
 80065c8:	dd0b      	ble.n	80065e2 <_printf_float+0x1a2>
 80065ca:	6121      	str	r1, [r4, #16]
 80065cc:	b913      	cbnz	r3, 80065d4 <_printf_float+0x194>
 80065ce:	6822      	ldr	r2, [r4, #0]
 80065d0:	07d0      	lsls	r0, r2, #31
 80065d2:	d502      	bpl.n	80065da <_printf_float+0x19a>
 80065d4:	3301      	adds	r3, #1
 80065d6:	440b      	add	r3, r1
 80065d8:	6123      	str	r3, [r4, #16]
 80065da:	f04f 0900 	mov.w	r9, #0
 80065de:	65a1      	str	r1, [r4, #88]	@ 0x58
 80065e0:	e7dc      	b.n	800659c <_printf_float+0x15c>
 80065e2:	b913      	cbnz	r3, 80065ea <_printf_float+0x1aa>
 80065e4:	6822      	ldr	r2, [r4, #0]
 80065e6:	07d2      	lsls	r2, r2, #31
 80065e8:	d501      	bpl.n	80065ee <_printf_float+0x1ae>
 80065ea:	3302      	adds	r3, #2
 80065ec:	e7f4      	b.n	80065d8 <_printf_float+0x198>
 80065ee:	2301      	movs	r3, #1
 80065f0:	e7f2      	b.n	80065d8 <_printf_float+0x198>
 80065f2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80065f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065f8:	4299      	cmp	r1, r3
 80065fa:	db05      	blt.n	8006608 <_printf_float+0x1c8>
 80065fc:	6823      	ldr	r3, [r4, #0]
 80065fe:	6121      	str	r1, [r4, #16]
 8006600:	07d8      	lsls	r0, r3, #31
 8006602:	d5ea      	bpl.n	80065da <_printf_float+0x19a>
 8006604:	1c4b      	adds	r3, r1, #1
 8006606:	e7e7      	b.n	80065d8 <_printf_float+0x198>
 8006608:	2900      	cmp	r1, #0
 800660a:	bfcc      	ite	gt
 800660c:	2201      	movgt	r2, #1
 800660e:	f1c1 0202 	rsble	r2, r1, #2
 8006612:	4413      	add	r3, r2
 8006614:	e7e0      	b.n	80065d8 <_printf_float+0x198>
 8006616:	6823      	ldr	r3, [r4, #0]
 8006618:	055a      	lsls	r2, r3, #21
 800661a:	d407      	bmi.n	800662c <_printf_float+0x1ec>
 800661c:	6923      	ldr	r3, [r4, #16]
 800661e:	4642      	mov	r2, r8
 8006620:	4631      	mov	r1, r6
 8006622:	4628      	mov	r0, r5
 8006624:	47b8      	blx	r7
 8006626:	3001      	adds	r0, #1
 8006628:	d12b      	bne.n	8006682 <_printf_float+0x242>
 800662a:	e764      	b.n	80064f6 <_printf_float+0xb6>
 800662c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006630:	f240 80dc 	bls.w	80067ec <_printf_float+0x3ac>
 8006634:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006638:	2200      	movs	r2, #0
 800663a:	2300      	movs	r3, #0
 800663c:	f7fe f9b4 	bl	80049a8 <__aeabi_dcmpeq>
 8006640:	2800      	cmp	r0, #0
 8006642:	d033      	beq.n	80066ac <_printf_float+0x26c>
 8006644:	2301      	movs	r3, #1
 8006646:	4631      	mov	r1, r6
 8006648:	4628      	mov	r0, r5
 800664a:	4a35      	ldr	r2, [pc, #212]	@ (8006720 <_printf_float+0x2e0>)
 800664c:	47b8      	blx	r7
 800664e:	3001      	adds	r0, #1
 8006650:	f43f af51 	beq.w	80064f6 <_printf_float+0xb6>
 8006654:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006658:	4543      	cmp	r3, r8
 800665a:	db02      	blt.n	8006662 <_printf_float+0x222>
 800665c:	6823      	ldr	r3, [r4, #0]
 800665e:	07d8      	lsls	r0, r3, #31
 8006660:	d50f      	bpl.n	8006682 <_printf_float+0x242>
 8006662:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006666:	4631      	mov	r1, r6
 8006668:	4628      	mov	r0, r5
 800666a:	47b8      	blx	r7
 800666c:	3001      	adds	r0, #1
 800666e:	f43f af42 	beq.w	80064f6 <_printf_float+0xb6>
 8006672:	f04f 0900 	mov.w	r9, #0
 8006676:	f108 38ff 	add.w	r8, r8, #4294967295
 800667a:	f104 0a1a 	add.w	sl, r4, #26
 800667e:	45c8      	cmp	r8, r9
 8006680:	dc09      	bgt.n	8006696 <_printf_float+0x256>
 8006682:	6823      	ldr	r3, [r4, #0]
 8006684:	079b      	lsls	r3, r3, #30
 8006686:	f100 8102 	bmi.w	800688e <_printf_float+0x44e>
 800668a:	68e0      	ldr	r0, [r4, #12]
 800668c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800668e:	4298      	cmp	r0, r3
 8006690:	bfb8      	it	lt
 8006692:	4618      	movlt	r0, r3
 8006694:	e731      	b.n	80064fa <_printf_float+0xba>
 8006696:	2301      	movs	r3, #1
 8006698:	4652      	mov	r2, sl
 800669a:	4631      	mov	r1, r6
 800669c:	4628      	mov	r0, r5
 800669e:	47b8      	blx	r7
 80066a0:	3001      	adds	r0, #1
 80066a2:	f43f af28 	beq.w	80064f6 <_printf_float+0xb6>
 80066a6:	f109 0901 	add.w	r9, r9, #1
 80066aa:	e7e8      	b.n	800667e <_printf_float+0x23e>
 80066ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	dc38      	bgt.n	8006724 <_printf_float+0x2e4>
 80066b2:	2301      	movs	r3, #1
 80066b4:	4631      	mov	r1, r6
 80066b6:	4628      	mov	r0, r5
 80066b8:	4a19      	ldr	r2, [pc, #100]	@ (8006720 <_printf_float+0x2e0>)
 80066ba:	47b8      	blx	r7
 80066bc:	3001      	adds	r0, #1
 80066be:	f43f af1a 	beq.w	80064f6 <_printf_float+0xb6>
 80066c2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80066c6:	ea59 0303 	orrs.w	r3, r9, r3
 80066ca:	d102      	bne.n	80066d2 <_printf_float+0x292>
 80066cc:	6823      	ldr	r3, [r4, #0]
 80066ce:	07d9      	lsls	r1, r3, #31
 80066d0:	d5d7      	bpl.n	8006682 <_printf_float+0x242>
 80066d2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80066d6:	4631      	mov	r1, r6
 80066d8:	4628      	mov	r0, r5
 80066da:	47b8      	blx	r7
 80066dc:	3001      	adds	r0, #1
 80066de:	f43f af0a 	beq.w	80064f6 <_printf_float+0xb6>
 80066e2:	f04f 0a00 	mov.w	sl, #0
 80066e6:	f104 0b1a 	add.w	fp, r4, #26
 80066ea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80066ec:	425b      	negs	r3, r3
 80066ee:	4553      	cmp	r3, sl
 80066f0:	dc01      	bgt.n	80066f6 <_printf_float+0x2b6>
 80066f2:	464b      	mov	r3, r9
 80066f4:	e793      	b.n	800661e <_printf_float+0x1de>
 80066f6:	2301      	movs	r3, #1
 80066f8:	465a      	mov	r2, fp
 80066fa:	4631      	mov	r1, r6
 80066fc:	4628      	mov	r0, r5
 80066fe:	47b8      	blx	r7
 8006700:	3001      	adds	r0, #1
 8006702:	f43f aef8 	beq.w	80064f6 <_printf_float+0xb6>
 8006706:	f10a 0a01 	add.w	sl, sl, #1
 800670a:	e7ee      	b.n	80066ea <_printf_float+0x2aa>
 800670c:	7fefffff 	.word	0x7fefffff
 8006710:	080090aa 	.word	0x080090aa
 8006714:	080090a6 	.word	0x080090a6
 8006718:	080090b2 	.word	0x080090b2
 800671c:	080090ae 	.word	0x080090ae
 8006720:	080090b6 	.word	0x080090b6
 8006724:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006726:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800672a:	4553      	cmp	r3, sl
 800672c:	bfa8      	it	ge
 800672e:	4653      	movge	r3, sl
 8006730:	2b00      	cmp	r3, #0
 8006732:	4699      	mov	r9, r3
 8006734:	dc36      	bgt.n	80067a4 <_printf_float+0x364>
 8006736:	f04f 0b00 	mov.w	fp, #0
 800673a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800673e:	f104 021a 	add.w	r2, r4, #26
 8006742:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006744:	930a      	str	r3, [sp, #40]	@ 0x28
 8006746:	eba3 0309 	sub.w	r3, r3, r9
 800674a:	455b      	cmp	r3, fp
 800674c:	dc31      	bgt.n	80067b2 <_printf_float+0x372>
 800674e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006750:	459a      	cmp	sl, r3
 8006752:	dc3a      	bgt.n	80067ca <_printf_float+0x38a>
 8006754:	6823      	ldr	r3, [r4, #0]
 8006756:	07da      	lsls	r2, r3, #31
 8006758:	d437      	bmi.n	80067ca <_printf_float+0x38a>
 800675a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800675c:	ebaa 0903 	sub.w	r9, sl, r3
 8006760:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006762:	ebaa 0303 	sub.w	r3, sl, r3
 8006766:	4599      	cmp	r9, r3
 8006768:	bfa8      	it	ge
 800676a:	4699      	movge	r9, r3
 800676c:	f1b9 0f00 	cmp.w	r9, #0
 8006770:	dc33      	bgt.n	80067da <_printf_float+0x39a>
 8006772:	f04f 0800 	mov.w	r8, #0
 8006776:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800677a:	f104 0b1a 	add.w	fp, r4, #26
 800677e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006780:	ebaa 0303 	sub.w	r3, sl, r3
 8006784:	eba3 0309 	sub.w	r3, r3, r9
 8006788:	4543      	cmp	r3, r8
 800678a:	f77f af7a 	ble.w	8006682 <_printf_float+0x242>
 800678e:	2301      	movs	r3, #1
 8006790:	465a      	mov	r2, fp
 8006792:	4631      	mov	r1, r6
 8006794:	4628      	mov	r0, r5
 8006796:	47b8      	blx	r7
 8006798:	3001      	adds	r0, #1
 800679a:	f43f aeac 	beq.w	80064f6 <_printf_float+0xb6>
 800679e:	f108 0801 	add.w	r8, r8, #1
 80067a2:	e7ec      	b.n	800677e <_printf_float+0x33e>
 80067a4:	4642      	mov	r2, r8
 80067a6:	4631      	mov	r1, r6
 80067a8:	4628      	mov	r0, r5
 80067aa:	47b8      	blx	r7
 80067ac:	3001      	adds	r0, #1
 80067ae:	d1c2      	bne.n	8006736 <_printf_float+0x2f6>
 80067b0:	e6a1      	b.n	80064f6 <_printf_float+0xb6>
 80067b2:	2301      	movs	r3, #1
 80067b4:	4631      	mov	r1, r6
 80067b6:	4628      	mov	r0, r5
 80067b8:	920a      	str	r2, [sp, #40]	@ 0x28
 80067ba:	47b8      	blx	r7
 80067bc:	3001      	adds	r0, #1
 80067be:	f43f ae9a 	beq.w	80064f6 <_printf_float+0xb6>
 80067c2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067c4:	f10b 0b01 	add.w	fp, fp, #1
 80067c8:	e7bb      	b.n	8006742 <_printf_float+0x302>
 80067ca:	4631      	mov	r1, r6
 80067cc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80067d0:	4628      	mov	r0, r5
 80067d2:	47b8      	blx	r7
 80067d4:	3001      	adds	r0, #1
 80067d6:	d1c0      	bne.n	800675a <_printf_float+0x31a>
 80067d8:	e68d      	b.n	80064f6 <_printf_float+0xb6>
 80067da:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067dc:	464b      	mov	r3, r9
 80067de:	4631      	mov	r1, r6
 80067e0:	4628      	mov	r0, r5
 80067e2:	4442      	add	r2, r8
 80067e4:	47b8      	blx	r7
 80067e6:	3001      	adds	r0, #1
 80067e8:	d1c3      	bne.n	8006772 <_printf_float+0x332>
 80067ea:	e684      	b.n	80064f6 <_printf_float+0xb6>
 80067ec:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80067f0:	f1ba 0f01 	cmp.w	sl, #1
 80067f4:	dc01      	bgt.n	80067fa <_printf_float+0x3ba>
 80067f6:	07db      	lsls	r3, r3, #31
 80067f8:	d536      	bpl.n	8006868 <_printf_float+0x428>
 80067fa:	2301      	movs	r3, #1
 80067fc:	4642      	mov	r2, r8
 80067fe:	4631      	mov	r1, r6
 8006800:	4628      	mov	r0, r5
 8006802:	47b8      	blx	r7
 8006804:	3001      	adds	r0, #1
 8006806:	f43f ae76 	beq.w	80064f6 <_printf_float+0xb6>
 800680a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800680e:	4631      	mov	r1, r6
 8006810:	4628      	mov	r0, r5
 8006812:	47b8      	blx	r7
 8006814:	3001      	adds	r0, #1
 8006816:	f43f ae6e 	beq.w	80064f6 <_printf_float+0xb6>
 800681a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800681e:	2200      	movs	r2, #0
 8006820:	2300      	movs	r3, #0
 8006822:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006826:	f7fe f8bf 	bl	80049a8 <__aeabi_dcmpeq>
 800682a:	b9c0      	cbnz	r0, 800685e <_printf_float+0x41e>
 800682c:	4653      	mov	r3, sl
 800682e:	f108 0201 	add.w	r2, r8, #1
 8006832:	4631      	mov	r1, r6
 8006834:	4628      	mov	r0, r5
 8006836:	47b8      	blx	r7
 8006838:	3001      	adds	r0, #1
 800683a:	d10c      	bne.n	8006856 <_printf_float+0x416>
 800683c:	e65b      	b.n	80064f6 <_printf_float+0xb6>
 800683e:	2301      	movs	r3, #1
 8006840:	465a      	mov	r2, fp
 8006842:	4631      	mov	r1, r6
 8006844:	4628      	mov	r0, r5
 8006846:	47b8      	blx	r7
 8006848:	3001      	adds	r0, #1
 800684a:	f43f ae54 	beq.w	80064f6 <_printf_float+0xb6>
 800684e:	f108 0801 	add.w	r8, r8, #1
 8006852:	45d0      	cmp	r8, sl
 8006854:	dbf3      	blt.n	800683e <_printf_float+0x3fe>
 8006856:	464b      	mov	r3, r9
 8006858:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800685c:	e6e0      	b.n	8006620 <_printf_float+0x1e0>
 800685e:	f04f 0800 	mov.w	r8, #0
 8006862:	f104 0b1a 	add.w	fp, r4, #26
 8006866:	e7f4      	b.n	8006852 <_printf_float+0x412>
 8006868:	2301      	movs	r3, #1
 800686a:	4642      	mov	r2, r8
 800686c:	e7e1      	b.n	8006832 <_printf_float+0x3f2>
 800686e:	2301      	movs	r3, #1
 8006870:	464a      	mov	r2, r9
 8006872:	4631      	mov	r1, r6
 8006874:	4628      	mov	r0, r5
 8006876:	47b8      	blx	r7
 8006878:	3001      	adds	r0, #1
 800687a:	f43f ae3c 	beq.w	80064f6 <_printf_float+0xb6>
 800687e:	f108 0801 	add.w	r8, r8, #1
 8006882:	68e3      	ldr	r3, [r4, #12]
 8006884:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006886:	1a5b      	subs	r3, r3, r1
 8006888:	4543      	cmp	r3, r8
 800688a:	dcf0      	bgt.n	800686e <_printf_float+0x42e>
 800688c:	e6fd      	b.n	800668a <_printf_float+0x24a>
 800688e:	f04f 0800 	mov.w	r8, #0
 8006892:	f104 0919 	add.w	r9, r4, #25
 8006896:	e7f4      	b.n	8006882 <_printf_float+0x442>

08006898 <_printf_common>:
 8006898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800689c:	4616      	mov	r6, r2
 800689e:	4698      	mov	r8, r3
 80068a0:	688a      	ldr	r2, [r1, #8]
 80068a2:	690b      	ldr	r3, [r1, #16]
 80068a4:	4607      	mov	r7, r0
 80068a6:	4293      	cmp	r3, r2
 80068a8:	bfb8      	it	lt
 80068aa:	4613      	movlt	r3, r2
 80068ac:	6033      	str	r3, [r6, #0]
 80068ae:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068b2:	460c      	mov	r4, r1
 80068b4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068b8:	b10a      	cbz	r2, 80068be <_printf_common+0x26>
 80068ba:	3301      	adds	r3, #1
 80068bc:	6033      	str	r3, [r6, #0]
 80068be:	6823      	ldr	r3, [r4, #0]
 80068c0:	0699      	lsls	r1, r3, #26
 80068c2:	bf42      	ittt	mi
 80068c4:	6833      	ldrmi	r3, [r6, #0]
 80068c6:	3302      	addmi	r3, #2
 80068c8:	6033      	strmi	r3, [r6, #0]
 80068ca:	6825      	ldr	r5, [r4, #0]
 80068cc:	f015 0506 	ands.w	r5, r5, #6
 80068d0:	d106      	bne.n	80068e0 <_printf_common+0x48>
 80068d2:	f104 0a19 	add.w	sl, r4, #25
 80068d6:	68e3      	ldr	r3, [r4, #12]
 80068d8:	6832      	ldr	r2, [r6, #0]
 80068da:	1a9b      	subs	r3, r3, r2
 80068dc:	42ab      	cmp	r3, r5
 80068de:	dc2b      	bgt.n	8006938 <_printf_common+0xa0>
 80068e0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068e4:	6822      	ldr	r2, [r4, #0]
 80068e6:	3b00      	subs	r3, #0
 80068e8:	bf18      	it	ne
 80068ea:	2301      	movne	r3, #1
 80068ec:	0692      	lsls	r2, r2, #26
 80068ee:	d430      	bmi.n	8006952 <_printf_common+0xba>
 80068f0:	4641      	mov	r1, r8
 80068f2:	4638      	mov	r0, r7
 80068f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068f8:	47c8      	blx	r9
 80068fa:	3001      	adds	r0, #1
 80068fc:	d023      	beq.n	8006946 <_printf_common+0xae>
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	6922      	ldr	r2, [r4, #16]
 8006902:	f003 0306 	and.w	r3, r3, #6
 8006906:	2b04      	cmp	r3, #4
 8006908:	bf14      	ite	ne
 800690a:	2500      	movne	r5, #0
 800690c:	6833      	ldreq	r3, [r6, #0]
 800690e:	f04f 0600 	mov.w	r6, #0
 8006912:	bf08      	it	eq
 8006914:	68e5      	ldreq	r5, [r4, #12]
 8006916:	f104 041a 	add.w	r4, r4, #26
 800691a:	bf08      	it	eq
 800691c:	1aed      	subeq	r5, r5, r3
 800691e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006922:	bf08      	it	eq
 8006924:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006928:	4293      	cmp	r3, r2
 800692a:	bfc4      	itt	gt
 800692c:	1a9b      	subgt	r3, r3, r2
 800692e:	18ed      	addgt	r5, r5, r3
 8006930:	42b5      	cmp	r5, r6
 8006932:	d11a      	bne.n	800696a <_printf_common+0xd2>
 8006934:	2000      	movs	r0, #0
 8006936:	e008      	b.n	800694a <_printf_common+0xb2>
 8006938:	2301      	movs	r3, #1
 800693a:	4652      	mov	r2, sl
 800693c:	4641      	mov	r1, r8
 800693e:	4638      	mov	r0, r7
 8006940:	47c8      	blx	r9
 8006942:	3001      	adds	r0, #1
 8006944:	d103      	bne.n	800694e <_printf_common+0xb6>
 8006946:	f04f 30ff 	mov.w	r0, #4294967295
 800694a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694e:	3501      	adds	r5, #1
 8006950:	e7c1      	b.n	80068d6 <_printf_common+0x3e>
 8006952:	2030      	movs	r0, #48	@ 0x30
 8006954:	18e1      	adds	r1, r4, r3
 8006956:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800695a:	1c5a      	adds	r2, r3, #1
 800695c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006960:	4422      	add	r2, r4
 8006962:	3302      	adds	r3, #2
 8006964:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006968:	e7c2      	b.n	80068f0 <_printf_common+0x58>
 800696a:	2301      	movs	r3, #1
 800696c:	4622      	mov	r2, r4
 800696e:	4641      	mov	r1, r8
 8006970:	4638      	mov	r0, r7
 8006972:	47c8      	blx	r9
 8006974:	3001      	adds	r0, #1
 8006976:	d0e6      	beq.n	8006946 <_printf_common+0xae>
 8006978:	3601      	adds	r6, #1
 800697a:	e7d9      	b.n	8006930 <_printf_common+0x98>

0800697c <_printf_i>:
 800697c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006980:	7e0f      	ldrb	r7, [r1, #24]
 8006982:	4691      	mov	r9, r2
 8006984:	2f78      	cmp	r7, #120	@ 0x78
 8006986:	4680      	mov	r8, r0
 8006988:	460c      	mov	r4, r1
 800698a:	469a      	mov	sl, r3
 800698c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800698e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006992:	d807      	bhi.n	80069a4 <_printf_i+0x28>
 8006994:	2f62      	cmp	r7, #98	@ 0x62
 8006996:	d80a      	bhi.n	80069ae <_printf_i+0x32>
 8006998:	2f00      	cmp	r7, #0
 800699a:	f000 80d1 	beq.w	8006b40 <_printf_i+0x1c4>
 800699e:	2f58      	cmp	r7, #88	@ 0x58
 80069a0:	f000 80b8 	beq.w	8006b14 <_printf_i+0x198>
 80069a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80069ac:	e03a      	b.n	8006a24 <_printf_i+0xa8>
 80069ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80069b2:	2b15      	cmp	r3, #21
 80069b4:	d8f6      	bhi.n	80069a4 <_printf_i+0x28>
 80069b6:	a101      	add	r1, pc, #4	@ (adr r1, 80069bc <_printf_i+0x40>)
 80069b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069bc:	08006a15 	.word	0x08006a15
 80069c0:	08006a29 	.word	0x08006a29
 80069c4:	080069a5 	.word	0x080069a5
 80069c8:	080069a5 	.word	0x080069a5
 80069cc:	080069a5 	.word	0x080069a5
 80069d0:	080069a5 	.word	0x080069a5
 80069d4:	08006a29 	.word	0x08006a29
 80069d8:	080069a5 	.word	0x080069a5
 80069dc:	080069a5 	.word	0x080069a5
 80069e0:	080069a5 	.word	0x080069a5
 80069e4:	080069a5 	.word	0x080069a5
 80069e8:	08006b27 	.word	0x08006b27
 80069ec:	08006a53 	.word	0x08006a53
 80069f0:	08006ae1 	.word	0x08006ae1
 80069f4:	080069a5 	.word	0x080069a5
 80069f8:	080069a5 	.word	0x080069a5
 80069fc:	08006b49 	.word	0x08006b49
 8006a00:	080069a5 	.word	0x080069a5
 8006a04:	08006a53 	.word	0x08006a53
 8006a08:	080069a5 	.word	0x080069a5
 8006a0c:	080069a5 	.word	0x080069a5
 8006a10:	08006ae9 	.word	0x08006ae9
 8006a14:	6833      	ldr	r3, [r6, #0]
 8006a16:	1d1a      	adds	r2, r3, #4
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	6032      	str	r2, [r6, #0]
 8006a1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a24:	2301      	movs	r3, #1
 8006a26:	e09c      	b.n	8006b62 <_printf_i+0x1e6>
 8006a28:	6833      	ldr	r3, [r6, #0]
 8006a2a:	6820      	ldr	r0, [r4, #0]
 8006a2c:	1d19      	adds	r1, r3, #4
 8006a2e:	6031      	str	r1, [r6, #0]
 8006a30:	0606      	lsls	r6, r0, #24
 8006a32:	d501      	bpl.n	8006a38 <_printf_i+0xbc>
 8006a34:	681d      	ldr	r5, [r3, #0]
 8006a36:	e003      	b.n	8006a40 <_printf_i+0xc4>
 8006a38:	0645      	lsls	r5, r0, #25
 8006a3a:	d5fb      	bpl.n	8006a34 <_printf_i+0xb8>
 8006a3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a40:	2d00      	cmp	r5, #0
 8006a42:	da03      	bge.n	8006a4c <_printf_i+0xd0>
 8006a44:	232d      	movs	r3, #45	@ 0x2d
 8006a46:	426d      	negs	r5, r5
 8006a48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a4c:	230a      	movs	r3, #10
 8006a4e:	4858      	ldr	r0, [pc, #352]	@ (8006bb0 <_printf_i+0x234>)
 8006a50:	e011      	b.n	8006a76 <_printf_i+0xfa>
 8006a52:	6821      	ldr	r1, [r4, #0]
 8006a54:	6833      	ldr	r3, [r6, #0]
 8006a56:	0608      	lsls	r0, r1, #24
 8006a58:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a5c:	d402      	bmi.n	8006a64 <_printf_i+0xe8>
 8006a5e:	0649      	lsls	r1, r1, #25
 8006a60:	bf48      	it	mi
 8006a62:	b2ad      	uxthmi	r5, r5
 8006a64:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a66:	6033      	str	r3, [r6, #0]
 8006a68:	bf14      	ite	ne
 8006a6a:	230a      	movne	r3, #10
 8006a6c:	2308      	moveq	r3, #8
 8006a6e:	4850      	ldr	r0, [pc, #320]	@ (8006bb0 <_printf_i+0x234>)
 8006a70:	2100      	movs	r1, #0
 8006a72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a76:	6866      	ldr	r6, [r4, #4]
 8006a78:	2e00      	cmp	r6, #0
 8006a7a:	60a6      	str	r6, [r4, #8]
 8006a7c:	db05      	blt.n	8006a8a <_printf_i+0x10e>
 8006a7e:	6821      	ldr	r1, [r4, #0]
 8006a80:	432e      	orrs	r6, r5
 8006a82:	f021 0104 	bic.w	r1, r1, #4
 8006a86:	6021      	str	r1, [r4, #0]
 8006a88:	d04b      	beq.n	8006b22 <_printf_i+0x1a6>
 8006a8a:	4616      	mov	r6, r2
 8006a8c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a90:	fb03 5711 	mls	r7, r3, r1, r5
 8006a94:	5dc7      	ldrb	r7, [r0, r7]
 8006a96:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a9a:	462f      	mov	r7, r5
 8006a9c:	42bb      	cmp	r3, r7
 8006a9e:	460d      	mov	r5, r1
 8006aa0:	d9f4      	bls.n	8006a8c <_printf_i+0x110>
 8006aa2:	2b08      	cmp	r3, #8
 8006aa4:	d10b      	bne.n	8006abe <_printf_i+0x142>
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	07df      	lsls	r7, r3, #31
 8006aaa:	d508      	bpl.n	8006abe <_printf_i+0x142>
 8006aac:	6923      	ldr	r3, [r4, #16]
 8006aae:	6861      	ldr	r1, [r4, #4]
 8006ab0:	4299      	cmp	r1, r3
 8006ab2:	bfde      	ittt	le
 8006ab4:	2330      	movle	r3, #48	@ 0x30
 8006ab6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006aba:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006abe:	1b92      	subs	r2, r2, r6
 8006ac0:	6122      	str	r2, [r4, #16]
 8006ac2:	464b      	mov	r3, r9
 8006ac4:	4621      	mov	r1, r4
 8006ac6:	4640      	mov	r0, r8
 8006ac8:	f8cd a000 	str.w	sl, [sp]
 8006acc:	aa03      	add	r2, sp, #12
 8006ace:	f7ff fee3 	bl	8006898 <_printf_common>
 8006ad2:	3001      	adds	r0, #1
 8006ad4:	d14a      	bne.n	8006b6c <_printf_i+0x1f0>
 8006ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8006ada:	b004      	add	sp, #16
 8006adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ae0:	6823      	ldr	r3, [r4, #0]
 8006ae2:	f043 0320 	orr.w	r3, r3, #32
 8006ae6:	6023      	str	r3, [r4, #0]
 8006ae8:	2778      	movs	r7, #120	@ 0x78
 8006aea:	4832      	ldr	r0, [pc, #200]	@ (8006bb4 <_printf_i+0x238>)
 8006aec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006af0:	6823      	ldr	r3, [r4, #0]
 8006af2:	6831      	ldr	r1, [r6, #0]
 8006af4:	061f      	lsls	r7, r3, #24
 8006af6:	f851 5b04 	ldr.w	r5, [r1], #4
 8006afa:	d402      	bmi.n	8006b02 <_printf_i+0x186>
 8006afc:	065f      	lsls	r7, r3, #25
 8006afe:	bf48      	it	mi
 8006b00:	b2ad      	uxthmi	r5, r5
 8006b02:	6031      	str	r1, [r6, #0]
 8006b04:	07d9      	lsls	r1, r3, #31
 8006b06:	bf44      	itt	mi
 8006b08:	f043 0320 	orrmi.w	r3, r3, #32
 8006b0c:	6023      	strmi	r3, [r4, #0]
 8006b0e:	b11d      	cbz	r5, 8006b18 <_printf_i+0x19c>
 8006b10:	2310      	movs	r3, #16
 8006b12:	e7ad      	b.n	8006a70 <_printf_i+0xf4>
 8006b14:	4826      	ldr	r0, [pc, #152]	@ (8006bb0 <_printf_i+0x234>)
 8006b16:	e7e9      	b.n	8006aec <_printf_i+0x170>
 8006b18:	6823      	ldr	r3, [r4, #0]
 8006b1a:	f023 0320 	bic.w	r3, r3, #32
 8006b1e:	6023      	str	r3, [r4, #0]
 8006b20:	e7f6      	b.n	8006b10 <_printf_i+0x194>
 8006b22:	4616      	mov	r6, r2
 8006b24:	e7bd      	b.n	8006aa2 <_printf_i+0x126>
 8006b26:	6833      	ldr	r3, [r6, #0]
 8006b28:	6825      	ldr	r5, [r4, #0]
 8006b2a:	1d18      	adds	r0, r3, #4
 8006b2c:	6961      	ldr	r1, [r4, #20]
 8006b2e:	6030      	str	r0, [r6, #0]
 8006b30:	062e      	lsls	r6, r5, #24
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	d501      	bpl.n	8006b3a <_printf_i+0x1be>
 8006b36:	6019      	str	r1, [r3, #0]
 8006b38:	e002      	b.n	8006b40 <_printf_i+0x1c4>
 8006b3a:	0668      	lsls	r0, r5, #25
 8006b3c:	d5fb      	bpl.n	8006b36 <_printf_i+0x1ba>
 8006b3e:	8019      	strh	r1, [r3, #0]
 8006b40:	2300      	movs	r3, #0
 8006b42:	4616      	mov	r6, r2
 8006b44:	6123      	str	r3, [r4, #16]
 8006b46:	e7bc      	b.n	8006ac2 <_printf_i+0x146>
 8006b48:	6833      	ldr	r3, [r6, #0]
 8006b4a:	2100      	movs	r1, #0
 8006b4c:	1d1a      	adds	r2, r3, #4
 8006b4e:	6032      	str	r2, [r6, #0]
 8006b50:	681e      	ldr	r6, [r3, #0]
 8006b52:	6862      	ldr	r2, [r4, #4]
 8006b54:	4630      	mov	r0, r6
 8006b56:	f000 f9f0 	bl	8006f3a <memchr>
 8006b5a:	b108      	cbz	r0, 8006b60 <_printf_i+0x1e4>
 8006b5c:	1b80      	subs	r0, r0, r6
 8006b5e:	6060      	str	r0, [r4, #4]
 8006b60:	6863      	ldr	r3, [r4, #4]
 8006b62:	6123      	str	r3, [r4, #16]
 8006b64:	2300      	movs	r3, #0
 8006b66:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b6a:	e7aa      	b.n	8006ac2 <_printf_i+0x146>
 8006b6c:	4632      	mov	r2, r6
 8006b6e:	4649      	mov	r1, r9
 8006b70:	4640      	mov	r0, r8
 8006b72:	6923      	ldr	r3, [r4, #16]
 8006b74:	47d0      	blx	sl
 8006b76:	3001      	adds	r0, #1
 8006b78:	d0ad      	beq.n	8006ad6 <_printf_i+0x15a>
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	079b      	lsls	r3, r3, #30
 8006b7e:	d413      	bmi.n	8006ba8 <_printf_i+0x22c>
 8006b80:	68e0      	ldr	r0, [r4, #12]
 8006b82:	9b03      	ldr	r3, [sp, #12]
 8006b84:	4298      	cmp	r0, r3
 8006b86:	bfb8      	it	lt
 8006b88:	4618      	movlt	r0, r3
 8006b8a:	e7a6      	b.n	8006ada <_printf_i+0x15e>
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	4632      	mov	r2, r6
 8006b90:	4649      	mov	r1, r9
 8006b92:	4640      	mov	r0, r8
 8006b94:	47d0      	blx	sl
 8006b96:	3001      	adds	r0, #1
 8006b98:	d09d      	beq.n	8006ad6 <_printf_i+0x15a>
 8006b9a:	3501      	adds	r5, #1
 8006b9c:	68e3      	ldr	r3, [r4, #12]
 8006b9e:	9903      	ldr	r1, [sp, #12]
 8006ba0:	1a5b      	subs	r3, r3, r1
 8006ba2:	42ab      	cmp	r3, r5
 8006ba4:	dcf2      	bgt.n	8006b8c <_printf_i+0x210>
 8006ba6:	e7eb      	b.n	8006b80 <_printf_i+0x204>
 8006ba8:	2500      	movs	r5, #0
 8006baa:	f104 0619 	add.w	r6, r4, #25
 8006bae:	e7f5      	b.n	8006b9c <_printf_i+0x220>
 8006bb0:	080090b8 	.word	0x080090b8
 8006bb4:	080090c9 	.word	0x080090c9

08006bb8 <std>:
 8006bb8:	2300      	movs	r3, #0
 8006bba:	b510      	push	{r4, lr}
 8006bbc:	4604      	mov	r4, r0
 8006bbe:	e9c0 3300 	strd	r3, r3, [r0]
 8006bc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bc6:	6083      	str	r3, [r0, #8]
 8006bc8:	8181      	strh	r1, [r0, #12]
 8006bca:	6643      	str	r3, [r0, #100]	@ 0x64
 8006bcc:	81c2      	strh	r2, [r0, #14]
 8006bce:	6183      	str	r3, [r0, #24]
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	2208      	movs	r2, #8
 8006bd4:	305c      	adds	r0, #92	@ 0x5c
 8006bd6:	f000 f931 	bl	8006e3c <memset>
 8006bda:	4b0d      	ldr	r3, [pc, #52]	@ (8006c10 <std+0x58>)
 8006bdc:	6224      	str	r4, [r4, #32]
 8006bde:	6263      	str	r3, [r4, #36]	@ 0x24
 8006be0:	4b0c      	ldr	r3, [pc, #48]	@ (8006c14 <std+0x5c>)
 8006be2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006be4:	4b0c      	ldr	r3, [pc, #48]	@ (8006c18 <std+0x60>)
 8006be6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006be8:	4b0c      	ldr	r3, [pc, #48]	@ (8006c1c <std+0x64>)
 8006bea:	6323      	str	r3, [r4, #48]	@ 0x30
 8006bec:	4b0c      	ldr	r3, [pc, #48]	@ (8006c20 <std+0x68>)
 8006bee:	429c      	cmp	r4, r3
 8006bf0:	d006      	beq.n	8006c00 <std+0x48>
 8006bf2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006bf6:	4294      	cmp	r4, r2
 8006bf8:	d002      	beq.n	8006c00 <std+0x48>
 8006bfa:	33d0      	adds	r3, #208	@ 0xd0
 8006bfc:	429c      	cmp	r4, r3
 8006bfe:	d105      	bne.n	8006c0c <std+0x54>
 8006c00:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006c04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c08:	f000 b994 	b.w	8006f34 <__retarget_lock_init_recursive>
 8006c0c:	bd10      	pop	{r4, pc}
 8006c0e:	bf00      	nop
 8006c10:	08006d3d 	.word	0x08006d3d
 8006c14:	08006d5f 	.word	0x08006d5f
 8006c18:	08006d97 	.word	0x08006d97
 8006c1c:	08006dbb 	.word	0x08006dbb
 8006c20:	20000240 	.word	0x20000240

08006c24 <stdio_exit_handler>:
 8006c24:	4a02      	ldr	r2, [pc, #8]	@ (8006c30 <stdio_exit_handler+0xc>)
 8006c26:	4903      	ldr	r1, [pc, #12]	@ (8006c34 <stdio_exit_handler+0x10>)
 8006c28:	4803      	ldr	r0, [pc, #12]	@ (8006c38 <stdio_exit_handler+0x14>)
 8006c2a:	f000 b869 	b.w	8006d00 <_fwalk_sglue>
 8006c2e:	bf00      	nop
 8006c30:	2000000c 	.word	0x2000000c
 8006c34:	080088b1 	.word	0x080088b1
 8006c38:	2000001c 	.word	0x2000001c

08006c3c <cleanup_stdio>:
 8006c3c:	6841      	ldr	r1, [r0, #4]
 8006c3e:	4b0c      	ldr	r3, [pc, #48]	@ (8006c70 <cleanup_stdio+0x34>)
 8006c40:	b510      	push	{r4, lr}
 8006c42:	4299      	cmp	r1, r3
 8006c44:	4604      	mov	r4, r0
 8006c46:	d001      	beq.n	8006c4c <cleanup_stdio+0x10>
 8006c48:	f001 fe32 	bl	80088b0 <_fflush_r>
 8006c4c:	68a1      	ldr	r1, [r4, #8]
 8006c4e:	4b09      	ldr	r3, [pc, #36]	@ (8006c74 <cleanup_stdio+0x38>)
 8006c50:	4299      	cmp	r1, r3
 8006c52:	d002      	beq.n	8006c5a <cleanup_stdio+0x1e>
 8006c54:	4620      	mov	r0, r4
 8006c56:	f001 fe2b 	bl	80088b0 <_fflush_r>
 8006c5a:	68e1      	ldr	r1, [r4, #12]
 8006c5c:	4b06      	ldr	r3, [pc, #24]	@ (8006c78 <cleanup_stdio+0x3c>)
 8006c5e:	4299      	cmp	r1, r3
 8006c60:	d004      	beq.n	8006c6c <cleanup_stdio+0x30>
 8006c62:	4620      	mov	r0, r4
 8006c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c68:	f001 be22 	b.w	80088b0 <_fflush_r>
 8006c6c:	bd10      	pop	{r4, pc}
 8006c6e:	bf00      	nop
 8006c70:	20000240 	.word	0x20000240
 8006c74:	200002a8 	.word	0x200002a8
 8006c78:	20000310 	.word	0x20000310

08006c7c <global_stdio_init.part.0>:
 8006c7c:	b510      	push	{r4, lr}
 8006c7e:	4b0b      	ldr	r3, [pc, #44]	@ (8006cac <global_stdio_init.part.0+0x30>)
 8006c80:	4c0b      	ldr	r4, [pc, #44]	@ (8006cb0 <global_stdio_init.part.0+0x34>)
 8006c82:	4a0c      	ldr	r2, [pc, #48]	@ (8006cb4 <global_stdio_init.part.0+0x38>)
 8006c84:	4620      	mov	r0, r4
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	2104      	movs	r1, #4
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	f7ff ff94 	bl	8006bb8 <std>
 8006c90:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006c94:	2201      	movs	r2, #1
 8006c96:	2109      	movs	r1, #9
 8006c98:	f7ff ff8e 	bl	8006bb8 <std>
 8006c9c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ca0:	2202      	movs	r2, #2
 8006ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca6:	2112      	movs	r1, #18
 8006ca8:	f7ff bf86 	b.w	8006bb8 <std>
 8006cac:	20000378 	.word	0x20000378
 8006cb0:	20000240 	.word	0x20000240
 8006cb4:	08006c25 	.word	0x08006c25

08006cb8 <__sfp_lock_acquire>:
 8006cb8:	4801      	ldr	r0, [pc, #4]	@ (8006cc0 <__sfp_lock_acquire+0x8>)
 8006cba:	f000 b93c 	b.w	8006f36 <__retarget_lock_acquire_recursive>
 8006cbe:	bf00      	nop
 8006cc0:	20000381 	.word	0x20000381

08006cc4 <__sfp_lock_release>:
 8006cc4:	4801      	ldr	r0, [pc, #4]	@ (8006ccc <__sfp_lock_release+0x8>)
 8006cc6:	f000 b937 	b.w	8006f38 <__retarget_lock_release_recursive>
 8006cca:	bf00      	nop
 8006ccc:	20000381 	.word	0x20000381

08006cd0 <__sinit>:
 8006cd0:	b510      	push	{r4, lr}
 8006cd2:	4604      	mov	r4, r0
 8006cd4:	f7ff fff0 	bl	8006cb8 <__sfp_lock_acquire>
 8006cd8:	6a23      	ldr	r3, [r4, #32]
 8006cda:	b11b      	cbz	r3, 8006ce4 <__sinit+0x14>
 8006cdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ce0:	f7ff bff0 	b.w	8006cc4 <__sfp_lock_release>
 8006ce4:	4b04      	ldr	r3, [pc, #16]	@ (8006cf8 <__sinit+0x28>)
 8006ce6:	6223      	str	r3, [r4, #32]
 8006ce8:	4b04      	ldr	r3, [pc, #16]	@ (8006cfc <__sinit+0x2c>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d1f5      	bne.n	8006cdc <__sinit+0xc>
 8006cf0:	f7ff ffc4 	bl	8006c7c <global_stdio_init.part.0>
 8006cf4:	e7f2      	b.n	8006cdc <__sinit+0xc>
 8006cf6:	bf00      	nop
 8006cf8:	08006c3d 	.word	0x08006c3d
 8006cfc:	20000378 	.word	0x20000378

08006d00 <_fwalk_sglue>:
 8006d00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d04:	4607      	mov	r7, r0
 8006d06:	4688      	mov	r8, r1
 8006d08:	4614      	mov	r4, r2
 8006d0a:	2600      	movs	r6, #0
 8006d0c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006d10:	f1b9 0901 	subs.w	r9, r9, #1
 8006d14:	d505      	bpl.n	8006d22 <_fwalk_sglue+0x22>
 8006d16:	6824      	ldr	r4, [r4, #0]
 8006d18:	2c00      	cmp	r4, #0
 8006d1a:	d1f7      	bne.n	8006d0c <_fwalk_sglue+0xc>
 8006d1c:	4630      	mov	r0, r6
 8006d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d22:	89ab      	ldrh	r3, [r5, #12]
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d907      	bls.n	8006d38 <_fwalk_sglue+0x38>
 8006d28:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	d003      	beq.n	8006d38 <_fwalk_sglue+0x38>
 8006d30:	4629      	mov	r1, r5
 8006d32:	4638      	mov	r0, r7
 8006d34:	47c0      	blx	r8
 8006d36:	4306      	orrs	r6, r0
 8006d38:	3568      	adds	r5, #104	@ 0x68
 8006d3a:	e7e9      	b.n	8006d10 <_fwalk_sglue+0x10>

08006d3c <__sread>:
 8006d3c:	b510      	push	{r4, lr}
 8006d3e:	460c      	mov	r4, r1
 8006d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d44:	f000 f8a8 	bl	8006e98 <_read_r>
 8006d48:	2800      	cmp	r0, #0
 8006d4a:	bfab      	itete	ge
 8006d4c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d4e:	89a3      	ldrhlt	r3, [r4, #12]
 8006d50:	181b      	addge	r3, r3, r0
 8006d52:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d56:	bfac      	ite	ge
 8006d58:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d5a:	81a3      	strhlt	r3, [r4, #12]
 8006d5c:	bd10      	pop	{r4, pc}

08006d5e <__swrite>:
 8006d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d62:	461f      	mov	r7, r3
 8006d64:	898b      	ldrh	r3, [r1, #12]
 8006d66:	4605      	mov	r5, r0
 8006d68:	05db      	lsls	r3, r3, #23
 8006d6a:	460c      	mov	r4, r1
 8006d6c:	4616      	mov	r6, r2
 8006d6e:	d505      	bpl.n	8006d7c <__swrite+0x1e>
 8006d70:	2302      	movs	r3, #2
 8006d72:	2200      	movs	r2, #0
 8006d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d78:	f000 f87c 	bl	8006e74 <_lseek_r>
 8006d7c:	89a3      	ldrh	r3, [r4, #12]
 8006d7e:	4632      	mov	r2, r6
 8006d80:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d84:	81a3      	strh	r3, [r4, #12]
 8006d86:	4628      	mov	r0, r5
 8006d88:	463b      	mov	r3, r7
 8006d8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d92:	f000 b893 	b.w	8006ebc <_write_r>

08006d96 <__sseek>:
 8006d96:	b510      	push	{r4, lr}
 8006d98:	460c      	mov	r4, r1
 8006d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d9e:	f000 f869 	bl	8006e74 <_lseek_r>
 8006da2:	1c43      	adds	r3, r0, #1
 8006da4:	89a3      	ldrh	r3, [r4, #12]
 8006da6:	bf15      	itete	ne
 8006da8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006daa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006dae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006db2:	81a3      	strheq	r3, [r4, #12]
 8006db4:	bf18      	it	ne
 8006db6:	81a3      	strhne	r3, [r4, #12]
 8006db8:	bd10      	pop	{r4, pc}

08006dba <__sclose>:
 8006dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dbe:	f000 b849 	b.w	8006e54 <_close_r>

08006dc2 <_vsniprintf_r>:
 8006dc2:	b530      	push	{r4, r5, lr}
 8006dc4:	4614      	mov	r4, r2
 8006dc6:	2c00      	cmp	r4, #0
 8006dc8:	4605      	mov	r5, r0
 8006dca:	461a      	mov	r2, r3
 8006dcc:	b09b      	sub	sp, #108	@ 0x6c
 8006dce:	da05      	bge.n	8006ddc <_vsniprintf_r+0x1a>
 8006dd0:	238b      	movs	r3, #139	@ 0x8b
 8006dd2:	6003      	str	r3, [r0, #0]
 8006dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd8:	b01b      	add	sp, #108	@ 0x6c
 8006dda:	bd30      	pop	{r4, r5, pc}
 8006ddc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006de0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8006de4:	f04f 0300 	mov.w	r3, #0
 8006de8:	9319      	str	r3, [sp, #100]	@ 0x64
 8006dea:	bf0c      	ite	eq
 8006dec:	4623      	moveq	r3, r4
 8006dee:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006df2:	9302      	str	r3, [sp, #8]
 8006df4:	9305      	str	r3, [sp, #20]
 8006df6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006dfa:	9100      	str	r1, [sp, #0]
 8006dfc:	9104      	str	r1, [sp, #16]
 8006dfe:	f8ad 300e 	strh.w	r3, [sp, #14]
 8006e02:	4669      	mov	r1, sp
 8006e04:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006e06:	f001 fbd7 	bl	80085b8 <_svfiprintf_r>
 8006e0a:	1c43      	adds	r3, r0, #1
 8006e0c:	bfbc      	itt	lt
 8006e0e:	238b      	movlt	r3, #139	@ 0x8b
 8006e10:	602b      	strlt	r3, [r5, #0]
 8006e12:	2c00      	cmp	r4, #0
 8006e14:	d0e0      	beq.n	8006dd8 <_vsniprintf_r+0x16>
 8006e16:	2200      	movs	r2, #0
 8006e18:	9b00      	ldr	r3, [sp, #0]
 8006e1a:	701a      	strb	r2, [r3, #0]
 8006e1c:	e7dc      	b.n	8006dd8 <_vsniprintf_r+0x16>
	...

08006e20 <vsniprintf>:
 8006e20:	b507      	push	{r0, r1, r2, lr}
 8006e22:	9300      	str	r3, [sp, #0]
 8006e24:	4613      	mov	r3, r2
 8006e26:	460a      	mov	r2, r1
 8006e28:	4601      	mov	r1, r0
 8006e2a:	4803      	ldr	r0, [pc, #12]	@ (8006e38 <vsniprintf+0x18>)
 8006e2c:	6800      	ldr	r0, [r0, #0]
 8006e2e:	f7ff ffc8 	bl	8006dc2 <_vsniprintf_r>
 8006e32:	b003      	add	sp, #12
 8006e34:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e38:	20000018 	.word	0x20000018

08006e3c <memset>:
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	4402      	add	r2, r0
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d100      	bne.n	8006e46 <memset+0xa>
 8006e44:	4770      	bx	lr
 8006e46:	f803 1b01 	strb.w	r1, [r3], #1
 8006e4a:	e7f9      	b.n	8006e40 <memset+0x4>

08006e4c <_localeconv_r>:
 8006e4c:	4800      	ldr	r0, [pc, #0]	@ (8006e50 <_localeconv_r+0x4>)
 8006e4e:	4770      	bx	lr
 8006e50:	20000158 	.word	0x20000158

08006e54 <_close_r>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	2300      	movs	r3, #0
 8006e58:	4d05      	ldr	r5, [pc, #20]	@ (8006e70 <_close_r+0x1c>)
 8006e5a:	4604      	mov	r4, r0
 8006e5c:	4608      	mov	r0, r1
 8006e5e:	602b      	str	r3, [r5, #0]
 8006e60:	f7fe f853 	bl	8004f0a <_close>
 8006e64:	1c43      	adds	r3, r0, #1
 8006e66:	d102      	bne.n	8006e6e <_close_r+0x1a>
 8006e68:	682b      	ldr	r3, [r5, #0]
 8006e6a:	b103      	cbz	r3, 8006e6e <_close_r+0x1a>
 8006e6c:	6023      	str	r3, [r4, #0]
 8006e6e:	bd38      	pop	{r3, r4, r5, pc}
 8006e70:	2000037c 	.word	0x2000037c

08006e74 <_lseek_r>:
 8006e74:	b538      	push	{r3, r4, r5, lr}
 8006e76:	4604      	mov	r4, r0
 8006e78:	4608      	mov	r0, r1
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	4d05      	ldr	r5, [pc, #20]	@ (8006e94 <_lseek_r+0x20>)
 8006e80:	602a      	str	r2, [r5, #0]
 8006e82:	461a      	mov	r2, r3
 8006e84:	f7fe f865 	bl	8004f52 <_lseek>
 8006e88:	1c43      	adds	r3, r0, #1
 8006e8a:	d102      	bne.n	8006e92 <_lseek_r+0x1e>
 8006e8c:	682b      	ldr	r3, [r5, #0]
 8006e8e:	b103      	cbz	r3, 8006e92 <_lseek_r+0x1e>
 8006e90:	6023      	str	r3, [r4, #0]
 8006e92:	bd38      	pop	{r3, r4, r5, pc}
 8006e94:	2000037c 	.word	0x2000037c

08006e98 <_read_r>:
 8006e98:	b538      	push	{r3, r4, r5, lr}
 8006e9a:	4604      	mov	r4, r0
 8006e9c:	4608      	mov	r0, r1
 8006e9e:	4611      	mov	r1, r2
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	4d05      	ldr	r5, [pc, #20]	@ (8006eb8 <_read_r+0x20>)
 8006ea4:	602a      	str	r2, [r5, #0]
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	f7fd fff6 	bl	8004e98 <_read>
 8006eac:	1c43      	adds	r3, r0, #1
 8006eae:	d102      	bne.n	8006eb6 <_read_r+0x1e>
 8006eb0:	682b      	ldr	r3, [r5, #0]
 8006eb2:	b103      	cbz	r3, 8006eb6 <_read_r+0x1e>
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	bd38      	pop	{r3, r4, r5, pc}
 8006eb8:	2000037c 	.word	0x2000037c

08006ebc <_write_r>:
 8006ebc:	b538      	push	{r3, r4, r5, lr}
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	4608      	mov	r0, r1
 8006ec2:	4611      	mov	r1, r2
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	4d05      	ldr	r5, [pc, #20]	@ (8006edc <_write_r+0x20>)
 8006ec8:	602a      	str	r2, [r5, #0]
 8006eca:	461a      	mov	r2, r3
 8006ecc:	f7fe f801 	bl	8004ed2 <_write>
 8006ed0:	1c43      	adds	r3, r0, #1
 8006ed2:	d102      	bne.n	8006eda <_write_r+0x1e>
 8006ed4:	682b      	ldr	r3, [r5, #0]
 8006ed6:	b103      	cbz	r3, 8006eda <_write_r+0x1e>
 8006ed8:	6023      	str	r3, [r4, #0]
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	2000037c 	.word	0x2000037c

08006ee0 <__errno>:
 8006ee0:	4b01      	ldr	r3, [pc, #4]	@ (8006ee8 <__errno+0x8>)
 8006ee2:	6818      	ldr	r0, [r3, #0]
 8006ee4:	4770      	bx	lr
 8006ee6:	bf00      	nop
 8006ee8:	20000018 	.word	0x20000018

08006eec <__libc_init_array>:
 8006eec:	b570      	push	{r4, r5, r6, lr}
 8006eee:	2600      	movs	r6, #0
 8006ef0:	4d0c      	ldr	r5, [pc, #48]	@ (8006f24 <__libc_init_array+0x38>)
 8006ef2:	4c0d      	ldr	r4, [pc, #52]	@ (8006f28 <__libc_init_array+0x3c>)
 8006ef4:	1b64      	subs	r4, r4, r5
 8006ef6:	10a4      	asrs	r4, r4, #2
 8006ef8:	42a6      	cmp	r6, r4
 8006efa:	d109      	bne.n	8006f10 <__libc_init_array+0x24>
 8006efc:	f002 f874 	bl	8008fe8 <_init>
 8006f00:	2600      	movs	r6, #0
 8006f02:	4d0a      	ldr	r5, [pc, #40]	@ (8006f2c <__libc_init_array+0x40>)
 8006f04:	4c0a      	ldr	r4, [pc, #40]	@ (8006f30 <__libc_init_array+0x44>)
 8006f06:	1b64      	subs	r4, r4, r5
 8006f08:	10a4      	asrs	r4, r4, #2
 8006f0a:	42a6      	cmp	r6, r4
 8006f0c:	d105      	bne.n	8006f1a <__libc_init_array+0x2e>
 8006f0e:	bd70      	pop	{r4, r5, r6, pc}
 8006f10:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f14:	4798      	blx	r3
 8006f16:	3601      	adds	r6, #1
 8006f18:	e7ee      	b.n	8006ef8 <__libc_init_array+0xc>
 8006f1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f1e:	4798      	blx	r3
 8006f20:	3601      	adds	r6, #1
 8006f22:	e7f2      	b.n	8006f0a <__libc_init_array+0x1e>
 8006f24:	08009424 	.word	0x08009424
 8006f28:	08009424 	.word	0x08009424
 8006f2c:	08009424 	.word	0x08009424
 8006f30:	08009428 	.word	0x08009428

08006f34 <__retarget_lock_init_recursive>:
 8006f34:	4770      	bx	lr

08006f36 <__retarget_lock_acquire_recursive>:
 8006f36:	4770      	bx	lr

08006f38 <__retarget_lock_release_recursive>:
 8006f38:	4770      	bx	lr

08006f3a <memchr>:
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	b510      	push	{r4, lr}
 8006f3e:	b2c9      	uxtb	r1, r1
 8006f40:	4402      	add	r2, r0
 8006f42:	4293      	cmp	r3, r2
 8006f44:	4618      	mov	r0, r3
 8006f46:	d101      	bne.n	8006f4c <memchr+0x12>
 8006f48:	2000      	movs	r0, #0
 8006f4a:	e003      	b.n	8006f54 <memchr+0x1a>
 8006f4c:	7804      	ldrb	r4, [r0, #0]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	428c      	cmp	r4, r1
 8006f52:	d1f6      	bne.n	8006f42 <memchr+0x8>
 8006f54:	bd10      	pop	{r4, pc}

08006f56 <quorem>:
 8006f56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5a:	6903      	ldr	r3, [r0, #16]
 8006f5c:	690c      	ldr	r4, [r1, #16]
 8006f5e:	4607      	mov	r7, r0
 8006f60:	42a3      	cmp	r3, r4
 8006f62:	db7e      	blt.n	8007062 <quorem+0x10c>
 8006f64:	3c01      	subs	r4, #1
 8006f66:	00a3      	lsls	r3, r4, #2
 8006f68:	f100 0514 	add.w	r5, r0, #20
 8006f6c:	f101 0814 	add.w	r8, r1, #20
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f76:	9301      	str	r3, [sp, #4]
 8006f78:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006f7c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f80:	3301      	adds	r3, #1
 8006f82:	429a      	cmp	r2, r3
 8006f84:	fbb2 f6f3 	udiv	r6, r2, r3
 8006f88:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006f8c:	d32e      	bcc.n	8006fec <quorem+0x96>
 8006f8e:	f04f 0a00 	mov.w	sl, #0
 8006f92:	46c4      	mov	ip, r8
 8006f94:	46ae      	mov	lr, r5
 8006f96:	46d3      	mov	fp, sl
 8006f98:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006f9c:	b298      	uxth	r0, r3
 8006f9e:	fb06 a000 	mla	r0, r6, r0, sl
 8006fa2:	0c1b      	lsrs	r3, r3, #16
 8006fa4:	0c02      	lsrs	r2, r0, #16
 8006fa6:	fb06 2303 	mla	r3, r6, r3, r2
 8006faa:	f8de 2000 	ldr.w	r2, [lr]
 8006fae:	b280      	uxth	r0, r0
 8006fb0:	b292      	uxth	r2, r2
 8006fb2:	1a12      	subs	r2, r2, r0
 8006fb4:	445a      	add	r2, fp
 8006fb6:	f8de 0000 	ldr.w	r0, [lr]
 8006fba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006fc4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006fc8:	b292      	uxth	r2, r2
 8006fca:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006fce:	45e1      	cmp	r9, ip
 8006fd0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006fd4:	f84e 2b04 	str.w	r2, [lr], #4
 8006fd8:	d2de      	bcs.n	8006f98 <quorem+0x42>
 8006fda:	9b00      	ldr	r3, [sp, #0]
 8006fdc:	58eb      	ldr	r3, [r5, r3]
 8006fde:	b92b      	cbnz	r3, 8006fec <quorem+0x96>
 8006fe0:	9b01      	ldr	r3, [sp, #4]
 8006fe2:	3b04      	subs	r3, #4
 8006fe4:	429d      	cmp	r5, r3
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	d32f      	bcc.n	800704a <quorem+0xf4>
 8006fea:	613c      	str	r4, [r7, #16]
 8006fec:	4638      	mov	r0, r7
 8006fee:	f001 f97f 	bl	80082f0 <__mcmp>
 8006ff2:	2800      	cmp	r0, #0
 8006ff4:	db25      	blt.n	8007042 <quorem+0xec>
 8006ff6:	4629      	mov	r1, r5
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ffe:	f8d1 c000 	ldr.w	ip, [r1]
 8007002:	fa1f fe82 	uxth.w	lr, r2
 8007006:	fa1f f38c 	uxth.w	r3, ip
 800700a:	eba3 030e 	sub.w	r3, r3, lr
 800700e:	4403      	add	r3, r0
 8007010:	0c12      	lsrs	r2, r2, #16
 8007012:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007016:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800701a:	b29b      	uxth	r3, r3
 800701c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007020:	45c1      	cmp	r9, r8
 8007022:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007026:	f841 3b04 	str.w	r3, [r1], #4
 800702a:	d2e6      	bcs.n	8006ffa <quorem+0xa4>
 800702c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007030:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007034:	b922      	cbnz	r2, 8007040 <quorem+0xea>
 8007036:	3b04      	subs	r3, #4
 8007038:	429d      	cmp	r5, r3
 800703a:	461a      	mov	r2, r3
 800703c:	d30b      	bcc.n	8007056 <quorem+0x100>
 800703e:	613c      	str	r4, [r7, #16]
 8007040:	3601      	adds	r6, #1
 8007042:	4630      	mov	r0, r6
 8007044:	b003      	add	sp, #12
 8007046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800704a:	6812      	ldr	r2, [r2, #0]
 800704c:	3b04      	subs	r3, #4
 800704e:	2a00      	cmp	r2, #0
 8007050:	d1cb      	bne.n	8006fea <quorem+0x94>
 8007052:	3c01      	subs	r4, #1
 8007054:	e7c6      	b.n	8006fe4 <quorem+0x8e>
 8007056:	6812      	ldr	r2, [r2, #0]
 8007058:	3b04      	subs	r3, #4
 800705a:	2a00      	cmp	r2, #0
 800705c:	d1ef      	bne.n	800703e <quorem+0xe8>
 800705e:	3c01      	subs	r4, #1
 8007060:	e7ea      	b.n	8007038 <quorem+0xe2>
 8007062:	2000      	movs	r0, #0
 8007064:	e7ee      	b.n	8007044 <quorem+0xee>
	...

08007068 <_dtoa_r>:
 8007068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800706c:	4614      	mov	r4, r2
 800706e:	461d      	mov	r5, r3
 8007070:	69c7      	ldr	r7, [r0, #28]
 8007072:	b097      	sub	sp, #92	@ 0x5c
 8007074:	4681      	mov	r9, r0
 8007076:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800707a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800707c:	b97f      	cbnz	r7, 800709e <_dtoa_r+0x36>
 800707e:	2010      	movs	r0, #16
 8007080:	f000 fe0e 	bl	8007ca0 <malloc>
 8007084:	4602      	mov	r2, r0
 8007086:	f8c9 001c 	str.w	r0, [r9, #28]
 800708a:	b920      	cbnz	r0, 8007096 <_dtoa_r+0x2e>
 800708c:	21ef      	movs	r1, #239	@ 0xef
 800708e:	4bac      	ldr	r3, [pc, #688]	@ (8007340 <_dtoa_r+0x2d8>)
 8007090:	48ac      	ldr	r0, [pc, #688]	@ (8007344 <_dtoa_r+0x2dc>)
 8007092:	f001 fc6d 	bl	8008970 <__assert_func>
 8007096:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800709a:	6007      	str	r7, [r0, #0]
 800709c:	60c7      	str	r7, [r0, #12]
 800709e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80070a2:	6819      	ldr	r1, [r3, #0]
 80070a4:	b159      	cbz	r1, 80070be <_dtoa_r+0x56>
 80070a6:	685a      	ldr	r2, [r3, #4]
 80070a8:	2301      	movs	r3, #1
 80070aa:	4093      	lsls	r3, r2
 80070ac:	604a      	str	r2, [r1, #4]
 80070ae:	608b      	str	r3, [r1, #8]
 80070b0:	4648      	mov	r0, r9
 80070b2:	f000 feeb 	bl	8007e8c <_Bfree>
 80070b6:	2200      	movs	r2, #0
 80070b8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	1e2b      	subs	r3, r5, #0
 80070c0:	bfaf      	iteee	ge
 80070c2:	2300      	movge	r3, #0
 80070c4:	2201      	movlt	r2, #1
 80070c6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80070ca:	9307      	strlt	r3, [sp, #28]
 80070cc:	bfa8      	it	ge
 80070ce:	6033      	strge	r3, [r6, #0]
 80070d0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80070d4:	4b9c      	ldr	r3, [pc, #624]	@ (8007348 <_dtoa_r+0x2e0>)
 80070d6:	bfb8      	it	lt
 80070d8:	6032      	strlt	r2, [r6, #0]
 80070da:	ea33 0308 	bics.w	r3, r3, r8
 80070de:	d112      	bne.n	8007106 <_dtoa_r+0x9e>
 80070e0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80070e4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80070e6:	6013      	str	r3, [r2, #0]
 80070e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80070ec:	4323      	orrs	r3, r4
 80070ee:	f000 855e 	beq.w	8007bae <_dtoa_r+0xb46>
 80070f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80070f4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800734c <_dtoa_r+0x2e4>
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 8560 	beq.w	8007bbe <_dtoa_r+0xb56>
 80070fe:	f10a 0303 	add.w	r3, sl, #3
 8007102:	f000 bd5a 	b.w	8007bba <_dtoa_r+0xb52>
 8007106:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800710a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800710e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007112:	2200      	movs	r2, #0
 8007114:	2300      	movs	r3, #0
 8007116:	f7fd fc47 	bl	80049a8 <__aeabi_dcmpeq>
 800711a:	4607      	mov	r7, r0
 800711c:	b158      	cbz	r0, 8007136 <_dtoa_r+0xce>
 800711e:	2301      	movs	r3, #1
 8007120:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007122:	6013      	str	r3, [r2, #0]
 8007124:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007126:	b113      	cbz	r3, 800712e <_dtoa_r+0xc6>
 8007128:	4b89      	ldr	r3, [pc, #548]	@ (8007350 <_dtoa_r+0x2e8>)
 800712a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800712c:	6013      	str	r3, [r2, #0]
 800712e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8007354 <_dtoa_r+0x2ec>
 8007132:	f000 bd44 	b.w	8007bbe <_dtoa_r+0xb56>
 8007136:	ab14      	add	r3, sp, #80	@ 0x50
 8007138:	9301      	str	r3, [sp, #4]
 800713a:	ab15      	add	r3, sp, #84	@ 0x54
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	4648      	mov	r0, r9
 8007140:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007144:	f001 f984 	bl	8008450 <__d2b>
 8007148:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800714c:	9003      	str	r0, [sp, #12]
 800714e:	2e00      	cmp	r6, #0
 8007150:	d078      	beq.n	8007244 <_dtoa_r+0x1dc>
 8007152:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007156:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007158:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800715c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007160:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007164:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007168:	9712      	str	r7, [sp, #72]	@ 0x48
 800716a:	4619      	mov	r1, r3
 800716c:	2200      	movs	r2, #0
 800716e:	4b7a      	ldr	r3, [pc, #488]	@ (8007358 <_dtoa_r+0x2f0>)
 8007170:	f7fc fffa 	bl	8004168 <__aeabi_dsub>
 8007174:	a36c      	add	r3, pc, #432	@ (adr r3, 8007328 <_dtoa_r+0x2c0>)
 8007176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800717a:	f7fd f9ad 	bl	80044d8 <__aeabi_dmul>
 800717e:	a36c      	add	r3, pc, #432	@ (adr r3, 8007330 <_dtoa_r+0x2c8>)
 8007180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007184:	f7fc fff2 	bl	800416c <__adddf3>
 8007188:	4604      	mov	r4, r0
 800718a:	4630      	mov	r0, r6
 800718c:	460d      	mov	r5, r1
 800718e:	f7fd f939 	bl	8004404 <__aeabi_i2d>
 8007192:	a369      	add	r3, pc, #420	@ (adr r3, 8007338 <_dtoa_r+0x2d0>)
 8007194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007198:	f7fd f99e 	bl	80044d8 <__aeabi_dmul>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	4620      	mov	r0, r4
 80071a2:	4629      	mov	r1, r5
 80071a4:	f7fc ffe2 	bl	800416c <__adddf3>
 80071a8:	4604      	mov	r4, r0
 80071aa:	460d      	mov	r5, r1
 80071ac:	f7fd fc44 	bl	8004a38 <__aeabi_d2iz>
 80071b0:	2200      	movs	r2, #0
 80071b2:	4607      	mov	r7, r0
 80071b4:	2300      	movs	r3, #0
 80071b6:	4620      	mov	r0, r4
 80071b8:	4629      	mov	r1, r5
 80071ba:	f7fd fbff 	bl	80049bc <__aeabi_dcmplt>
 80071be:	b140      	cbz	r0, 80071d2 <_dtoa_r+0x16a>
 80071c0:	4638      	mov	r0, r7
 80071c2:	f7fd f91f 	bl	8004404 <__aeabi_i2d>
 80071c6:	4622      	mov	r2, r4
 80071c8:	462b      	mov	r3, r5
 80071ca:	f7fd fbed 	bl	80049a8 <__aeabi_dcmpeq>
 80071ce:	b900      	cbnz	r0, 80071d2 <_dtoa_r+0x16a>
 80071d0:	3f01      	subs	r7, #1
 80071d2:	2f16      	cmp	r7, #22
 80071d4:	d854      	bhi.n	8007280 <_dtoa_r+0x218>
 80071d6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071da:	4b60      	ldr	r3, [pc, #384]	@ (800735c <_dtoa_r+0x2f4>)
 80071dc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80071e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e4:	f7fd fbea 	bl	80049bc <__aeabi_dcmplt>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d04b      	beq.n	8007284 <_dtoa_r+0x21c>
 80071ec:	2300      	movs	r3, #0
 80071ee:	3f01      	subs	r7, #1
 80071f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80071f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80071f4:	1b9b      	subs	r3, r3, r6
 80071f6:	1e5a      	subs	r2, r3, #1
 80071f8:	bf49      	itett	mi
 80071fa:	f1c3 0301 	rsbmi	r3, r3, #1
 80071fe:	2300      	movpl	r3, #0
 8007200:	9304      	strmi	r3, [sp, #16]
 8007202:	2300      	movmi	r3, #0
 8007204:	9209      	str	r2, [sp, #36]	@ 0x24
 8007206:	bf54      	ite	pl
 8007208:	9304      	strpl	r3, [sp, #16]
 800720a:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800720c:	2f00      	cmp	r7, #0
 800720e:	db3b      	blt.n	8007288 <_dtoa_r+0x220>
 8007210:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007212:	970e      	str	r7, [sp, #56]	@ 0x38
 8007214:	443b      	add	r3, r7
 8007216:	9309      	str	r3, [sp, #36]	@ 0x24
 8007218:	2300      	movs	r3, #0
 800721a:	930a      	str	r3, [sp, #40]	@ 0x28
 800721c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800721e:	2b09      	cmp	r3, #9
 8007220:	d865      	bhi.n	80072ee <_dtoa_r+0x286>
 8007222:	2b05      	cmp	r3, #5
 8007224:	bfc4      	itt	gt
 8007226:	3b04      	subgt	r3, #4
 8007228:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800722a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800722c:	bfc8      	it	gt
 800722e:	2400      	movgt	r4, #0
 8007230:	f1a3 0302 	sub.w	r3, r3, #2
 8007234:	bfd8      	it	le
 8007236:	2401      	movle	r4, #1
 8007238:	2b03      	cmp	r3, #3
 800723a:	d864      	bhi.n	8007306 <_dtoa_r+0x29e>
 800723c:	e8df f003 	tbb	[pc, r3]
 8007240:	2c385553 	.word	0x2c385553
 8007244:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007248:	441e      	add	r6, r3
 800724a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800724e:	2b20      	cmp	r3, #32
 8007250:	bfc1      	itttt	gt
 8007252:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007256:	fa08 f803 	lslgt.w	r8, r8, r3
 800725a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800725e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007262:	bfd6      	itet	le
 8007264:	f1c3 0320 	rsble	r3, r3, #32
 8007268:	ea48 0003 	orrgt.w	r0, r8, r3
 800726c:	fa04 f003 	lslle.w	r0, r4, r3
 8007270:	f7fd f8b8 	bl	80043e4 <__aeabi_ui2d>
 8007274:	2201      	movs	r2, #1
 8007276:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800727a:	3e01      	subs	r6, #1
 800727c:	9212      	str	r2, [sp, #72]	@ 0x48
 800727e:	e774      	b.n	800716a <_dtoa_r+0x102>
 8007280:	2301      	movs	r3, #1
 8007282:	e7b5      	b.n	80071f0 <_dtoa_r+0x188>
 8007284:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007286:	e7b4      	b.n	80071f2 <_dtoa_r+0x18a>
 8007288:	9b04      	ldr	r3, [sp, #16]
 800728a:	1bdb      	subs	r3, r3, r7
 800728c:	9304      	str	r3, [sp, #16]
 800728e:	427b      	negs	r3, r7
 8007290:	930a      	str	r3, [sp, #40]	@ 0x28
 8007292:	2300      	movs	r3, #0
 8007294:	930e      	str	r3, [sp, #56]	@ 0x38
 8007296:	e7c1      	b.n	800721c <_dtoa_r+0x1b4>
 8007298:	2301      	movs	r3, #1
 800729a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800729c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800729e:	eb07 0b03 	add.w	fp, r7, r3
 80072a2:	f10b 0301 	add.w	r3, fp, #1
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	9308      	str	r3, [sp, #32]
 80072aa:	bfb8      	it	lt
 80072ac:	2301      	movlt	r3, #1
 80072ae:	e006      	b.n	80072be <_dtoa_r+0x256>
 80072b0:	2301      	movs	r3, #1
 80072b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80072b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	dd28      	ble.n	800730c <_dtoa_r+0x2a4>
 80072ba:	469b      	mov	fp, r3
 80072bc:	9308      	str	r3, [sp, #32]
 80072be:	2100      	movs	r1, #0
 80072c0:	2204      	movs	r2, #4
 80072c2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80072c6:	f102 0514 	add.w	r5, r2, #20
 80072ca:	429d      	cmp	r5, r3
 80072cc:	d926      	bls.n	800731c <_dtoa_r+0x2b4>
 80072ce:	6041      	str	r1, [r0, #4]
 80072d0:	4648      	mov	r0, r9
 80072d2:	f000 fd9b 	bl	8007e0c <_Balloc>
 80072d6:	4682      	mov	sl, r0
 80072d8:	2800      	cmp	r0, #0
 80072da:	d143      	bne.n	8007364 <_dtoa_r+0x2fc>
 80072dc:	4602      	mov	r2, r0
 80072de:	f240 11af 	movw	r1, #431	@ 0x1af
 80072e2:	4b1f      	ldr	r3, [pc, #124]	@ (8007360 <_dtoa_r+0x2f8>)
 80072e4:	e6d4      	b.n	8007090 <_dtoa_r+0x28>
 80072e6:	2300      	movs	r3, #0
 80072e8:	e7e3      	b.n	80072b2 <_dtoa_r+0x24a>
 80072ea:	2300      	movs	r3, #0
 80072ec:	e7d5      	b.n	800729a <_dtoa_r+0x232>
 80072ee:	2401      	movs	r4, #1
 80072f0:	2300      	movs	r3, #0
 80072f2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80072f4:	9320      	str	r3, [sp, #128]	@ 0x80
 80072f6:	f04f 3bff 	mov.w	fp, #4294967295
 80072fa:	2200      	movs	r2, #0
 80072fc:	2312      	movs	r3, #18
 80072fe:	f8cd b020 	str.w	fp, [sp, #32]
 8007302:	9221      	str	r2, [sp, #132]	@ 0x84
 8007304:	e7db      	b.n	80072be <_dtoa_r+0x256>
 8007306:	2301      	movs	r3, #1
 8007308:	930b      	str	r3, [sp, #44]	@ 0x2c
 800730a:	e7f4      	b.n	80072f6 <_dtoa_r+0x28e>
 800730c:	f04f 0b01 	mov.w	fp, #1
 8007310:	465b      	mov	r3, fp
 8007312:	f8cd b020 	str.w	fp, [sp, #32]
 8007316:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 800731a:	e7d0      	b.n	80072be <_dtoa_r+0x256>
 800731c:	3101      	adds	r1, #1
 800731e:	0052      	lsls	r2, r2, #1
 8007320:	e7d1      	b.n	80072c6 <_dtoa_r+0x25e>
 8007322:	bf00      	nop
 8007324:	f3af 8000 	nop.w
 8007328:	636f4361 	.word	0x636f4361
 800732c:	3fd287a7 	.word	0x3fd287a7
 8007330:	8b60c8b3 	.word	0x8b60c8b3
 8007334:	3fc68a28 	.word	0x3fc68a28
 8007338:	509f79fb 	.word	0x509f79fb
 800733c:	3fd34413 	.word	0x3fd34413
 8007340:	080090e7 	.word	0x080090e7
 8007344:	080090fe 	.word	0x080090fe
 8007348:	7ff00000 	.word	0x7ff00000
 800734c:	080090e3 	.word	0x080090e3
 8007350:	080090b7 	.word	0x080090b7
 8007354:	080090b6 	.word	0x080090b6
 8007358:	3ff80000 	.word	0x3ff80000
 800735c:	08009250 	.word	0x08009250
 8007360:	08009156 	.word	0x08009156
 8007364:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007368:	6018      	str	r0, [r3, #0]
 800736a:	9b08      	ldr	r3, [sp, #32]
 800736c:	2b0e      	cmp	r3, #14
 800736e:	f200 80a1 	bhi.w	80074b4 <_dtoa_r+0x44c>
 8007372:	2c00      	cmp	r4, #0
 8007374:	f000 809e 	beq.w	80074b4 <_dtoa_r+0x44c>
 8007378:	2f00      	cmp	r7, #0
 800737a:	dd33      	ble.n	80073e4 <_dtoa_r+0x37c>
 800737c:	4b9c      	ldr	r3, [pc, #624]	@ (80075f0 <_dtoa_r+0x588>)
 800737e:	f007 020f 	and.w	r2, r7, #15
 8007382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007386:	05f8      	lsls	r0, r7, #23
 8007388:	e9d3 3400 	ldrd	r3, r4, [r3]
 800738c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8007390:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007394:	d516      	bpl.n	80073c4 <_dtoa_r+0x35c>
 8007396:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800739a:	4b96      	ldr	r3, [pc, #600]	@ (80075f4 <_dtoa_r+0x58c>)
 800739c:	2603      	movs	r6, #3
 800739e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073a2:	f7fd f9c3 	bl	800472c <__aeabi_ddiv>
 80073a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80073aa:	f004 040f 	and.w	r4, r4, #15
 80073ae:	4d91      	ldr	r5, [pc, #580]	@ (80075f4 <_dtoa_r+0x58c>)
 80073b0:	b954      	cbnz	r4, 80073c8 <_dtoa_r+0x360>
 80073b2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80073b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073ba:	f7fd f9b7 	bl	800472c <__aeabi_ddiv>
 80073be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80073c2:	e028      	b.n	8007416 <_dtoa_r+0x3ae>
 80073c4:	2602      	movs	r6, #2
 80073c6:	e7f2      	b.n	80073ae <_dtoa_r+0x346>
 80073c8:	07e1      	lsls	r1, r4, #31
 80073ca:	d508      	bpl.n	80073de <_dtoa_r+0x376>
 80073cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80073d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80073d4:	f7fd f880 	bl	80044d8 <__aeabi_dmul>
 80073d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80073dc:	3601      	adds	r6, #1
 80073de:	1064      	asrs	r4, r4, #1
 80073e0:	3508      	adds	r5, #8
 80073e2:	e7e5      	b.n	80073b0 <_dtoa_r+0x348>
 80073e4:	f000 80af 	beq.w	8007546 <_dtoa_r+0x4de>
 80073e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80073ec:	427c      	negs	r4, r7
 80073ee:	4b80      	ldr	r3, [pc, #512]	@ (80075f0 <_dtoa_r+0x588>)
 80073f0:	f004 020f 	and.w	r2, r4, #15
 80073f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fc:	f7fd f86c 	bl	80044d8 <__aeabi_dmul>
 8007400:	2602      	movs	r6, #2
 8007402:	2300      	movs	r3, #0
 8007404:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007408:	4d7a      	ldr	r5, [pc, #488]	@ (80075f4 <_dtoa_r+0x58c>)
 800740a:	1124      	asrs	r4, r4, #4
 800740c:	2c00      	cmp	r4, #0
 800740e:	f040 808f 	bne.w	8007530 <_dtoa_r+0x4c8>
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1d3      	bne.n	80073be <_dtoa_r+0x356>
 8007416:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 800741a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800741c:	2b00      	cmp	r3, #0
 800741e:	f000 8094 	beq.w	800754a <_dtoa_r+0x4e2>
 8007422:	2200      	movs	r2, #0
 8007424:	4620      	mov	r0, r4
 8007426:	4629      	mov	r1, r5
 8007428:	4b73      	ldr	r3, [pc, #460]	@ (80075f8 <_dtoa_r+0x590>)
 800742a:	f7fd fac7 	bl	80049bc <__aeabi_dcmplt>
 800742e:	2800      	cmp	r0, #0
 8007430:	f000 808b 	beq.w	800754a <_dtoa_r+0x4e2>
 8007434:	9b08      	ldr	r3, [sp, #32]
 8007436:	2b00      	cmp	r3, #0
 8007438:	f000 8087 	beq.w	800754a <_dtoa_r+0x4e2>
 800743c:	f1bb 0f00 	cmp.w	fp, #0
 8007440:	dd34      	ble.n	80074ac <_dtoa_r+0x444>
 8007442:	4620      	mov	r0, r4
 8007444:	2200      	movs	r2, #0
 8007446:	4629      	mov	r1, r5
 8007448:	4b6c      	ldr	r3, [pc, #432]	@ (80075fc <_dtoa_r+0x594>)
 800744a:	f7fd f845 	bl	80044d8 <__aeabi_dmul>
 800744e:	465c      	mov	r4, fp
 8007450:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007454:	f107 38ff 	add.w	r8, r7, #4294967295
 8007458:	3601      	adds	r6, #1
 800745a:	4630      	mov	r0, r6
 800745c:	f7fc ffd2 	bl	8004404 <__aeabi_i2d>
 8007460:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007464:	f7fd f838 	bl	80044d8 <__aeabi_dmul>
 8007468:	2200      	movs	r2, #0
 800746a:	4b65      	ldr	r3, [pc, #404]	@ (8007600 <_dtoa_r+0x598>)
 800746c:	f7fc fe7e 	bl	800416c <__adddf3>
 8007470:	4605      	mov	r5, r0
 8007472:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007476:	2c00      	cmp	r4, #0
 8007478:	d16a      	bne.n	8007550 <_dtoa_r+0x4e8>
 800747a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800747e:	2200      	movs	r2, #0
 8007480:	4b60      	ldr	r3, [pc, #384]	@ (8007604 <_dtoa_r+0x59c>)
 8007482:	f7fc fe71 	bl	8004168 <__aeabi_dsub>
 8007486:	4602      	mov	r2, r0
 8007488:	460b      	mov	r3, r1
 800748a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800748e:	462a      	mov	r2, r5
 8007490:	4633      	mov	r3, r6
 8007492:	f7fd fab1 	bl	80049f8 <__aeabi_dcmpgt>
 8007496:	2800      	cmp	r0, #0
 8007498:	f040 8298 	bne.w	80079cc <_dtoa_r+0x964>
 800749c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80074a0:	462a      	mov	r2, r5
 80074a2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80074a6:	f7fd fa89 	bl	80049bc <__aeabi_dcmplt>
 80074aa:	bb38      	cbnz	r0, 80074fc <_dtoa_r+0x494>
 80074ac:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80074b0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80074b4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	f2c0 8157 	blt.w	800776a <_dtoa_r+0x702>
 80074bc:	2f0e      	cmp	r7, #14
 80074be:	f300 8154 	bgt.w	800776a <_dtoa_r+0x702>
 80074c2:	4b4b      	ldr	r3, [pc, #300]	@ (80075f0 <_dtoa_r+0x588>)
 80074c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80074c8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80074cc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80074d0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	f280 80e5 	bge.w	80076a2 <_dtoa_r+0x63a>
 80074d8:	9b08      	ldr	r3, [sp, #32]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	f300 80e1 	bgt.w	80076a2 <_dtoa_r+0x63a>
 80074e0:	d10c      	bne.n	80074fc <_dtoa_r+0x494>
 80074e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074e6:	2200      	movs	r2, #0
 80074e8:	4b46      	ldr	r3, [pc, #280]	@ (8007604 <_dtoa_r+0x59c>)
 80074ea:	f7fc fff5 	bl	80044d8 <__aeabi_dmul>
 80074ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074f2:	f7fd fa77 	bl	80049e4 <__aeabi_dcmpge>
 80074f6:	2800      	cmp	r0, #0
 80074f8:	f000 8266 	beq.w	80079c8 <_dtoa_r+0x960>
 80074fc:	2400      	movs	r4, #0
 80074fe:	4625      	mov	r5, r4
 8007500:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007502:	4656      	mov	r6, sl
 8007504:	ea6f 0803 	mvn.w	r8, r3
 8007508:	2700      	movs	r7, #0
 800750a:	4621      	mov	r1, r4
 800750c:	4648      	mov	r0, r9
 800750e:	f000 fcbd 	bl	8007e8c <_Bfree>
 8007512:	2d00      	cmp	r5, #0
 8007514:	f000 80bd 	beq.w	8007692 <_dtoa_r+0x62a>
 8007518:	b12f      	cbz	r7, 8007526 <_dtoa_r+0x4be>
 800751a:	42af      	cmp	r7, r5
 800751c:	d003      	beq.n	8007526 <_dtoa_r+0x4be>
 800751e:	4639      	mov	r1, r7
 8007520:	4648      	mov	r0, r9
 8007522:	f000 fcb3 	bl	8007e8c <_Bfree>
 8007526:	4629      	mov	r1, r5
 8007528:	4648      	mov	r0, r9
 800752a:	f000 fcaf 	bl	8007e8c <_Bfree>
 800752e:	e0b0      	b.n	8007692 <_dtoa_r+0x62a>
 8007530:	07e2      	lsls	r2, r4, #31
 8007532:	d505      	bpl.n	8007540 <_dtoa_r+0x4d8>
 8007534:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007538:	f7fc ffce 	bl	80044d8 <__aeabi_dmul>
 800753c:	2301      	movs	r3, #1
 800753e:	3601      	adds	r6, #1
 8007540:	1064      	asrs	r4, r4, #1
 8007542:	3508      	adds	r5, #8
 8007544:	e762      	b.n	800740c <_dtoa_r+0x3a4>
 8007546:	2602      	movs	r6, #2
 8007548:	e765      	b.n	8007416 <_dtoa_r+0x3ae>
 800754a:	46b8      	mov	r8, r7
 800754c:	9c08      	ldr	r4, [sp, #32]
 800754e:	e784      	b.n	800745a <_dtoa_r+0x3f2>
 8007550:	4b27      	ldr	r3, [pc, #156]	@ (80075f0 <_dtoa_r+0x588>)
 8007552:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007554:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007558:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800755c:	4454      	add	r4, sl
 800755e:	2900      	cmp	r1, #0
 8007560:	d054      	beq.n	800760c <_dtoa_r+0x5a4>
 8007562:	2000      	movs	r0, #0
 8007564:	4928      	ldr	r1, [pc, #160]	@ (8007608 <_dtoa_r+0x5a0>)
 8007566:	f7fd f8e1 	bl	800472c <__aeabi_ddiv>
 800756a:	4633      	mov	r3, r6
 800756c:	462a      	mov	r2, r5
 800756e:	f7fc fdfb 	bl	8004168 <__aeabi_dsub>
 8007572:	4656      	mov	r6, sl
 8007574:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007578:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800757c:	f7fd fa5c 	bl	8004a38 <__aeabi_d2iz>
 8007580:	4605      	mov	r5, r0
 8007582:	f7fc ff3f 	bl	8004404 <__aeabi_i2d>
 8007586:	4602      	mov	r2, r0
 8007588:	460b      	mov	r3, r1
 800758a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800758e:	f7fc fdeb 	bl	8004168 <__aeabi_dsub>
 8007592:	4602      	mov	r2, r0
 8007594:	460b      	mov	r3, r1
 8007596:	3530      	adds	r5, #48	@ 0x30
 8007598:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800759c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80075a0:	f806 5b01 	strb.w	r5, [r6], #1
 80075a4:	f7fd fa0a 	bl	80049bc <__aeabi_dcmplt>
 80075a8:	2800      	cmp	r0, #0
 80075aa:	d172      	bne.n	8007692 <_dtoa_r+0x62a>
 80075ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80075b0:	2000      	movs	r0, #0
 80075b2:	4911      	ldr	r1, [pc, #68]	@ (80075f8 <_dtoa_r+0x590>)
 80075b4:	f7fc fdd8 	bl	8004168 <__aeabi_dsub>
 80075b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80075bc:	f7fd f9fe 	bl	80049bc <__aeabi_dcmplt>
 80075c0:	2800      	cmp	r0, #0
 80075c2:	f040 80b4 	bne.w	800772e <_dtoa_r+0x6c6>
 80075c6:	42a6      	cmp	r6, r4
 80075c8:	f43f af70 	beq.w	80074ac <_dtoa_r+0x444>
 80075cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80075d0:	2200      	movs	r2, #0
 80075d2:	4b0a      	ldr	r3, [pc, #40]	@ (80075fc <_dtoa_r+0x594>)
 80075d4:	f7fc ff80 	bl	80044d8 <__aeabi_dmul>
 80075d8:	2200      	movs	r2, #0
 80075da:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80075de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075e2:	4b06      	ldr	r3, [pc, #24]	@ (80075fc <_dtoa_r+0x594>)
 80075e4:	f7fc ff78 	bl	80044d8 <__aeabi_dmul>
 80075e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80075ec:	e7c4      	b.n	8007578 <_dtoa_r+0x510>
 80075ee:	bf00      	nop
 80075f0:	08009250 	.word	0x08009250
 80075f4:	08009228 	.word	0x08009228
 80075f8:	3ff00000 	.word	0x3ff00000
 80075fc:	40240000 	.word	0x40240000
 8007600:	401c0000 	.word	0x401c0000
 8007604:	40140000 	.word	0x40140000
 8007608:	3fe00000 	.word	0x3fe00000
 800760c:	4631      	mov	r1, r6
 800760e:	4628      	mov	r0, r5
 8007610:	f7fc ff62 	bl	80044d8 <__aeabi_dmul>
 8007614:	4656      	mov	r6, sl
 8007616:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800761a:	9413      	str	r4, [sp, #76]	@ 0x4c
 800761c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007620:	f7fd fa0a 	bl	8004a38 <__aeabi_d2iz>
 8007624:	4605      	mov	r5, r0
 8007626:	f7fc feed 	bl	8004404 <__aeabi_i2d>
 800762a:	4602      	mov	r2, r0
 800762c:	460b      	mov	r3, r1
 800762e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007632:	f7fc fd99 	bl	8004168 <__aeabi_dsub>
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	3530      	adds	r5, #48	@ 0x30
 800763c:	f806 5b01 	strb.w	r5, [r6], #1
 8007640:	42a6      	cmp	r6, r4
 8007642:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007646:	f04f 0200 	mov.w	r2, #0
 800764a:	d124      	bne.n	8007696 <_dtoa_r+0x62e>
 800764c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007650:	4bae      	ldr	r3, [pc, #696]	@ (800790c <_dtoa_r+0x8a4>)
 8007652:	f7fc fd8b 	bl	800416c <__adddf3>
 8007656:	4602      	mov	r2, r0
 8007658:	460b      	mov	r3, r1
 800765a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800765e:	f7fd f9cb 	bl	80049f8 <__aeabi_dcmpgt>
 8007662:	2800      	cmp	r0, #0
 8007664:	d163      	bne.n	800772e <_dtoa_r+0x6c6>
 8007666:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800766a:	2000      	movs	r0, #0
 800766c:	49a7      	ldr	r1, [pc, #668]	@ (800790c <_dtoa_r+0x8a4>)
 800766e:	f7fc fd7b 	bl	8004168 <__aeabi_dsub>
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800767a:	f7fd f99f 	bl	80049bc <__aeabi_dcmplt>
 800767e:	2800      	cmp	r0, #0
 8007680:	f43f af14 	beq.w	80074ac <_dtoa_r+0x444>
 8007684:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007686:	1e73      	subs	r3, r6, #1
 8007688:	9313      	str	r3, [sp, #76]	@ 0x4c
 800768a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800768e:	2b30      	cmp	r3, #48	@ 0x30
 8007690:	d0f8      	beq.n	8007684 <_dtoa_r+0x61c>
 8007692:	4647      	mov	r7, r8
 8007694:	e03b      	b.n	800770e <_dtoa_r+0x6a6>
 8007696:	4b9e      	ldr	r3, [pc, #632]	@ (8007910 <_dtoa_r+0x8a8>)
 8007698:	f7fc ff1e 	bl	80044d8 <__aeabi_dmul>
 800769c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80076a0:	e7bc      	b.n	800761c <_dtoa_r+0x5b4>
 80076a2:	4656      	mov	r6, sl
 80076a4:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 80076a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076ac:	4620      	mov	r0, r4
 80076ae:	4629      	mov	r1, r5
 80076b0:	f7fd f83c 	bl	800472c <__aeabi_ddiv>
 80076b4:	f7fd f9c0 	bl	8004a38 <__aeabi_d2iz>
 80076b8:	4680      	mov	r8, r0
 80076ba:	f7fc fea3 	bl	8004404 <__aeabi_i2d>
 80076be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076c2:	f7fc ff09 	bl	80044d8 <__aeabi_dmul>
 80076c6:	4602      	mov	r2, r0
 80076c8:	460b      	mov	r3, r1
 80076ca:	4620      	mov	r0, r4
 80076cc:	4629      	mov	r1, r5
 80076ce:	f7fc fd4b 	bl	8004168 <__aeabi_dsub>
 80076d2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80076d6:	9d08      	ldr	r5, [sp, #32]
 80076d8:	f806 4b01 	strb.w	r4, [r6], #1
 80076dc:	eba6 040a 	sub.w	r4, r6, sl
 80076e0:	42a5      	cmp	r5, r4
 80076e2:	4602      	mov	r2, r0
 80076e4:	460b      	mov	r3, r1
 80076e6:	d133      	bne.n	8007750 <_dtoa_r+0x6e8>
 80076e8:	f7fc fd40 	bl	800416c <__adddf3>
 80076ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076f0:	4604      	mov	r4, r0
 80076f2:	460d      	mov	r5, r1
 80076f4:	f7fd f980 	bl	80049f8 <__aeabi_dcmpgt>
 80076f8:	b9c0      	cbnz	r0, 800772c <_dtoa_r+0x6c4>
 80076fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076fe:	4620      	mov	r0, r4
 8007700:	4629      	mov	r1, r5
 8007702:	f7fd f951 	bl	80049a8 <__aeabi_dcmpeq>
 8007706:	b110      	cbz	r0, 800770e <_dtoa_r+0x6a6>
 8007708:	f018 0f01 	tst.w	r8, #1
 800770c:	d10e      	bne.n	800772c <_dtoa_r+0x6c4>
 800770e:	4648      	mov	r0, r9
 8007710:	9903      	ldr	r1, [sp, #12]
 8007712:	f000 fbbb 	bl	8007e8c <_Bfree>
 8007716:	2300      	movs	r3, #0
 8007718:	7033      	strb	r3, [r6, #0]
 800771a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800771c:	3701      	adds	r7, #1
 800771e:	601f      	str	r7, [r3, #0]
 8007720:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007722:	2b00      	cmp	r3, #0
 8007724:	f000 824b 	beq.w	8007bbe <_dtoa_r+0xb56>
 8007728:	601e      	str	r6, [r3, #0]
 800772a:	e248      	b.n	8007bbe <_dtoa_r+0xb56>
 800772c:	46b8      	mov	r8, r7
 800772e:	4633      	mov	r3, r6
 8007730:	461e      	mov	r6, r3
 8007732:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007736:	2a39      	cmp	r2, #57	@ 0x39
 8007738:	d106      	bne.n	8007748 <_dtoa_r+0x6e0>
 800773a:	459a      	cmp	sl, r3
 800773c:	d1f8      	bne.n	8007730 <_dtoa_r+0x6c8>
 800773e:	2230      	movs	r2, #48	@ 0x30
 8007740:	f108 0801 	add.w	r8, r8, #1
 8007744:	f88a 2000 	strb.w	r2, [sl]
 8007748:	781a      	ldrb	r2, [r3, #0]
 800774a:	3201      	adds	r2, #1
 800774c:	701a      	strb	r2, [r3, #0]
 800774e:	e7a0      	b.n	8007692 <_dtoa_r+0x62a>
 8007750:	2200      	movs	r2, #0
 8007752:	4b6f      	ldr	r3, [pc, #444]	@ (8007910 <_dtoa_r+0x8a8>)
 8007754:	f7fc fec0 	bl	80044d8 <__aeabi_dmul>
 8007758:	2200      	movs	r2, #0
 800775a:	2300      	movs	r3, #0
 800775c:	4604      	mov	r4, r0
 800775e:	460d      	mov	r5, r1
 8007760:	f7fd f922 	bl	80049a8 <__aeabi_dcmpeq>
 8007764:	2800      	cmp	r0, #0
 8007766:	d09f      	beq.n	80076a8 <_dtoa_r+0x640>
 8007768:	e7d1      	b.n	800770e <_dtoa_r+0x6a6>
 800776a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800776c:	2a00      	cmp	r2, #0
 800776e:	f000 80ea 	beq.w	8007946 <_dtoa_r+0x8de>
 8007772:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007774:	2a01      	cmp	r2, #1
 8007776:	f300 80cd 	bgt.w	8007914 <_dtoa_r+0x8ac>
 800777a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800777c:	2a00      	cmp	r2, #0
 800777e:	f000 80c1 	beq.w	8007904 <_dtoa_r+0x89c>
 8007782:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007786:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007788:	9e04      	ldr	r6, [sp, #16]
 800778a:	9a04      	ldr	r2, [sp, #16]
 800778c:	2101      	movs	r1, #1
 800778e:	441a      	add	r2, r3
 8007790:	9204      	str	r2, [sp, #16]
 8007792:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007794:	4648      	mov	r0, r9
 8007796:	441a      	add	r2, r3
 8007798:	9209      	str	r2, [sp, #36]	@ 0x24
 800779a:	f000 fc2b 	bl	8007ff4 <__i2b>
 800779e:	4605      	mov	r5, r0
 80077a0:	b166      	cbz	r6, 80077bc <_dtoa_r+0x754>
 80077a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	dd09      	ble.n	80077bc <_dtoa_r+0x754>
 80077a8:	42b3      	cmp	r3, r6
 80077aa:	bfa8      	it	ge
 80077ac:	4633      	movge	r3, r6
 80077ae:	9a04      	ldr	r2, [sp, #16]
 80077b0:	1af6      	subs	r6, r6, r3
 80077b2:	1ad2      	subs	r2, r2, r3
 80077b4:	9204      	str	r2, [sp, #16]
 80077b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	9309      	str	r3, [sp, #36]	@ 0x24
 80077bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077be:	b30b      	cbz	r3, 8007804 <_dtoa_r+0x79c>
 80077c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	f000 80c6 	beq.w	8007954 <_dtoa_r+0x8ec>
 80077c8:	2c00      	cmp	r4, #0
 80077ca:	f000 80c0 	beq.w	800794e <_dtoa_r+0x8e6>
 80077ce:	4629      	mov	r1, r5
 80077d0:	4622      	mov	r2, r4
 80077d2:	4648      	mov	r0, r9
 80077d4:	f000 fcc6 	bl	8008164 <__pow5mult>
 80077d8:	9a03      	ldr	r2, [sp, #12]
 80077da:	4601      	mov	r1, r0
 80077dc:	4605      	mov	r5, r0
 80077de:	4648      	mov	r0, r9
 80077e0:	f000 fc1e 	bl	8008020 <__multiply>
 80077e4:	9903      	ldr	r1, [sp, #12]
 80077e6:	4680      	mov	r8, r0
 80077e8:	4648      	mov	r0, r9
 80077ea:	f000 fb4f 	bl	8007e8c <_Bfree>
 80077ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077f0:	1b1b      	subs	r3, r3, r4
 80077f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80077f4:	f000 80b1 	beq.w	800795a <_dtoa_r+0x8f2>
 80077f8:	4641      	mov	r1, r8
 80077fa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80077fc:	4648      	mov	r0, r9
 80077fe:	f000 fcb1 	bl	8008164 <__pow5mult>
 8007802:	9003      	str	r0, [sp, #12]
 8007804:	2101      	movs	r1, #1
 8007806:	4648      	mov	r0, r9
 8007808:	f000 fbf4 	bl	8007ff4 <__i2b>
 800780c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800780e:	4604      	mov	r4, r0
 8007810:	2b00      	cmp	r3, #0
 8007812:	f000 81d8 	beq.w	8007bc6 <_dtoa_r+0xb5e>
 8007816:	461a      	mov	r2, r3
 8007818:	4601      	mov	r1, r0
 800781a:	4648      	mov	r0, r9
 800781c:	f000 fca2 	bl	8008164 <__pow5mult>
 8007820:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007822:	4604      	mov	r4, r0
 8007824:	2b01      	cmp	r3, #1
 8007826:	f300 809f 	bgt.w	8007968 <_dtoa_r+0x900>
 800782a:	9b06      	ldr	r3, [sp, #24]
 800782c:	2b00      	cmp	r3, #0
 800782e:	f040 8097 	bne.w	8007960 <_dtoa_r+0x8f8>
 8007832:	9b07      	ldr	r3, [sp, #28]
 8007834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007838:	2b00      	cmp	r3, #0
 800783a:	f040 8093 	bne.w	8007964 <_dtoa_r+0x8fc>
 800783e:	9b07      	ldr	r3, [sp, #28]
 8007840:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007844:	0d1b      	lsrs	r3, r3, #20
 8007846:	051b      	lsls	r3, r3, #20
 8007848:	b133      	cbz	r3, 8007858 <_dtoa_r+0x7f0>
 800784a:	9b04      	ldr	r3, [sp, #16]
 800784c:	3301      	adds	r3, #1
 800784e:	9304      	str	r3, [sp, #16]
 8007850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007852:	3301      	adds	r3, #1
 8007854:	9309      	str	r3, [sp, #36]	@ 0x24
 8007856:	2301      	movs	r3, #1
 8007858:	930a      	str	r3, [sp, #40]	@ 0x28
 800785a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800785c:	2b00      	cmp	r3, #0
 800785e:	f000 81b8 	beq.w	8007bd2 <_dtoa_r+0xb6a>
 8007862:	6923      	ldr	r3, [r4, #16]
 8007864:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007868:	6918      	ldr	r0, [r3, #16]
 800786a:	f000 fb77 	bl	8007f5c <__hi0bits>
 800786e:	f1c0 0020 	rsb	r0, r0, #32
 8007872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007874:	4418      	add	r0, r3
 8007876:	f010 001f 	ands.w	r0, r0, #31
 800787a:	f000 8082 	beq.w	8007982 <_dtoa_r+0x91a>
 800787e:	f1c0 0320 	rsb	r3, r0, #32
 8007882:	2b04      	cmp	r3, #4
 8007884:	dd73      	ble.n	800796e <_dtoa_r+0x906>
 8007886:	9b04      	ldr	r3, [sp, #16]
 8007888:	f1c0 001c 	rsb	r0, r0, #28
 800788c:	4403      	add	r3, r0
 800788e:	9304      	str	r3, [sp, #16]
 8007890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007892:	4406      	add	r6, r0
 8007894:	4403      	add	r3, r0
 8007896:	9309      	str	r3, [sp, #36]	@ 0x24
 8007898:	9b04      	ldr	r3, [sp, #16]
 800789a:	2b00      	cmp	r3, #0
 800789c:	dd05      	ble.n	80078aa <_dtoa_r+0x842>
 800789e:	461a      	mov	r2, r3
 80078a0:	4648      	mov	r0, r9
 80078a2:	9903      	ldr	r1, [sp, #12]
 80078a4:	f000 fcb8 	bl	8008218 <__lshift>
 80078a8:	9003      	str	r0, [sp, #12]
 80078aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	dd05      	ble.n	80078bc <_dtoa_r+0x854>
 80078b0:	4621      	mov	r1, r4
 80078b2:	461a      	mov	r2, r3
 80078b4:	4648      	mov	r0, r9
 80078b6:	f000 fcaf 	bl	8008218 <__lshift>
 80078ba:	4604      	mov	r4, r0
 80078bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d061      	beq.n	8007986 <_dtoa_r+0x91e>
 80078c2:	4621      	mov	r1, r4
 80078c4:	9803      	ldr	r0, [sp, #12]
 80078c6:	f000 fd13 	bl	80082f0 <__mcmp>
 80078ca:	2800      	cmp	r0, #0
 80078cc:	da5b      	bge.n	8007986 <_dtoa_r+0x91e>
 80078ce:	2300      	movs	r3, #0
 80078d0:	220a      	movs	r2, #10
 80078d2:	4648      	mov	r0, r9
 80078d4:	9903      	ldr	r1, [sp, #12]
 80078d6:	f000 fafb 	bl	8007ed0 <__multadd>
 80078da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80078dc:	f107 38ff 	add.w	r8, r7, #4294967295
 80078e0:	9003      	str	r0, [sp, #12]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	f000 8177 	beq.w	8007bd6 <_dtoa_r+0xb6e>
 80078e8:	4629      	mov	r1, r5
 80078ea:	2300      	movs	r3, #0
 80078ec:	220a      	movs	r2, #10
 80078ee:	4648      	mov	r0, r9
 80078f0:	f000 faee 	bl	8007ed0 <__multadd>
 80078f4:	f1bb 0f00 	cmp.w	fp, #0
 80078f8:	4605      	mov	r5, r0
 80078fa:	dc6f      	bgt.n	80079dc <_dtoa_r+0x974>
 80078fc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80078fe:	2b02      	cmp	r3, #2
 8007900:	dc49      	bgt.n	8007996 <_dtoa_r+0x92e>
 8007902:	e06b      	b.n	80079dc <_dtoa_r+0x974>
 8007904:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007906:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800790a:	e73c      	b.n	8007786 <_dtoa_r+0x71e>
 800790c:	3fe00000 	.word	0x3fe00000
 8007910:	40240000 	.word	0x40240000
 8007914:	9b08      	ldr	r3, [sp, #32]
 8007916:	1e5c      	subs	r4, r3, #1
 8007918:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800791a:	42a3      	cmp	r3, r4
 800791c:	db09      	blt.n	8007932 <_dtoa_r+0x8ca>
 800791e:	1b1c      	subs	r4, r3, r4
 8007920:	9b08      	ldr	r3, [sp, #32]
 8007922:	2b00      	cmp	r3, #0
 8007924:	f6bf af30 	bge.w	8007788 <_dtoa_r+0x720>
 8007928:	9b04      	ldr	r3, [sp, #16]
 800792a:	9a08      	ldr	r2, [sp, #32]
 800792c:	1a9e      	subs	r6, r3, r2
 800792e:	2300      	movs	r3, #0
 8007930:	e72b      	b.n	800778a <_dtoa_r+0x722>
 8007932:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007934:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007936:	1ae3      	subs	r3, r4, r3
 8007938:	441a      	add	r2, r3
 800793a:	940a      	str	r4, [sp, #40]	@ 0x28
 800793c:	9e04      	ldr	r6, [sp, #16]
 800793e:	2400      	movs	r4, #0
 8007940:	9b08      	ldr	r3, [sp, #32]
 8007942:	920e      	str	r2, [sp, #56]	@ 0x38
 8007944:	e721      	b.n	800778a <_dtoa_r+0x722>
 8007946:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007948:	9e04      	ldr	r6, [sp, #16]
 800794a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800794c:	e728      	b.n	80077a0 <_dtoa_r+0x738>
 800794e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007952:	e751      	b.n	80077f8 <_dtoa_r+0x790>
 8007954:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007956:	9903      	ldr	r1, [sp, #12]
 8007958:	e750      	b.n	80077fc <_dtoa_r+0x794>
 800795a:	f8cd 800c 	str.w	r8, [sp, #12]
 800795e:	e751      	b.n	8007804 <_dtoa_r+0x79c>
 8007960:	2300      	movs	r3, #0
 8007962:	e779      	b.n	8007858 <_dtoa_r+0x7f0>
 8007964:	9b06      	ldr	r3, [sp, #24]
 8007966:	e777      	b.n	8007858 <_dtoa_r+0x7f0>
 8007968:	2300      	movs	r3, #0
 800796a:	930a      	str	r3, [sp, #40]	@ 0x28
 800796c:	e779      	b.n	8007862 <_dtoa_r+0x7fa>
 800796e:	d093      	beq.n	8007898 <_dtoa_r+0x830>
 8007970:	9a04      	ldr	r2, [sp, #16]
 8007972:	331c      	adds	r3, #28
 8007974:	441a      	add	r2, r3
 8007976:	9204      	str	r2, [sp, #16]
 8007978:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800797a:	441e      	add	r6, r3
 800797c:	441a      	add	r2, r3
 800797e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007980:	e78a      	b.n	8007898 <_dtoa_r+0x830>
 8007982:	4603      	mov	r3, r0
 8007984:	e7f4      	b.n	8007970 <_dtoa_r+0x908>
 8007986:	9b08      	ldr	r3, [sp, #32]
 8007988:	46b8      	mov	r8, r7
 800798a:	2b00      	cmp	r3, #0
 800798c:	dc20      	bgt.n	80079d0 <_dtoa_r+0x968>
 800798e:	469b      	mov	fp, r3
 8007990:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007992:	2b02      	cmp	r3, #2
 8007994:	dd1e      	ble.n	80079d4 <_dtoa_r+0x96c>
 8007996:	f1bb 0f00 	cmp.w	fp, #0
 800799a:	f47f adb1 	bne.w	8007500 <_dtoa_r+0x498>
 800799e:	4621      	mov	r1, r4
 80079a0:	465b      	mov	r3, fp
 80079a2:	2205      	movs	r2, #5
 80079a4:	4648      	mov	r0, r9
 80079a6:	f000 fa93 	bl	8007ed0 <__multadd>
 80079aa:	4601      	mov	r1, r0
 80079ac:	4604      	mov	r4, r0
 80079ae:	9803      	ldr	r0, [sp, #12]
 80079b0:	f000 fc9e 	bl	80082f0 <__mcmp>
 80079b4:	2800      	cmp	r0, #0
 80079b6:	f77f ada3 	ble.w	8007500 <_dtoa_r+0x498>
 80079ba:	4656      	mov	r6, sl
 80079bc:	2331      	movs	r3, #49	@ 0x31
 80079be:	f108 0801 	add.w	r8, r8, #1
 80079c2:	f806 3b01 	strb.w	r3, [r6], #1
 80079c6:	e59f      	b.n	8007508 <_dtoa_r+0x4a0>
 80079c8:	46b8      	mov	r8, r7
 80079ca:	9c08      	ldr	r4, [sp, #32]
 80079cc:	4625      	mov	r5, r4
 80079ce:	e7f4      	b.n	80079ba <_dtoa_r+0x952>
 80079d0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80079d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	f000 8101 	beq.w	8007bde <_dtoa_r+0xb76>
 80079dc:	2e00      	cmp	r6, #0
 80079de:	dd05      	ble.n	80079ec <_dtoa_r+0x984>
 80079e0:	4629      	mov	r1, r5
 80079e2:	4632      	mov	r2, r6
 80079e4:	4648      	mov	r0, r9
 80079e6:	f000 fc17 	bl	8008218 <__lshift>
 80079ea:	4605      	mov	r5, r0
 80079ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d05c      	beq.n	8007aac <_dtoa_r+0xa44>
 80079f2:	4648      	mov	r0, r9
 80079f4:	6869      	ldr	r1, [r5, #4]
 80079f6:	f000 fa09 	bl	8007e0c <_Balloc>
 80079fa:	4606      	mov	r6, r0
 80079fc:	b928      	cbnz	r0, 8007a0a <_dtoa_r+0x9a2>
 80079fe:	4602      	mov	r2, r0
 8007a00:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007a04:	4b80      	ldr	r3, [pc, #512]	@ (8007c08 <_dtoa_r+0xba0>)
 8007a06:	f7ff bb43 	b.w	8007090 <_dtoa_r+0x28>
 8007a0a:	692a      	ldr	r2, [r5, #16]
 8007a0c:	f105 010c 	add.w	r1, r5, #12
 8007a10:	3202      	adds	r2, #2
 8007a12:	0092      	lsls	r2, r2, #2
 8007a14:	300c      	adds	r0, #12
 8007a16:	f000 ff9d 	bl	8008954 <memcpy>
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	4631      	mov	r1, r6
 8007a1e:	4648      	mov	r0, r9
 8007a20:	f000 fbfa 	bl	8008218 <__lshift>
 8007a24:	462f      	mov	r7, r5
 8007a26:	4605      	mov	r5, r0
 8007a28:	f10a 0301 	add.w	r3, sl, #1
 8007a2c:	9304      	str	r3, [sp, #16]
 8007a2e:	eb0a 030b 	add.w	r3, sl, fp
 8007a32:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a34:	9b06      	ldr	r3, [sp, #24]
 8007a36:	f003 0301 	and.w	r3, r3, #1
 8007a3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a3c:	9b04      	ldr	r3, [sp, #16]
 8007a3e:	4621      	mov	r1, r4
 8007a40:	9803      	ldr	r0, [sp, #12]
 8007a42:	f103 3bff 	add.w	fp, r3, #4294967295
 8007a46:	f7ff fa86 	bl	8006f56 <quorem>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	4639      	mov	r1, r7
 8007a4e:	3330      	adds	r3, #48	@ 0x30
 8007a50:	9006      	str	r0, [sp, #24]
 8007a52:	9803      	ldr	r0, [sp, #12]
 8007a54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007a56:	f000 fc4b 	bl	80082f0 <__mcmp>
 8007a5a:	462a      	mov	r2, r5
 8007a5c:	9008      	str	r0, [sp, #32]
 8007a5e:	4621      	mov	r1, r4
 8007a60:	4648      	mov	r0, r9
 8007a62:	f000 fc61 	bl	8008328 <__mdiff>
 8007a66:	68c2      	ldr	r2, [r0, #12]
 8007a68:	4606      	mov	r6, r0
 8007a6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a6c:	bb02      	cbnz	r2, 8007ab0 <_dtoa_r+0xa48>
 8007a6e:	4601      	mov	r1, r0
 8007a70:	9803      	ldr	r0, [sp, #12]
 8007a72:	f000 fc3d 	bl	80082f0 <__mcmp>
 8007a76:	4602      	mov	r2, r0
 8007a78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a7a:	4631      	mov	r1, r6
 8007a7c:	4648      	mov	r0, r9
 8007a7e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8007a82:	f000 fa03 	bl	8007e8c <_Bfree>
 8007a86:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007a88:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007a8a:	9e04      	ldr	r6, [sp, #16]
 8007a8c:	ea42 0103 	orr.w	r1, r2, r3
 8007a90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a92:	4319      	orrs	r1, r3
 8007a94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a96:	d10d      	bne.n	8007ab4 <_dtoa_r+0xa4c>
 8007a98:	2b39      	cmp	r3, #57	@ 0x39
 8007a9a:	d027      	beq.n	8007aec <_dtoa_r+0xa84>
 8007a9c:	9a08      	ldr	r2, [sp, #32]
 8007a9e:	2a00      	cmp	r2, #0
 8007aa0:	dd01      	ble.n	8007aa6 <_dtoa_r+0xa3e>
 8007aa2:	9b06      	ldr	r3, [sp, #24]
 8007aa4:	3331      	adds	r3, #49	@ 0x31
 8007aa6:	f88b 3000 	strb.w	r3, [fp]
 8007aaa:	e52e      	b.n	800750a <_dtoa_r+0x4a2>
 8007aac:	4628      	mov	r0, r5
 8007aae:	e7b9      	b.n	8007a24 <_dtoa_r+0x9bc>
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	e7e2      	b.n	8007a7a <_dtoa_r+0xa12>
 8007ab4:	9908      	ldr	r1, [sp, #32]
 8007ab6:	2900      	cmp	r1, #0
 8007ab8:	db04      	blt.n	8007ac4 <_dtoa_r+0xa5c>
 8007aba:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8007abc:	4301      	orrs	r1, r0
 8007abe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ac0:	4301      	orrs	r1, r0
 8007ac2:	d120      	bne.n	8007b06 <_dtoa_r+0xa9e>
 8007ac4:	2a00      	cmp	r2, #0
 8007ac6:	ddee      	ble.n	8007aa6 <_dtoa_r+0xa3e>
 8007ac8:	2201      	movs	r2, #1
 8007aca:	9903      	ldr	r1, [sp, #12]
 8007acc:	4648      	mov	r0, r9
 8007ace:	9304      	str	r3, [sp, #16]
 8007ad0:	f000 fba2 	bl	8008218 <__lshift>
 8007ad4:	4621      	mov	r1, r4
 8007ad6:	9003      	str	r0, [sp, #12]
 8007ad8:	f000 fc0a 	bl	80082f0 <__mcmp>
 8007adc:	2800      	cmp	r0, #0
 8007ade:	9b04      	ldr	r3, [sp, #16]
 8007ae0:	dc02      	bgt.n	8007ae8 <_dtoa_r+0xa80>
 8007ae2:	d1e0      	bne.n	8007aa6 <_dtoa_r+0xa3e>
 8007ae4:	07da      	lsls	r2, r3, #31
 8007ae6:	d5de      	bpl.n	8007aa6 <_dtoa_r+0xa3e>
 8007ae8:	2b39      	cmp	r3, #57	@ 0x39
 8007aea:	d1da      	bne.n	8007aa2 <_dtoa_r+0xa3a>
 8007aec:	2339      	movs	r3, #57	@ 0x39
 8007aee:	f88b 3000 	strb.w	r3, [fp]
 8007af2:	4633      	mov	r3, r6
 8007af4:	461e      	mov	r6, r3
 8007af6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007afa:	3b01      	subs	r3, #1
 8007afc:	2a39      	cmp	r2, #57	@ 0x39
 8007afe:	d04e      	beq.n	8007b9e <_dtoa_r+0xb36>
 8007b00:	3201      	adds	r2, #1
 8007b02:	701a      	strb	r2, [r3, #0]
 8007b04:	e501      	b.n	800750a <_dtoa_r+0x4a2>
 8007b06:	2a00      	cmp	r2, #0
 8007b08:	dd03      	ble.n	8007b12 <_dtoa_r+0xaaa>
 8007b0a:	2b39      	cmp	r3, #57	@ 0x39
 8007b0c:	d0ee      	beq.n	8007aec <_dtoa_r+0xa84>
 8007b0e:	3301      	adds	r3, #1
 8007b10:	e7c9      	b.n	8007aa6 <_dtoa_r+0xa3e>
 8007b12:	9a04      	ldr	r2, [sp, #16]
 8007b14:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b16:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007b1a:	428a      	cmp	r2, r1
 8007b1c:	d028      	beq.n	8007b70 <_dtoa_r+0xb08>
 8007b1e:	2300      	movs	r3, #0
 8007b20:	220a      	movs	r2, #10
 8007b22:	9903      	ldr	r1, [sp, #12]
 8007b24:	4648      	mov	r0, r9
 8007b26:	f000 f9d3 	bl	8007ed0 <__multadd>
 8007b2a:	42af      	cmp	r7, r5
 8007b2c:	9003      	str	r0, [sp, #12]
 8007b2e:	f04f 0300 	mov.w	r3, #0
 8007b32:	f04f 020a 	mov.w	r2, #10
 8007b36:	4639      	mov	r1, r7
 8007b38:	4648      	mov	r0, r9
 8007b3a:	d107      	bne.n	8007b4c <_dtoa_r+0xae4>
 8007b3c:	f000 f9c8 	bl	8007ed0 <__multadd>
 8007b40:	4607      	mov	r7, r0
 8007b42:	4605      	mov	r5, r0
 8007b44:	9b04      	ldr	r3, [sp, #16]
 8007b46:	3301      	adds	r3, #1
 8007b48:	9304      	str	r3, [sp, #16]
 8007b4a:	e777      	b.n	8007a3c <_dtoa_r+0x9d4>
 8007b4c:	f000 f9c0 	bl	8007ed0 <__multadd>
 8007b50:	4629      	mov	r1, r5
 8007b52:	4607      	mov	r7, r0
 8007b54:	2300      	movs	r3, #0
 8007b56:	220a      	movs	r2, #10
 8007b58:	4648      	mov	r0, r9
 8007b5a:	f000 f9b9 	bl	8007ed0 <__multadd>
 8007b5e:	4605      	mov	r5, r0
 8007b60:	e7f0      	b.n	8007b44 <_dtoa_r+0xadc>
 8007b62:	f1bb 0f00 	cmp.w	fp, #0
 8007b66:	bfcc      	ite	gt
 8007b68:	465e      	movgt	r6, fp
 8007b6a:	2601      	movle	r6, #1
 8007b6c:	2700      	movs	r7, #0
 8007b6e:	4456      	add	r6, sl
 8007b70:	2201      	movs	r2, #1
 8007b72:	9903      	ldr	r1, [sp, #12]
 8007b74:	4648      	mov	r0, r9
 8007b76:	9304      	str	r3, [sp, #16]
 8007b78:	f000 fb4e 	bl	8008218 <__lshift>
 8007b7c:	4621      	mov	r1, r4
 8007b7e:	9003      	str	r0, [sp, #12]
 8007b80:	f000 fbb6 	bl	80082f0 <__mcmp>
 8007b84:	2800      	cmp	r0, #0
 8007b86:	dcb4      	bgt.n	8007af2 <_dtoa_r+0xa8a>
 8007b88:	d102      	bne.n	8007b90 <_dtoa_r+0xb28>
 8007b8a:	9b04      	ldr	r3, [sp, #16]
 8007b8c:	07db      	lsls	r3, r3, #31
 8007b8e:	d4b0      	bmi.n	8007af2 <_dtoa_r+0xa8a>
 8007b90:	4633      	mov	r3, r6
 8007b92:	461e      	mov	r6, r3
 8007b94:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b98:	2a30      	cmp	r2, #48	@ 0x30
 8007b9a:	d0fa      	beq.n	8007b92 <_dtoa_r+0xb2a>
 8007b9c:	e4b5      	b.n	800750a <_dtoa_r+0x4a2>
 8007b9e:	459a      	cmp	sl, r3
 8007ba0:	d1a8      	bne.n	8007af4 <_dtoa_r+0xa8c>
 8007ba2:	2331      	movs	r3, #49	@ 0x31
 8007ba4:	f108 0801 	add.w	r8, r8, #1
 8007ba8:	f88a 3000 	strb.w	r3, [sl]
 8007bac:	e4ad      	b.n	800750a <_dtoa_r+0x4a2>
 8007bae:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007bb0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007c0c <_dtoa_r+0xba4>
 8007bb4:	b11b      	cbz	r3, 8007bbe <_dtoa_r+0xb56>
 8007bb6:	f10a 0308 	add.w	r3, sl, #8
 8007bba:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007bbc:	6013      	str	r3, [r2, #0]
 8007bbe:	4650      	mov	r0, sl
 8007bc0:	b017      	add	sp, #92	@ 0x5c
 8007bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bc6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	f77f ae2e 	ble.w	800782a <_dtoa_r+0x7c2>
 8007bce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007bd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bd2:	2001      	movs	r0, #1
 8007bd4:	e64d      	b.n	8007872 <_dtoa_r+0x80a>
 8007bd6:	f1bb 0f00 	cmp.w	fp, #0
 8007bda:	f77f aed9 	ble.w	8007990 <_dtoa_r+0x928>
 8007bde:	4656      	mov	r6, sl
 8007be0:	4621      	mov	r1, r4
 8007be2:	9803      	ldr	r0, [sp, #12]
 8007be4:	f7ff f9b7 	bl	8006f56 <quorem>
 8007be8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007bec:	f806 3b01 	strb.w	r3, [r6], #1
 8007bf0:	eba6 020a 	sub.w	r2, r6, sl
 8007bf4:	4593      	cmp	fp, r2
 8007bf6:	ddb4      	ble.n	8007b62 <_dtoa_r+0xafa>
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	220a      	movs	r2, #10
 8007bfc:	4648      	mov	r0, r9
 8007bfe:	9903      	ldr	r1, [sp, #12]
 8007c00:	f000 f966 	bl	8007ed0 <__multadd>
 8007c04:	9003      	str	r0, [sp, #12]
 8007c06:	e7eb      	b.n	8007be0 <_dtoa_r+0xb78>
 8007c08:	08009156 	.word	0x08009156
 8007c0c:	080090da 	.word	0x080090da

08007c10 <_free_r>:
 8007c10:	b538      	push	{r3, r4, r5, lr}
 8007c12:	4605      	mov	r5, r0
 8007c14:	2900      	cmp	r1, #0
 8007c16:	d040      	beq.n	8007c9a <_free_r+0x8a>
 8007c18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c1c:	1f0c      	subs	r4, r1, #4
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	bfb8      	it	lt
 8007c22:	18e4      	addlt	r4, r4, r3
 8007c24:	f000 f8e6 	bl	8007df4 <__malloc_lock>
 8007c28:	4a1c      	ldr	r2, [pc, #112]	@ (8007c9c <_free_r+0x8c>)
 8007c2a:	6813      	ldr	r3, [r2, #0]
 8007c2c:	b933      	cbnz	r3, 8007c3c <_free_r+0x2c>
 8007c2e:	6063      	str	r3, [r4, #4]
 8007c30:	6014      	str	r4, [r2, #0]
 8007c32:	4628      	mov	r0, r5
 8007c34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c38:	f000 b8e2 	b.w	8007e00 <__malloc_unlock>
 8007c3c:	42a3      	cmp	r3, r4
 8007c3e:	d908      	bls.n	8007c52 <_free_r+0x42>
 8007c40:	6820      	ldr	r0, [r4, #0]
 8007c42:	1821      	adds	r1, r4, r0
 8007c44:	428b      	cmp	r3, r1
 8007c46:	bf01      	itttt	eq
 8007c48:	6819      	ldreq	r1, [r3, #0]
 8007c4a:	685b      	ldreq	r3, [r3, #4]
 8007c4c:	1809      	addeq	r1, r1, r0
 8007c4e:	6021      	streq	r1, [r4, #0]
 8007c50:	e7ed      	b.n	8007c2e <_free_r+0x1e>
 8007c52:	461a      	mov	r2, r3
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	b10b      	cbz	r3, 8007c5c <_free_r+0x4c>
 8007c58:	42a3      	cmp	r3, r4
 8007c5a:	d9fa      	bls.n	8007c52 <_free_r+0x42>
 8007c5c:	6811      	ldr	r1, [r2, #0]
 8007c5e:	1850      	adds	r0, r2, r1
 8007c60:	42a0      	cmp	r0, r4
 8007c62:	d10b      	bne.n	8007c7c <_free_r+0x6c>
 8007c64:	6820      	ldr	r0, [r4, #0]
 8007c66:	4401      	add	r1, r0
 8007c68:	1850      	adds	r0, r2, r1
 8007c6a:	4283      	cmp	r3, r0
 8007c6c:	6011      	str	r1, [r2, #0]
 8007c6e:	d1e0      	bne.n	8007c32 <_free_r+0x22>
 8007c70:	6818      	ldr	r0, [r3, #0]
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	4408      	add	r0, r1
 8007c76:	6010      	str	r0, [r2, #0]
 8007c78:	6053      	str	r3, [r2, #4]
 8007c7a:	e7da      	b.n	8007c32 <_free_r+0x22>
 8007c7c:	d902      	bls.n	8007c84 <_free_r+0x74>
 8007c7e:	230c      	movs	r3, #12
 8007c80:	602b      	str	r3, [r5, #0]
 8007c82:	e7d6      	b.n	8007c32 <_free_r+0x22>
 8007c84:	6820      	ldr	r0, [r4, #0]
 8007c86:	1821      	adds	r1, r4, r0
 8007c88:	428b      	cmp	r3, r1
 8007c8a:	bf01      	itttt	eq
 8007c8c:	6819      	ldreq	r1, [r3, #0]
 8007c8e:	685b      	ldreq	r3, [r3, #4]
 8007c90:	1809      	addeq	r1, r1, r0
 8007c92:	6021      	streq	r1, [r4, #0]
 8007c94:	6063      	str	r3, [r4, #4]
 8007c96:	6054      	str	r4, [r2, #4]
 8007c98:	e7cb      	b.n	8007c32 <_free_r+0x22>
 8007c9a:	bd38      	pop	{r3, r4, r5, pc}
 8007c9c:	20000388 	.word	0x20000388

08007ca0 <malloc>:
 8007ca0:	4b02      	ldr	r3, [pc, #8]	@ (8007cac <malloc+0xc>)
 8007ca2:	4601      	mov	r1, r0
 8007ca4:	6818      	ldr	r0, [r3, #0]
 8007ca6:	f000 b825 	b.w	8007cf4 <_malloc_r>
 8007caa:	bf00      	nop
 8007cac:	20000018 	.word	0x20000018

08007cb0 <sbrk_aligned>:
 8007cb0:	b570      	push	{r4, r5, r6, lr}
 8007cb2:	4e0f      	ldr	r6, [pc, #60]	@ (8007cf0 <sbrk_aligned+0x40>)
 8007cb4:	460c      	mov	r4, r1
 8007cb6:	6831      	ldr	r1, [r6, #0]
 8007cb8:	4605      	mov	r5, r0
 8007cba:	b911      	cbnz	r1, 8007cc2 <sbrk_aligned+0x12>
 8007cbc:	f000 fe3a 	bl	8008934 <_sbrk_r>
 8007cc0:	6030      	str	r0, [r6, #0]
 8007cc2:	4621      	mov	r1, r4
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	f000 fe35 	bl	8008934 <_sbrk_r>
 8007cca:	1c43      	adds	r3, r0, #1
 8007ccc:	d103      	bne.n	8007cd6 <sbrk_aligned+0x26>
 8007cce:	f04f 34ff 	mov.w	r4, #4294967295
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	bd70      	pop	{r4, r5, r6, pc}
 8007cd6:	1cc4      	adds	r4, r0, #3
 8007cd8:	f024 0403 	bic.w	r4, r4, #3
 8007cdc:	42a0      	cmp	r0, r4
 8007cde:	d0f8      	beq.n	8007cd2 <sbrk_aligned+0x22>
 8007ce0:	1a21      	subs	r1, r4, r0
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	f000 fe26 	bl	8008934 <_sbrk_r>
 8007ce8:	3001      	adds	r0, #1
 8007cea:	d1f2      	bne.n	8007cd2 <sbrk_aligned+0x22>
 8007cec:	e7ef      	b.n	8007cce <sbrk_aligned+0x1e>
 8007cee:	bf00      	nop
 8007cf0:	20000384 	.word	0x20000384

08007cf4 <_malloc_r>:
 8007cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007cf8:	1ccd      	adds	r5, r1, #3
 8007cfa:	f025 0503 	bic.w	r5, r5, #3
 8007cfe:	3508      	adds	r5, #8
 8007d00:	2d0c      	cmp	r5, #12
 8007d02:	bf38      	it	cc
 8007d04:	250c      	movcc	r5, #12
 8007d06:	2d00      	cmp	r5, #0
 8007d08:	4606      	mov	r6, r0
 8007d0a:	db01      	blt.n	8007d10 <_malloc_r+0x1c>
 8007d0c:	42a9      	cmp	r1, r5
 8007d0e:	d904      	bls.n	8007d1a <_malloc_r+0x26>
 8007d10:	230c      	movs	r3, #12
 8007d12:	6033      	str	r3, [r6, #0]
 8007d14:	2000      	movs	r0, #0
 8007d16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007df0 <_malloc_r+0xfc>
 8007d1e:	f000 f869 	bl	8007df4 <__malloc_lock>
 8007d22:	f8d8 3000 	ldr.w	r3, [r8]
 8007d26:	461c      	mov	r4, r3
 8007d28:	bb44      	cbnz	r4, 8007d7c <_malloc_r+0x88>
 8007d2a:	4629      	mov	r1, r5
 8007d2c:	4630      	mov	r0, r6
 8007d2e:	f7ff ffbf 	bl	8007cb0 <sbrk_aligned>
 8007d32:	1c43      	adds	r3, r0, #1
 8007d34:	4604      	mov	r4, r0
 8007d36:	d158      	bne.n	8007dea <_malloc_r+0xf6>
 8007d38:	f8d8 4000 	ldr.w	r4, [r8]
 8007d3c:	4627      	mov	r7, r4
 8007d3e:	2f00      	cmp	r7, #0
 8007d40:	d143      	bne.n	8007dca <_malloc_r+0xd6>
 8007d42:	2c00      	cmp	r4, #0
 8007d44:	d04b      	beq.n	8007dde <_malloc_r+0xea>
 8007d46:	6823      	ldr	r3, [r4, #0]
 8007d48:	4639      	mov	r1, r7
 8007d4a:	4630      	mov	r0, r6
 8007d4c:	eb04 0903 	add.w	r9, r4, r3
 8007d50:	f000 fdf0 	bl	8008934 <_sbrk_r>
 8007d54:	4581      	cmp	r9, r0
 8007d56:	d142      	bne.n	8007dde <_malloc_r+0xea>
 8007d58:	6821      	ldr	r1, [r4, #0]
 8007d5a:	4630      	mov	r0, r6
 8007d5c:	1a6d      	subs	r5, r5, r1
 8007d5e:	4629      	mov	r1, r5
 8007d60:	f7ff ffa6 	bl	8007cb0 <sbrk_aligned>
 8007d64:	3001      	adds	r0, #1
 8007d66:	d03a      	beq.n	8007dde <_malloc_r+0xea>
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	442b      	add	r3, r5
 8007d6c:	6023      	str	r3, [r4, #0]
 8007d6e:	f8d8 3000 	ldr.w	r3, [r8]
 8007d72:	685a      	ldr	r2, [r3, #4]
 8007d74:	bb62      	cbnz	r2, 8007dd0 <_malloc_r+0xdc>
 8007d76:	f8c8 7000 	str.w	r7, [r8]
 8007d7a:	e00f      	b.n	8007d9c <_malloc_r+0xa8>
 8007d7c:	6822      	ldr	r2, [r4, #0]
 8007d7e:	1b52      	subs	r2, r2, r5
 8007d80:	d420      	bmi.n	8007dc4 <_malloc_r+0xd0>
 8007d82:	2a0b      	cmp	r2, #11
 8007d84:	d917      	bls.n	8007db6 <_malloc_r+0xc2>
 8007d86:	1961      	adds	r1, r4, r5
 8007d88:	42a3      	cmp	r3, r4
 8007d8a:	6025      	str	r5, [r4, #0]
 8007d8c:	bf18      	it	ne
 8007d8e:	6059      	strne	r1, [r3, #4]
 8007d90:	6863      	ldr	r3, [r4, #4]
 8007d92:	bf08      	it	eq
 8007d94:	f8c8 1000 	streq.w	r1, [r8]
 8007d98:	5162      	str	r2, [r4, r5]
 8007d9a:	604b      	str	r3, [r1, #4]
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	f000 f82f 	bl	8007e00 <__malloc_unlock>
 8007da2:	f104 000b 	add.w	r0, r4, #11
 8007da6:	1d23      	adds	r3, r4, #4
 8007da8:	f020 0007 	bic.w	r0, r0, #7
 8007dac:	1ac2      	subs	r2, r0, r3
 8007dae:	bf1c      	itt	ne
 8007db0:	1a1b      	subne	r3, r3, r0
 8007db2:	50a3      	strne	r3, [r4, r2]
 8007db4:	e7af      	b.n	8007d16 <_malloc_r+0x22>
 8007db6:	6862      	ldr	r2, [r4, #4]
 8007db8:	42a3      	cmp	r3, r4
 8007dba:	bf0c      	ite	eq
 8007dbc:	f8c8 2000 	streq.w	r2, [r8]
 8007dc0:	605a      	strne	r2, [r3, #4]
 8007dc2:	e7eb      	b.n	8007d9c <_malloc_r+0xa8>
 8007dc4:	4623      	mov	r3, r4
 8007dc6:	6864      	ldr	r4, [r4, #4]
 8007dc8:	e7ae      	b.n	8007d28 <_malloc_r+0x34>
 8007dca:	463c      	mov	r4, r7
 8007dcc:	687f      	ldr	r7, [r7, #4]
 8007dce:	e7b6      	b.n	8007d3e <_malloc_r+0x4a>
 8007dd0:	461a      	mov	r2, r3
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	42a3      	cmp	r3, r4
 8007dd6:	d1fb      	bne.n	8007dd0 <_malloc_r+0xdc>
 8007dd8:	2300      	movs	r3, #0
 8007dda:	6053      	str	r3, [r2, #4]
 8007ddc:	e7de      	b.n	8007d9c <_malloc_r+0xa8>
 8007dde:	230c      	movs	r3, #12
 8007de0:	4630      	mov	r0, r6
 8007de2:	6033      	str	r3, [r6, #0]
 8007de4:	f000 f80c 	bl	8007e00 <__malloc_unlock>
 8007de8:	e794      	b.n	8007d14 <_malloc_r+0x20>
 8007dea:	6005      	str	r5, [r0, #0]
 8007dec:	e7d6      	b.n	8007d9c <_malloc_r+0xa8>
 8007dee:	bf00      	nop
 8007df0:	20000388 	.word	0x20000388

08007df4 <__malloc_lock>:
 8007df4:	4801      	ldr	r0, [pc, #4]	@ (8007dfc <__malloc_lock+0x8>)
 8007df6:	f7ff b89e 	b.w	8006f36 <__retarget_lock_acquire_recursive>
 8007dfa:	bf00      	nop
 8007dfc:	20000380 	.word	0x20000380

08007e00 <__malloc_unlock>:
 8007e00:	4801      	ldr	r0, [pc, #4]	@ (8007e08 <__malloc_unlock+0x8>)
 8007e02:	f7ff b899 	b.w	8006f38 <__retarget_lock_release_recursive>
 8007e06:	bf00      	nop
 8007e08:	20000380 	.word	0x20000380

08007e0c <_Balloc>:
 8007e0c:	b570      	push	{r4, r5, r6, lr}
 8007e0e:	69c6      	ldr	r6, [r0, #28]
 8007e10:	4604      	mov	r4, r0
 8007e12:	460d      	mov	r5, r1
 8007e14:	b976      	cbnz	r6, 8007e34 <_Balloc+0x28>
 8007e16:	2010      	movs	r0, #16
 8007e18:	f7ff ff42 	bl	8007ca0 <malloc>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	61e0      	str	r0, [r4, #28]
 8007e20:	b920      	cbnz	r0, 8007e2c <_Balloc+0x20>
 8007e22:	216b      	movs	r1, #107	@ 0x6b
 8007e24:	4b17      	ldr	r3, [pc, #92]	@ (8007e84 <_Balloc+0x78>)
 8007e26:	4818      	ldr	r0, [pc, #96]	@ (8007e88 <_Balloc+0x7c>)
 8007e28:	f000 fda2 	bl	8008970 <__assert_func>
 8007e2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e30:	6006      	str	r6, [r0, #0]
 8007e32:	60c6      	str	r6, [r0, #12]
 8007e34:	69e6      	ldr	r6, [r4, #28]
 8007e36:	68f3      	ldr	r3, [r6, #12]
 8007e38:	b183      	cbz	r3, 8007e5c <_Balloc+0x50>
 8007e3a:	69e3      	ldr	r3, [r4, #28]
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e42:	b9b8      	cbnz	r0, 8007e74 <_Balloc+0x68>
 8007e44:	2101      	movs	r1, #1
 8007e46:	fa01 f605 	lsl.w	r6, r1, r5
 8007e4a:	1d72      	adds	r2, r6, #5
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	0092      	lsls	r2, r2, #2
 8007e50:	f000 fdac 	bl	80089ac <_calloc_r>
 8007e54:	b160      	cbz	r0, 8007e70 <_Balloc+0x64>
 8007e56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e5a:	e00e      	b.n	8007e7a <_Balloc+0x6e>
 8007e5c:	2221      	movs	r2, #33	@ 0x21
 8007e5e:	2104      	movs	r1, #4
 8007e60:	4620      	mov	r0, r4
 8007e62:	f000 fda3 	bl	80089ac <_calloc_r>
 8007e66:	69e3      	ldr	r3, [r4, #28]
 8007e68:	60f0      	str	r0, [r6, #12]
 8007e6a:	68db      	ldr	r3, [r3, #12]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1e4      	bne.n	8007e3a <_Balloc+0x2e>
 8007e70:	2000      	movs	r0, #0
 8007e72:	bd70      	pop	{r4, r5, r6, pc}
 8007e74:	6802      	ldr	r2, [r0, #0]
 8007e76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007e80:	e7f7      	b.n	8007e72 <_Balloc+0x66>
 8007e82:	bf00      	nop
 8007e84:	080090e7 	.word	0x080090e7
 8007e88:	08009167 	.word	0x08009167

08007e8c <_Bfree>:
 8007e8c:	b570      	push	{r4, r5, r6, lr}
 8007e8e:	69c6      	ldr	r6, [r0, #28]
 8007e90:	4605      	mov	r5, r0
 8007e92:	460c      	mov	r4, r1
 8007e94:	b976      	cbnz	r6, 8007eb4 <_Bfree+0x28>
 8007e96:	2010      	movs	r0, #16
 8007e98:	f7ff ff02 	bl	8007ca0 <malloc>
 8007e9c:	4602      	mov	r2, r0
 8007e9e:	61e8      	str	r0, [r5, #28]
 8007ea0:	b920      	cbnz	r0, 8007eac <_Bfree+0x20>
 8007ea2:	218f      	movs	r1, #143	@ 0x8f
 8007ea4:	4b08      	ldr	r3, [pc, #32]	@ (8007ec8 <_Bfree+0x3c>)
 8007ea6:	4809      	ldr	r0, [pc, #36]	@ (8007ecc <_Bfree+0x40>)
 8007ea8:	f000 fd62 	bl	8008970 <__assert_func>
 8007eac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007eb0:	6006      	str	r6, [r0, #0]
 8007eb2:	60c6      	str	r6, [r0, #12]
 8007eb4:	b13c      	cbz	r4, 8007ec6 <_Bfree+0x3a>
 8007eb6:	69eb      	ldr	r3, [r5, #28]
 8007eb8:	6862      	ldr	r2, [r4, #4]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ec0:	6021      	str	r1, [r4, #0]
 8007ec2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007ec6:	bd70      	pop	{r4, r5, r6, pc}
 8007ec8:	080090e7 	.word	0x080090e7
 8007ecc:	08009167 	.word	0x08009167

08007ed0 <__multadd>:
 8007ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ed4:	4607      	mov	r7, r0
 8007ed6:	460c      	mov	r4, r1
 8007ed8:	461e      	mov	r6, r3
 8007eda:	2000      	movs	r0, #0
 8007edc:	690d      	ldr	r5, [r1, #16]
 8007ede:	f101 0c14 	add.w	ip, r1, #20
 8007ee2:	f8dc 3000 	ldr.w	r3, [ip]
 8007ee6:	3001      	adds	r0, #1
 8007ee8:	b299      	uxth	r1, r3
 8007eea:	fb02 6101 	mla	r1, r2, r1, r6
 8007eee:	0c1e      	lsrs	r6, r3, #16
 8007ef0:	0c0b      	lsrs	r3, r1, #16
 8007ef2:	fb02 3306 	mla	r3, r2, r6, r3
 8007ef6:	b289      	uxth	r1, r1
 8007ef8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007efc:	4285      	cmp	r5, r0
 8007efe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f02:	f84c 1b04 	str.w	r1, [ip], #4
 8007f06:	dcec      	bgt.n	8007ee2 <__multadd+0x12>
 8007f08:	b30e      	cbz	r6, 8007f4e <__multadd+0x7e>
 8007f0a:	68a3      	ldr	r3, [r4, #8]
 8007f0c:	42ab      	cmp	r3, r5
 8007f0e:	dc19      	bgt.n	8007f44 <__multadd+0x74>
 8007f10:	6861      	ldr	r1, [r4, #4]
 8007f12:	4638      	mov	r0, r7
 8007f14:	3101      	adds	r1, #1
 8007f16:	f7ff ff79 	bl	8007e0c <_Balloc>
 8007f1a:	4680      	mov	r8, r0
 8007f1c:	b928      	cbnz	r0, 8007f2a <__multadd+0x5a>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	21ba      	movs	r1, #186	@ 0xba
 8007f22:	4b0c      	ldr	r3, [pc, #48]	@ (8007f54 <__multadd+0x84>)
 8007f24:	480c      	ldr	r0, [pc, #48]	@ (8007f58 <__multadd+0x88>)
 8007f26:	f000 fd23 	bl	8008970 <__assert_func>
 8007f2a:	6922      	ldr	r2, [r4, #16]
 8007f2c:	f104 010c 	add.w	r1, r4, #12
 8007f30:	3202      	adds	r2, #2
 8007f32:	0092      	lsls	r2, r2, #2
 8007f34:	300c      	adds	r0, #12
 8007f36:	f000 fd0d 	bl	8008954 <memcpy>
 8007f3a:	4621      	mov	r1, r4
 8007f3c:	4638      	mov	r0, r7
 8007f3e:	f7ff ffa5 	bl	8007e8c <_Bfree>
 8007f42:	4644      	mov	r4, r8
 8007f44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f48:	3501      	adds	r5, #1
 8007f4a:	615e      	str	r6, [r3, #20]
 8007f4c:	6125      	str	r5, [r4, #16]
 8007f4e:	4620      	mov	r0, r4
 8007f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f54:	08009156 	.word	0x08009156
 8007f58:	08009167 	.word	0x08009167

08007f5c <__hi0bits>:
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007f62:	bf3a      	itte	cc
 8007f64:	0403      	lslcc	r3, r0, #16
 8007f66:	2010      	movcc	r0, #16
 8007f68:	2000      	movcs	r0, #0
 8007f6a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007f6e:	bf3c      	itt	cc
 8007f70:	021b      	lslcc	r3, r3, #8
 8007f72:	3008      	addcc	r0, #8
 8007f74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007f78:	bf3c      	itt	cc
 8007f7a:	011b      	lslcc	r3, r3, #4
 8007f7c:	3004      	addcc	r0, #4
 8007f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f82:	bf3c      	itt	cc
 8007f84:	009b      	lslcc	r3, r3, #2
 8007f86:	3002      	addcc	r0, #2
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	db05      	blt.n	8007f98 <__hi0bits+0x3c>
 8007f8c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007f90:	f100 0001 	add.w	r0, r0, #1
 8007f94:	bf08      	it	eq
 8007f96:	2020      	moveq	r0, #32
 8007f98:	4770      	bx	lr

08007f9a <__lo0bits>:
 8007f9a:	6803      	ldr	r3, [r0, #0]
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	f013 0007 	ands.w	r0, r3, #7
 8007fa2:	d00b      	beq.n	8007fbc <__lo0bits+0x22>
 8007fa4:	07d9      	lsls	r1, r3, #31
 8007fa6:	d421      	bmi.n	8007fec <__lo0bits+0x52>
 8007fa8:	0798      	lsls	r0, r3, #30
 8007faa:	bf49      	itett	mi
 8007fac:	085b      	lsrmi	r3, r3, #1
 8007fae:	089b      	lsrpl	r3, r3, #2
 8007fb0:	2001      	movmi	r0, #1
 8007fb2:	6013      	strmi	r3, [r2, #0]
 8007fb4:	bf5c      	itt	pl
 8007fb6:	2002      	movpl	r0, #2
 8007fb8:	6013      	strpl	r3, [r2, #0]
 8007fba:	4770      	bx	lr
 8007fbc:	b299      	uxth	r1, r3
 8007fbe:	b909      	cbnz	r1, 8007fc4 <__lo0bits+0x2a>
 8007fc0:	2010      	movs	r0, #16
 8007fc2:	0c1b      	lsrs	r3, r3, #16
 8007fc4:	b2d9      	uxtb	r1, r3
 8007fc6:	b909      	cbnz	r1, 8007fcc <__lo0bits+0x32>
 8007fc8:	3008      	adds	r0, #8
 8007fca:	0a1b      	lsrs	r3, r3, #8
 8007fcc:	0719      	lsls	r1, r3, #28
 8007fce:	bf04      	itt	eq
 8007fd0:	091b      	lsreq	r3, r3, #4
 8007fd2:	3004      	addeq	r0, #4
 8007fd4:	0799      	lsls	r1, r3, #30
 8007fd6:	bf04      	itt	eq
 8007fd8:	089b      	lsreq	r3, r3, #2
 8007fda:	3002      	addeq	r0, #2
 8007fdc:	07d9      	lsls	r1, r3, #31
 8007fde:	d403      	bmi.n	8007fe8 <__lo0bits+0x4e>
 8007fe0:	085b      	lsrs	r3, r3, #1
 8007fe2:	f100 0001 	add.w	r0, r0, #1
 8007fe6:	d003      	beq.n	8007ff0 <__lo0bits+0x56>
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	4770      	bx	lr
 8007fec:	2000      	movs	r0, #0
 8007fee:	4770      	bx	lr
 8007ff0:	2020      	movs	r0, #32
 8007ff2:	4770      	bx	lr

08007ff4 <__i2b>:
 8007ff4:	b510      	push	{r4, lr}
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	2101      	movs	r1, #1
 8007ffa:	f7ff ff07 	bl	8007e0c <_Balloc>
 8007ffe:	4602      	mov	r2, r0
 8008000:	b928      	cbnz	r0, 800800e <__i2b+0x1a>
 8008002:	f240 1145 	movw	r1, #325	@ 0x145
 8008006:	4b04      	ldr	r3, [pc, #16]	@ (8008018 <__i2b+0x24>)
 8008008:	4804      	ldr	r0, [pc, #16]	@ (800801c <__i2b+0x28>)
 800800a:	f000 fcb1 	bl	8008970 <__assert_func>
 800800e:	2301      	movs	r3, #1
 8008010:	6144      	str	r4, [r0, #20]
 8008012:	6103      	str	r3, [r0, #16]
 8008014:	bd10      	pop	{r4, pc}
 8008016:	bf00      	nop
 8008018:	08009156 	.word	0x08009156
 800801c:	08009167 	.word	0x08009167

08008020 <__multiply>:
 8008020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008024:	4617      	mov	r7, r2
 8008026:	690a      	ldr	r2, [r1, #16]
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	4689      	mov	r9, r1
 800802c:	429a      	cmp	r2, r3
 800802e:	bfa2      	ittt	ge
 8008030:	463b      	movge	r3, r7
 8008032:	460f      	movge	r7, r1
 8008034:	4699      	movge	r9, r3
 8008036:	693d      	ldr	r5, [r7, #16]
 8008038:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	6879      	ldr	r1, [r7, #4]
 8008040:	eb05 060a 	add.w	r6, r5, sl
 8008044:	42b3      	cmp	r3, r6
 8008046:	b085      	sub	sp, #20
 8008048:	bfb8      	it	lt
 800804a:	3101      	addlt	r1, #1
 800804c:	f7ff fede 	bl	8007e0c <_Balloc>
 8008050:	b930      	cbnz	r0, 8008060 <__multiply+0x40>
 8008052:	4602      	mov	r2, r0
 8008054:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008058:	4b40      	ldr	r3, [pc, #256]	@ (800815c <__multiply+0x13c>)
 800805a:	4841      	ldr	r0, [pc, #260]	@ (8008160 <__multiply+0x140>)
 800805c:	f000 fc88 	bl	8008970 <__assert_func>
 8008060:	f100 0414 	add.w	r4, r0, #20
 8008064:	4623      	mov	r3, r4
 8008066:	2200      	movs	r2, #0
 8008068:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800806c:	4573      	cmp	r3, lr
 800806e:	d320      	bcc.n	80080b2 <__multiply+0x92>
 8008070:	f107 0814 	add.w	r8, r7, #20
 8008074:	f109 0114 	add.w	r1, r9, #20
 8008078:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800807c:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008080:	9302      	str	r3, [sp, #8]
 8008082:	1beb      	subs	r3, r5, r7
 8008084:	3b15      	subs	r3, #21
 8008086:	f023 0303 	bic.w	r3, r3, #3
 800808a:	3304      	adds	r3, #4
 800808c:	3715      	adds	r7, #21
 800808e:	42bd      	cmp	r5, r7
 8008090:	bf38      	it	cc
 8008092:	2304      	movcc	r3, #4
 8008094:	9301      	str	r3, [sp, #4]
 8008096:	9b02      	ldr	r3, [sp, #8]
 8008098:	9103      	str	r1, [sp, #12]
 800809a:	428b      	cmp	r3, r1
 800809c:	d80c      	bhi.n	80080b8 <__multiply+0x98>
 800809e:	2e00      	cmp	r6, #0
 80080a0:	dd03      	ble.n	80080aa <__multiply+0x8a>
 80080a2:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d055      	beq.n	8008156 <__multiply+0x136>
 80080aa:	6106      	str	r6, [r0, #16]
 80080ac:	b005      	add	sp, #20
 80080ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b2:	f843 2b04 	str.w	r2, [r3], #4
 80080b6:	e7d9      	b.n	800806c <__multiply+0x4c>
 80080b8:	f8b1 a000 	ldrh.w	sl, [r1]
 80080bc:	f1ba 0f00 	cmp.w	sl, #0
 80080c0:	d01f      	beq.n	8008102 <__multiply+0xe2>
 80080c2:	46c4      	mov	ip, r8
 80080c4:	46a1      	mov	r9, r4
 80080c6:	2700      	movs	r7, #0
 80080c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80080cc:	f8d9 3000 	ldr.w	r3, [r9]
 80080d0:	fa1f fb82 	uxth.w	fp, r2
 80080d4:	b29b      	uxth	r3, r3
 80080d6:	fb0a 330b 	mla	r3, sl, fp, r3
 80080da:	443b      	add	r3, r7
 80080dc:	f8d9 7000 	ldr.w	r7, [r9]
 80080e0:	0c12      	lsrs	r2, r2, #16
 80080e2:	0c3f      	lsrs	r7, r7, #16
 80080e4:	fb0a 7202 	mla	r2, sl, r2, r7
 80080e8:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80080ec:	b29b      	uxth	r3, r3
 80080ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80080f2:	4565      	cmp	r5, ip
 80080f4:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80080f8:	f849 3b04 	str.w	r3, [r9], #4
 80080fc:	d8e4      	bhi.n	80080c8 <__multiply+0xa8>
 80080fe:	9b01      	ldr	r3, [sp, #4]
 8008100:	50e7      	str	r7, [r4, r3]
 8008102:	9b03      	ldr	r3, [sp, #12]
 8008104:	3104      	adds	r1, #4
 8008106:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800810a:	f1b9 0f00 	cmp.w	r9, #0
 800810e:	d020      	beq.n	8008152 <__multiply+0x132>
 8008110:	4647      	mov	r7, r8
 8008112:	46a4      	mov	ip, r4
 8008114:	f04f 0a00 	mov.w	sl, #0
 8008118:	6823      	ldr	r3, [r4, #0]
 800811a:	f8b7 b000 	ldrh.w	fp, [r7]
 800811e:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008122:	b29b      	uxth	r3, r3
 8008124:	fb09 220b 	mla	r2, r9, fp, r2
 8008128:	4452      	add	r2, sl
 800812a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800812e:	f84c 3b04 	str.w	r3, [ip], #4
 8008132:	f857 3b04 	ldr.w	r3, [r7], #4
 8008136:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800813a:	f8bc 3000 	ldrh.w	r3, [ip]
 800813e:	42bd      	cmp	r5, r7
 8008140:	fb09 330a 	mla	r3, r9, sl, r3
 8008144:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008148:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800814c:	d8e5      	bhi.n	800811a <__multiply+0xfa>
 800814e:	9a01      	ldr	r2, [sp, #4]
 8008150:	50a3      	str	r3, [r4, r2]
 8008152:	3404      	adds	r4, #4
 8008154:	e79f      	b.n	8008096 <__multiply+0x76>
 8008156:	3e01      	subs	r6, #1
 8008158:	e7a1      	b.n	800809e <__multiply+0x7e>
 800815a:	bf00      	nop
 800815c:	08009156 	.word	0x08009156
 8008160:	08009167 	.word	0x08009167

08008164 <__pow5mult>:
 8008164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008168:	4615      	mov	r5, r2
 800816a:	f012 0203 	ands.w	r2, r2, #3
 800816e:	4607      	mov	r7, r0
 8008170:	460e      	mov	r6, r1
 8008172:	d007      	beq.n	8008184 <__pow5mult+0x20>
 8008174:	4c25      	ldr	r4, [pc, #148]	@ (800820c <__pow5mult+0xa8>)
 8008176:	3a01      	subs	r2, #1
 8008178:	2300      	movs	r3, #0
 800817a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800817e:	f7ff fea7 	bl	8007ed0 <__multadd>
 8008182:	4606      	mov	r6, r0
 8008184:	10ad      	asrs	r5, r5, #2
 8008186:	d03d      	beq.n	8008204 <__pow5mult+0xa0>
 8008188:	69fc      	ldr	r4, [r7, #28]
 800818a:	b97c      	cbnz	r4, 80081ac <__pow5mult+0x48>
 800818c:	2010      	movs	r0, #16
 800818e:	f7ff fd87 	bl	8007ca0 <malloc>
 8008192:	4602      	mov	r2, r0
 8008194:	61f8      	str	r0, [r7, #28]
 8008196:	b928      	cbnz	r0, 80081a4 <__pow5mult+0x40>
 8008198:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800819c:	4b1c      	ldr	r3, [pc, #112]	@ (8008210 <__pow5mult+0xac>)
 800819e:	481d      	ldr	r0, [pc, #116]	@ (8008214 <__pow5mult+0xb0>)
 80081a0:	f000 fbe6 	bl	8008970 <__assert_func>
 80081a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081a8:	6004      	str	r4, [r0, #0]
 80081aa:	60c4      	str	r4, [r0, #12]
 80081ac:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80081b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081b4:	b94c      	cbnz	r4, 80081ca <__pow5mult+0x66>
 80081b6:	f240 2171 	movw	r1, #625	@ 0x271
 80081ba:	4638      	mov	r0, r7
 80081bc:	f7ff ff1a 	bl	8007ff4 <__i2b>
 80081c0:	2300      	movs	r3, #0
 80081c2:	4604      	mov	r4, r0
 80081c4:	f8c8 0008 	str.w	r0, [r8, #8]
 80081c8:	6003      	str	r3, [r0, #0]
 80081ca:	f04f 0900 	mov.w	r9, #0
 80081ce:	07eb      	lsls	r3, r5, #31
 80081d0:	d50a      	bpl.n	80081e8 <__pow5mult+0x84>
 80081d2:	4631      	mov	r1, r6
 80081d4:	4622      	mov	r2, r4
 80081d6:	4638      	mov	r0, r7
 80081d8:	f7ff ff22 	bl	8008020 <__multiply>
 80081dc:	4680      	mov	r8, r0
 80081de:	4631      	mov	r1, r6
 80081e0:	4638      	mov	r0, r7
 80081e2:	f7ff fe53 	bl	8007e8c <_Bfree>
 80081e6:	4646      	mov	r6, r8
 80081e8:	106d      	asrs	r5, r5, #1
 80081ea:	d00b      	beq.n	8008204 <__pow5mult+0xa0>
 80081ec:	6820      	ldr	r0, [r4, #0]
 80081ee:	b938      	cbnz	r0, 8008200 <__pow5mult+0x9c>
 80081f0:	4622      	mov	r2, r4
 80081f2:	4621      	mov	r1, r4
 80081f4:	4638      	mov	r0, r7
 80081f6:	f7ff ff13 	bl	8008020 <__multiply>
 80081fa:	6020      	str	r0, [r4, #0]
 80081fc:	f8c0 9000 	str.w	r9, [r0]
 8008200:	4604      	mov	r4, r0
 8008202:	e7e4      	b.n	80081ce <__pow5mult+0x6a>
 8008204:	4630      	mov	r0, r6
 8008206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800820a:	bf00      	nop
 800820c:	08009218 	.word	0x08009218
 8008210:	080090e7 	.word	0x080090e7
 8008214:	08009167 	.word	0x08009167

08008218 <__lshift>:
 8008218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800821c:	460c      	mov	r4, r1
 800821e:	4607      	mov	r7, r0
 8008220:	4691      	mov	r9, r2
 8008222:	6923      	ldr	r3, [r4, #16]
 8008224:	6849      	ldr	r1, [r1, #4]
 8008226:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800822a:	68a3      	ldr	r3, [r4, #8]
 800822c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008230:	f108 0601 	add.w	r6, r8, #1
 8008234:	42b3      	cmp	r3, r6
 8008236:	db0b      	blt.n	8008250 <__lshift+0x38>
 8008238:	4638      	mov	r0, r7
 800823a:	f7ff fde7 	bl	8007e0c <_Balloc>
 800823e:	4605      	mov	r5, r0
 8008240:	b948      	cbnz	r0, 8008256 <__lshift+0x3e>
 8008242:	4602      	mov	r2, r0
 8008244:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008248:	4b27      	ldr	r3, [pc, #156]	@ (80082e8 <__lshift+0xd0>)
 800824a:	4828      	ldr	r0, [pc, #160]	@ (80082ec <__lshift+0xd4>)
 800824c:	f000 fb90 	bl	8008970 <__assert_func>
 8008250:	3101      	adds	r1, #1
 8008252:	005b      	lsls	r3, r3, #1
 8008254:	e7ee      	b.n	8008234 <__lshift+0x1c>
 8008256:	2300      	movs	r3, #0
 8008258:	f100 0114 	add.w	r1, r0, #20
 800825c:	f100 0210 	add.w	r2, r0, #16
 8008260:	4618      	mov	r0, r3
 8008262:	4553      	cmp	r3, sl
 8008264:	db33      	blt.n	80082ce <__lshift+0xb6>
 8008266:	6920      	ldr	r0, [r4, #16]
 8008268:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800826c:	f104 0314 	add.w	r3, r4, #20
 8008270:	f019 091f 	ands.w	r9, r9, #31
 8008274:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008278:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800827c:	d02b      	beq.n	80082d6 <__lshift+0xbe>
 800827e:	468a      	mov	sl, r1
 8008280:	2200      	movs	r2, #0
 8008282:	f1c9 0e20 	rsb	lr, r9, #32
 8008286:	6818      	ldr	r0, [r3, #0]
 8008288:	fa00 f009 	lsl.w	r0, r0, r9
 800828c:	4310      	orrs	r0, r2
 800828e:	f84a 0b04 	str.w	r0, [sl], #4
 8008292:	f853 2b04 	ldr.w	r2, [r3], #4
 8008296:	459c      	cmp	ip, r3
 8008298:	fa22 f20e 	lsr.w	r2, r2, lr
 800829c:	d8f3      	bhi.n	8008286 <__lshift+0x6e>
 800829e:	ebac 0304 	sub.w	r3, ip, r4
 80082a2:	3b15      	subs	r3, #21
 80082a4:	f023 0303 	bic.w	r3, r3, #3
 80082a8:	3304      	adds	r3, #4
 80082aa:	f104 0015 	add.w	r0, r4, #21
 80082ae:	4560      	cmp	r0, ip
 80082b0:	bf88      	it	hi
 80082b2:	2304      	movhi	r3, #4
 80082b4:	50ca      	str	r2, [r1, r3]
 80082b6:	b10a      	cbz	r2, 80082bc <__lshift+0xa4>
 80082b8:	f108 0602 	add.w	r6, r8, #2
 80082bc:	3e01      	subs	r6, #1
 80082be:	4638      	mov	r0, r7
 80082c0:	4621      	mov	r1, r4
 80082c2:	612e      	str	r6, [r5, #16]
 80082c4:	f7ff fde2 	bl	8007e8c <_Bfree>
 80082c8:	4628      	mov	r0, r5
 80082ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80082ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80082d2:	3301      	adds	r3, #1
 80082d4:	e7c5      	b.n	8008262 <__lshift+0x4a>
 80082d6:	3904      	subs	r1, #4
 80082d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80082dc:	459c      	cmp	ip, r3
 80082de:	f841 2f04 	str.w	r2, [r1, #4]!
 80082e2:	d8f9      	bhi.n	80082d8 <__lshift+0xc0>
 80082e4:	e7ea      	b.n	80082bc <__lshift+0xa4>
 80082e6:	bf00      	nop
 80082e8:	08009156 	.word	0x08009156
 80082ec:	08009167 	.word	0x08009167

080082f0 <__mcmp>:
 80082f0:	4603      	mov	r3, r0
 80082f2:	690a      	ldr	r2, [r1, #16]
 80082f4:	6900      	ldr	r0, [r0, #16]
 80082f6:	b530      	push	{r4, r5, lr}
 80082f8:	1a80      	subs	r0, r0, r2
 80082fa:	d10e      	bne.n	800831a <__mcmp+0x2a>
 80082fc:	3314      	adds	r3, #20
 80082fe:	3114      	adds	r1, #20
 8008300:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008304:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008308:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800830c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008310:	4295      	cmp	r5, r2
 8008312:	d003      	beq.n	800831c <__mcmp+0x2c>
 8008314:	d205      	bcs.n	8008322 <__mcmp+0x32>
 8008316:	f04f 30ff 	mov.w	r0, #4294967295
 800831a:	bd30      	pop	{r4, r5, pc}
 800831c:	42a3      	cmp	r3, r4
 800831e:	d3f3      	bcc.n	8008308 <__mcmp+0x18>
 8008320:	e7fb      	b.n	800831a <__mcmp+0x2a>
 8008322:	2001      	movs	r0, #1
 8008324:	e7f9      	b.n	800831a <__mcmp+0x2a>
	...

08008328 <__mdiff>:
 8008328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800832c:	4689      	mov	r9, r1
 800832e:	4606      	mov	r6, r0
 8008330:	4611      	mov	r1, r2
 8008332:	4648      	mov	r0, r9
 8008334:	4614      	mov	r4, r2
 8008336:	f7ff ffdb 	bl	80082f0 <__mcmp>
 800833a:	1e05      	subs	r5, r0, #0
 800833c:	d112      	bne.n	8008364 <__mdiff+0x3c>
 800833e:	4629      	mov	r1, r5
 8008340:	4630      	mov	r0, r6
 8008342:	f7ff fd63 	bl	8007e0c <_Balloc>
 8008346:	4602      	mov	r2, r0
 8008348:	b928      	cbnz	r0, 8008356 <__mdiff+0x2e>
 800834a:	f240 2137 	movw	r1, #567	@ 0x237
 800834e:	4b3e      	ldr	r3, [pc, #248]	@ (8008448 <__mdiff+0x120>)
 8008350:	483e      	ldr	r0, [pc, #248]	@ (800844c <__mdiff+0x124>)
 8008352:	f000 fb0d 	bl	8008970 <__assert_func>
 8008356:	2301      	movs	r3, #1
 8008358:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800835c:	4610      	mov	r0, r2
 800835e:	b003      	add	sp, #12
 8008360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008364:	bfbc      	itt	lt
 8008366:	464b      	movlt	r3, r9
 8008368:	46a1      	movlt	r9, r4
 800836a:	4630      	mov	r0, r6
 800836c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008370:	bfba      	itte	lt
 8008372:	461c      	movlt	r4, r3
 8008374:	2501      	movlt	r5, #1
 8008376:	2500      	movge	r5, #0
 8008378:	f7ff fd48 	bl	8007e0c <_Balloc>
 800837c:	4602      	mov	r2, r0
 800837e:	b918      	cbnz	r0, 8008388 <__mdiff+0x60>
 8008380:	f240 2145 	movw	r1, #581	@ 0x245
 8008384:	4b30      	ldr	r3, [pc, #192]	@ (8008448 <__mdiff+0x120>)
 8008386:	e7e3      	b.n	8008350 <__mdiff+0x28>
 8008388:	f100 0b14 	add.w	fp, r0, #20
 800838c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008390:	f109 0310 	add.w	r3, r9, #16
 8008394:	60c5      	str	r5, [r0, #12]
 8008396:	f04f 0c00 	mov.w	ip, #0
 800839a:	f109 0514 	add.w	r5, r9, #20
 800839e:	46d9      	mov	r9, fp
 80083a0:	6926      	ldr	r6, [r4, #16]
 80083a2:	f104 0e14 	add.w	lr, r4, #20
 80083a6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80083aa:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80083ae:	9301      	str	r3, [sp, #4]
 80083b0:	9b01      	ldr	r3, [sp, #4]
 80083b2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80083b6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80083ba:	b281      	uxth	r1, r0
 80083bc:	9301      	str	r3, [sp, #4]
 80083be:	fa1f f38a 	uxth.w	r3, sl
 80083c2:	1a5b      	subs	r3, r3, r1
 80083c4:	0c00      	lsrs	r0, r0, #16
 80083c6:	4463      	add	r3, ip
 80083c8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80083cc:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80083d6:	4576      	cmp	r6, lr
 80083d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80083dc:	f849 3b04 	str.w	r3, [r9], #4
 80083e0:	d8e6      	bhi.n	80083b0 <__mdiff+0x88>
 80083e2:	1b33      	subs	r3, r6, r4
 80083e4:	3b15      	subs	r3, #21
 80083e6:	f023 0303 	bic.w	r3, r3, #3
 80083ea:	3415      	adds	r4, #21
 80083ec:	3304      	adds	r3, #4
 80083ee:	42a6      	cmp	r6, r4
 80083f0:	bf38      	it	cc
 80083f2:	2304      	movcc	r3, #4
 80083f4:	441d      	add	r5, r3
 80083f6:	445b      	add	r3, fp
 80083f8:	461e      	mov	r6, r3
 80083fa:	462c      	mov	r4, r5
 80083fc:	4544      	cmp	r4, r8
 80083fe:	d30e      	bcc.n	800841e <__mdiff+0xf6>
 8008400:	f108 0103 	add.w	r1, r8, #3
 8008404:	1b49      	subs	r1, r1, r5
 8008406:	f021 0103 	bic.w	r1, r1, #3
 800840a:	3d03      	subs	r5, #3
 800840c:	45a8      	cmp	r8, r5
 800840e:	bf38      	it	cc
 8008410:	2100      	movcc	r1, #0
 8008412:	440b      	add	r3, r1
 8008414:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008418:	b199      	cbz	r1, 8008442 <__mdiff+0x11a>
 800841a:	6117      	str	r7, [r2, #16]
 800841c:	e79e      	b.n	800835c <__mdiff+0x34>
 800841e:	46e6      	mov	lr, ip
 8008420:	f854 1b04 	ldr.w	r1, [r4], #4
 8008424:	fa1f fc81 	uxth.w	ip, r1
 8008428:	44f4      	add	ip, lr
 800842a:	0c08      	lsrs	r0, r1, #16
 800842c:	4471      	add	r1, lr
 800842e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008432:	b289      	uxth	r1, r1
 8008434:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008438:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800843c:	f846 1b04 	str.w	r1, [r6], #4
 8008440:	e7dc      	b.n	80083fc <__mdiff+0xd4>
 8008442:	3f01      	subs	r7, #1
 8008444:	e7e6      	b.n	8008414 <__mdiff+0xec>
 8008446:	bf00      	nop
 8008448:	08009156 	.word	0x08009156
 800844c:	08009167 	.word	0x08009167

08008450 <__d2b>:
 8008450:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008454:	2101      	movs	r1, #1
 8008456:	4690      	mov	r8, r2
 8008458:	4699      	mov	r9, r3
 800845a:	9e08      	ldr	r6, [sp, #32]
 800845c:	f7ff fcd6 	bl	8007e0c <_Balloc>
 8008460:	4604      	mov	r4, r0
 8008462:	b930      	cbnz	r0, 8008472 <__d2b+0x22>
 8008464:	4602      	mov	r2, r0
 8008466:	f240 310f 	movw	r1, #783	@ 0x30f
 800846a:	4b23      	ldr	r3, [pc, #140]	@ (80084f8 <__d2b+0xa8>)
 800846c:	4823      	ldr	r0, [pc, #140]	@ (80084fc <__d2b+0xac>)
 800846e:	f000 fa7f 	bl	8008970 <__assert_func>
 8008472:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008476:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800847a:	b10d      	cbz	r5, 8008480 <__d2b+0x30>
 800847c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008480:	9301      	str	r3, [sp, #4]
 8008482:	f1b8 0300 	subs.w	r3, r8, #0
 8008486:	d024      	beq.n	80084d2 <__d2b+0x82>
 8008488:	4668      	mov	r0, sp
 800848a:	9300      	str	r3, [sp, #0]
 800848c:	f7ff fd85 	bl	8007f9a <__lo0bits>
 8008490:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008494:	b1d8      	cbz	r0, 80084ce <__d2b+0x7e>
 8008496:	f1c0 0320 	rsb	r3, r0, #32
 800849a:	fa02 f303 	lsl.w	r3, r2, r3
 800849e:	430b      	orrs	r3, r1
 80084a0:	40c2      	lsrs	r2, r0
 80084a2:	6163      	str	r3, [r4, #20]
 80084a4:	9201      	str	r2, [sp, #4]
 80084a6:	9b01      	ldr	r3, [sp, #4]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	bf0c      	ite	eq
 80084ac:	2201      	moveq	r2, #1
 80084ae:	2202      	movne	r2, #2
 80084b0:	61a3      	str	r3, [r4, #24]
 80084b2:	6122      	str	r2, [r4, #16]
 80084b4:	b1ad      	cbz	r5, 80084e2 <__d2b+0x92>
 80084b6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80084ba:	4405      	add	r5, r0
 80084bc:	6035      	str	r5, [r6, #0]
 80084be:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80084c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084c4:	6018      	str	r0, [r3, #0]
 80084c6:	4620      	mov	r0, r4
 80084c8:	b002      	add	sp, #8
 80084ca:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80084ce:	6161      	str	r1, [r4, #20]
 80084d0:	e7e9      	b.n	80084a6 <__d2b+0x56>
 80084d2:	a801      	add	r0, sp, #4
 80084d4:	f7ff fd61 	bl	8007f9a <__lo0bits>
 80084d8:	9b01      	ldr	r3, [sp, #4]
 80084da:	2201      	movs	r2, #1
 80084dc:	6163      	str	r3, [r4, #20]
 80084de:	3020      	adds	r0, #32
 80084e0:	e7e7      	b.n	80084b2 <__d2b+0x62>
 80084e2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80084e6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80084ea:	6030      	str	r0, [r6, #0]
 80084ec:	6918      	ldr	r0, [r3, #16]
 80084ee:	f7ff fd35 	bl	8007f5c <__hi0bits>
 80084f2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80084f6:	e7e4      	b.n	80084c2 <__d2b+0x72>
 80084f8:	08009156 	.word	0x08009156
 80084fc:	08009167 	.word	0x08009167

08008500 <__ssputs_r>:
 8008500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008504:	461f      	mov	r7, r3
 8008506:	688e      	ldr	r6, [r1, #8]
 8008508:	4682      	mov	sl, r0
 800850a:	42be      	cmp	r6, r7
 800850c:	460c      	mov	r4, r1
 800850e:	4690      	mov	r8, r2
 8008510:	680b      	ldr	r3, [r1, #0]
 8008512:	d82d      	bhi.n	8008570 <__ssputs_r+0x70>
 8008514:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008518:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800851c:	d026      	beq.n	800856c <__ssputs_r+0x6c>
 800851e:	6965      	ldr	r5, [r4, #20]
 8008520:	6909      	ldr	r1, [r1, #16]
 8008522:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008526:	eba3 0901 	sub.w	r9, r3, r1
 800852a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800852e:	1c7b      	adds	r3, r7, #1
 8008530:	444b      	add	r3, r9
 8008532:	106d      	asrs	r5, r5, #1
 8008534:	429d      	cmp	r5, r3
 8008536:	bf38      	it	cc
 8008538:	461d      	movcc	r5, r3
 800853a:	0553      	lsls	r3, r2, #21
 800853c:	d527      	bpl.n	800858e <__ssputs_r+0x8e>
 800853e:	4629      	mov	r1, r5
 8008540:	f7ff fbd8 	bl	8007cf4 <_malloc_r>
 8008544:	4606      	mov	r6, r0
 8008546:	b360      	cbz	r0, 80085a2 <__ssputs_r+0xa2>
 8008548:	464a      	mov	r2, r9
 800854a:	6921      	ldr	r1, [r4, #16]
 800854c:	f000 fa02 	bl	8008954 <memcpy>
 8008550:	89a3      	ldrh	r3, [r4, #12]
 8008552:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008556:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800855a:	81a3      	strh	r3, [r4, #12]
 800855c:	6126      	str	r6, [r4, #16]
 800855e:	444e      	add	r6, r9
 8008560:	6026      	str	r6, [r4, #0]
 8008562:	463e      	mov	r6, r7
 8008564:	6165      	str	r5, [r4, #20]
 8008566:	eba5 0509 	sub.w	r5, r5, r9
 800856a:	60a5      	str	r5, [r4, #8]
 800856c:	42be      	cmp	r6, r7
 800856e:	d900      	bls.n	8008572 <__ssputs_r+0x72>
 8008570:	463e      	mov	r6, r7
 8008572:	4632      	mov	r2, r6
 8008574:	4641      	mov	r1, r8
 8008576:	6820      	ldr	r0, [r4, #0]
 8008578:	f000 f9c2 	bl	8008900 <memmove>
 800857c:	2000      	movs	r0, #0
 800857e:	68a3      	ldr	r3, [r4, #8]
 8008580:	1b9b      	subs	r3, r3, r6
 8008582:	60a3      	str	r3, [r4, #8]
 8008584:	6823      	ldr	r3, [r4, #0]
 8008586:	4433      	add	r3, r6
 8008588:	6023      	str	r3, [r4, #0]
 800858a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800858e:	462a      	mov	r2, r5
 8008590:	f000 fa32 	bl	80089f8 <_realloc_r>
 8008594:	4606      	mov	r6, r0
 8008596:	2800      	cmp	r0, #0
 8008598:	d1e0      	bne.n	800855c <__ssputs_r+0x5c>
 800859a:	4650      	mov	r0, sl
 800859c:	6921      	ldr	r1, [r4, #16]
 800859e:	f7ff fb37 	bl	8007c10 <_free_r>
 80085a2:	230c      	movs	r3, #12
 80085a4:	f8ca 3000 	str.w	r3, [sl]
 80085a8:	89a3      	ldrh	r3, [r4, #12]
 80085aa:	f04f 30ff 	mov.w	r0, #4294967295
 80085ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085b2:	81a3      	strh	r3, [r4, #12]
 80085b4:	e7e9      	b.n	800858a <__ssputs_r+0x8a>
	...

080085b8 <_svfiprintf_r>:
 80085b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085bc:	4698      	mov	r8, r3
 80085be:	898b      	ldrh	r3, [r1, #12]
 80085c0:	4607      	mov	r7, r0
 80085c2:	061b      	lsls	r3, r3, #24
 80085c4:	460d      	mov	r5, r1
 80085c6:	4614      	mov	r4, r2
 80085c8:	b09d      	sub	sp, #116	@ 0x74
 80085ca:	d510      	bpl.n	80085ee <_svfiprintf_r+0x36>
 80085cc:	690b      	ldr	r3, [r1, #16]
 80085ce:	b973      	cbnz	r3, 80085ee <_svfiprintf_r+0x36>
 80085d0:	2140      	movs	r1, #64	@ 0x40
 80085d2:	f7ff fb8f 	bl	8007cf4 <_malloc_r>
 80085d6:	6028      	str	r0, [r5, #0]
 80085d8:	6128      	str	r0, [r5, #16]
 80085da:	b930      	cbnz	r0, 80085ea <_svfiprintf_r+0x32>
 80085dc:	230c      	movs	r3, #12
 80085de:	603b      	str	r3, [r7, #0]
 80085e0:	f04f 30ff 	mov.w	r0, #4294967295
 80085e4:	b01d      	add	sp, #116	@ 0x74
 80085e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085ea:	2340      	movs	r3, #64	@ 0x40
 80085ec:	616b      	str	r3, [r5, #20]
 80085ee:	2300      	movs	r3, #0
 80085f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80085f2:	2320      	movs	r3, #32
 80085f4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085f8:	2330      	movs	r3, #48	@ 0x30
 80085fa:	f04f 0901 	mov.w	r9, #1
 80085fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008602:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800879c <_svfiprintf_r+0x1e4>
 8008606:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800860a:	4623      	mov	r3, r4
 800860c:	469a      	mov	sl, r3
 800860e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008612:	b10a      	cbz	r2, 8008618 <_svfiprintf_r+0x60>
 8008614:	2a25      	cmp	r2, #37	@ 0x25
 8008616:	d1f9      	bne.n	800860c <_svfiprintf_r+0x54>
 8008618:	ebba 0b04 	subs.w	fp, sl, r4
 800861c:	d00b      	beq.n	8008636 <_svfiprintf_r+0x7e>
 800861e:	465b      	mov	r3, fp
 8008620:	4622      	mov	r2, r4
 8008622:	4629      	mov	r1, r5
 8008624:	4638      	mov	r0, r7
 8008626:	f7ff ff6b 	bl	8008500 <__ssputs_r>
 800862a:	3001      	adds	r0, #1
 800862c:	f000 80a7 	beq.w	800877e <_svfiprintf_r+0x1c6>
 8008630:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008632:	445a      	add	r2, fp
 8008634:	9209      	str	r2, [sp, #36]	@ 0x24
 8008636:	f89a 3000 	ldrb.w	r3, [sl]
 800863a:	2b00      	cmp	r3, #0
 800863c:	f000 809f 	beq.w	800877e <_svfiprintf_r+0x1c6>
 8008640:	2300      	movs	r3, #0
 8008642:	f04f 32ff 	mov.w	r2, #4294967295
 8008646:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800864a:	f10a 0a01 	add.w	sl, sl, #1
 800864e:	9304      	str	r3, [sp, #16]
 8008650:	9307      	str	r3, [sp, #28]
 8008652:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008656:	931a      	str	r3, [sp, #104]	@ 0x68
 8008658:	4654      	mov	r4, sl
 800865a:	2205      	movs	r2, #5
 800865c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008660:	484e      	ldr	r0, [pc, #312]	@ (800879c <_svfiprintf_r+0x1e4>)
 8008662:	f7fe fc6a 	bl	8006f3a <memchr>
 8008666:	9a04      	ldr	r2, [sp, #16]
 8008668:	b9d8      	cbnz	r0, 80086a2 <_svfiprintf_r+0xea>
 800866a:	06d0      	lsls	r0, r2, #27
 800866c:	bf44      	itt	mi
 800866e:	2320      	movmi	r3, #32
 8008670:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008674:	0711      	lsls	r1, r2, #28
 8008676:	bf44      	itt	mi
 8008678:	232b      	movmi	r3, #43	@ 0x2b
 800867a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800867e:	f89a 3000 	ldrb.w	r3, [sl]
 8008682:	2b2a      	cmp	r3, #42	@ 0x2a
 8008684:	d015      	beq.n	80086b2 <_svfiprintf_r+0xfa>
 8008686:	4654      	mov	r4, sl
 8008688:	2000      	movs	r0, #0
 800868a:	f04f 0c0a 	mov.w	ip, #10
 800868e:	9a07      	ldr	r2, [sp, #28]
 8008690:	4621      	mov	r1, r4
 8008692:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008696:	3b30      	subs	r3, #48	@ 0x30
 8008698:	2b09      	cmp	r3, #9
 800869a:	d94b      	bls.n	8008734 <_svfiprintf_r+0x17c>
 800869c:	b1b0      	cbz	r0, 80086cc <_svfiprintf_r+0x114>
 800869e:	9207      	str	r2, [sp, #28]
 80086a0:	e014      	b.n	80086cc <_svfiprintf_r+0x114>
 80086a2:	eba0 0308 	sub.w	r3, r0, r8
 80086a6:	fa09 f303 	lsl.w	r3, r9, r3
 80086aa:	4313      	orrs	r3, r2
 80086ac:	46a2      	mov	sl, r4
 80086ae:	9304      	str	r3, [sp, #16]
 80086b0:	e7d2      	b.n	8008658 <_svfiprintf_r+0xa0>
 80086b2:	9b03      	ldr	r3, [sp, #12]
 80086b4:	1d19      	adds	r1, r3, #4
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	9103      	str	r1, [sp, #12]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	bfbb      	ittet	lt
 80086be:	425b      	neglt	r3, r3
 80086c0:	f042 0202 	orrlt.w	r2, r2, #2
 80086c4:	9307      	strge	r3, [sp, #28]
 80086c6:	9307      	strlt	r3, [sp, #28]
 80086c8:	bfb8      	it	lt
 80086ca:	9204      	strlt	r2, [sp, #16]
 80086cc:	7823      	ldrb	r3, [r4, #0]
 80086ce:	2b2e      	cmp	r3, #46	@ 0x2e
 80086d0:	d10a      	bne.n	80086e8 <_svfiprintf_r+0x130>
 80086d2:	7863      	ldrb	r3, [r4, #1]
 80086d4:	2b2a      	cmp	r3, #42	@ 0x2a
 80086d6:	d132      	bne.n	800873e <_svfiprintf_r+0x186>
 80086d8:	9b03      	ldr	r3, [sp, #12]
 80086da:	3402      	adds	r4, #2
 80086dc:	1d1a      	adds	r2, r3, #4
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	9203      	str	r2, [sp, #12]
 80086e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086e6:	9305      	str	r3, [sp, #20]
 80086e8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80087a0 <_svfiprintf_r+0x1e8>
 80086ec:	2203      	movs	r2, #3
 80086ee:	4650      	mov	r0, sl
 80086f0:	7821      	ldrb	r1, [r4, #0]
 80086f2:	f7fe fc22 	bl	8006f3a <memchr>
 80086f6:	b138      	cbz	r0, 8008708 <_svfiprintf_r+0x150>
 80086f8:	2240      	movs	r2, #64	@ 0x40
 80086fa:	9b04      	ldr	r3, [sp, #16]
 80086fc:	eba0 000a 	sub.w	r0, r0, sl
 8008700:	4082      	lsls	r2, r0
 8008702:	4313      	orrs	r3, r2
 8008704:	3401      	adds	r4, #1
 8008706:	9304      	str	r3, [sp, #16]
 8008708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800870c:	2206      	movs	r2, #6
 800870e:	4825      	ldr	r0, [pc, #148]	@ (80087a4 <_svfiprintf_r+0x1ec>)
 8008710:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008714:	f7fe fc11 	bl	8006f3a <memchr>
 8008718:	2800      	cmp	r0, #0
 800871a:	d036      	beq.n	800878a <_svfiprintf_r+0x1d2>
 800871c:	4b22      	ldr	r3, [pc, #136]	@ (80087a8 <_svfiprintf_r+0x1f0>)
 800871e:	bb1b      	cbnz	r3, 8008768 <_svfiprintf_r+0x1b0>
 8008720:	9b03      	ldr	r3, [sp, #12]
 8008722:	3307      	adds	r3, #7
 8008724:	f023 0307 	bic.w	r3, r3, #7
 8008728:	3308      	adds	r3, #8
 800872a:	9303      	str	r3, [sp, #12]
 800872c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800872e:	4433      	add	r3, r6
 8008730:	9309      	str	r3, [sp, #36]	@ 0x24
 8008732:	e76a      	b.n	800860a <_svfiprintf_r+0x52>
 8008734:	460c      	mov	r4, r1
 8008736:	2001      	movs	r0, #1
 8008738:	fb0c 3202 	mla	r2, ip, r2, r3
 800873c:	e7a8      	b.n	8008690 <_svfiprintf_r+0xd8>
 800873e:	2300      	movs	r3, #0
 8008740:	f04f 0c0a 	mov.w	ip, #10
 8008744:	4619      	mov	r1, r3
 8008746:	3401      	adds	r4, #1
 8008748:	9305      	str	r3, [sp, #20]
 800874a:	4620      	mov	r0, r4
 800874c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008750:	3a30      	subs	r2, #48	@ 0x30
 8008752:	2a09      	cmp	r2, #9
 8008754:	d903      	bls.n	800875e <_svfiprintf_r+0x1a6>
 8008756:	2b00      	cmp	r3, #0
 8008758:	d0c6      	beq.n	80086e8 <_svfiprintf_r+0x130>
 800875a:	9105      	str	r1, [sp, #20]
 800875c:	e7c4      	b.n	80086e8 <_svfiprintf_r+0x130>
 800875e:	4604      	mov	r4, r0
 8008760:	2301      	movs	r3, #1
 8008762:	fb0c 2101 	mla	r1, ip, r1, r2
 8008766:	e7f0      	b.n	800874a <_svfiprintf_r+0x192>
 8008768:	ab03      	add	r3, sp, #12
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	462a      	mov	r2, r5
 800876e:	4638      	mov	r0, r7
 8008770:	4b0e      	ldr	r3, [pc, #56]	@ (80087ac <_svfiprintf_r+0x1f4>)
 8008772:	a904      	add	r1, sp, #16
 8008774:	f7fd fe64 	bl	8006440 <_printf_float>
 8008778:	1c42      	adds	r2, r0, #1
 800877a:	4606      	mov	r6, r0
 800877c:	d1d6      	bne.n	800872c <_svfiprintf_r+0x174>
 800877e:	89ab      	ldrh	r3, [r5, #12]
 8008780:	065b      	lsls	r3, r3, #25
 8008782:	f53f af2d 	bmi.w	80085e0 <_svfiprintf_r+0x28>
 8008786:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008788:	e72c      	b.n	80085e4 <_svfiprintf_r+0x2c>
 800878a:	ab03      	add	r3, sp, #12
 800878c:	9300      	str	r3, [sp, #0]
 800878e:	462a      	mov	r2, r5
 8008790:	4638      	mov	r0, r7
 8008792:	4b06      	ldr	r3, [pc, #24]	@ (80087ac <_svfiprintf_r+0x1f4>)
 8008794:	a904      	add	r1, sp, #16
 8008796:	f7fe f8f1 	bl	800697c <_printf_i>
 800879a:	e7ed      	b.n	8008778 <_svfiprintf_r+0x1c0>
 800879c:	080091c0 	.word	0x080091c0
 80087a0:	080091c6 	.word	0x080091c6
 80087a4:	080091ca 	.word	0x080091ca
 80087a8:	08006441 	.word	0x08006441
 80087ac:	08008501 	.word	0x08008501

080087b0 <__sflush_r>:
 80087b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087b6:	0716      	lsls	r6, r2, #28
 80087b8:	4605      	mov	r5, r0
 80087ba:	460c      	mov	r4, r1
 80087bc:	d454      	bmi.n	8008868 <__sflush_r+0xb8>
 80087be:	684b      	ldr	r3, [r1, #4]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	dc02      	bgt.n	80087ca <__sflush_r+0x1a>
 80087c4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	dd48      	ble.n	800885c <__sflush_r+0xac>
 80087ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087cc:	2e00      	cmp	r6, #0
 80087ce:	d045      	beq.n	800885c <__sflush_r+0xac>
 80087d0:	2300      	movs	r3, #0
 80087d2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80087d6:	682f      	ldr	r7, [r5, #0]
 80087d8:	6a21      	ldr	r1, [r4, #32]
 80087da:	602b      	str	r3, [r5, #0]
 80087dc:	d030      	beq.n	8008840 <__sflush_r+0x90>
 80087de:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80087e0:	89a3      	ldrh	r3, [r4, #12]
 80087e2:	0759      	lsls	r1, r3, #29
 80087e4:	d505      	bpl.n	80087f2 <__sflush_r+0x42>
 80087e6:	6863      	ldr	r3, [r4, #4]
 80087e8:	1ad2      	subs	r2, r2, r3
 80087ea:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80087ec:	b10b      	cbz	r3, 80087f2 <__sflush_r+0x42>
 80087ee:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80087f0:	1ad2      	subs	r2, r2, r3
 80087f2:	2300      	movs	r3, #0
 80087f4:	4628      	mov	r0, r5
 80087f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087f8:	6a21      	ldr	r1, [r4, #32]
 80087fa:	47b0      	blx	r6
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	89a3      	ldrh	r3, [r4, #12]
 8008800:	d106      	bne.n	8008810 <__sflush_r+0x60>
 8008802:	6829      	ldr	r1, [r5, #0]
 8008804:	291d      	cmp	r1, #29
 8008806:	d82b      	bhi.n	8008860 <__sflush_r+0xb0>
 8008808:	4a28      	ldr	r2, [pc, #160]	@ (80088ac <__sflush_r+0xfc>)
 800880a:	40ca      	lsrs	r2, r1
 800880c:	07d6      	lsls	r6, r2, #31
 800880e:	d527      	bpl.n	8008860 <__sflush_r+0xb0>
 8008810:	2200      	movs	r2, #0
 8008812:	6062      	str	r2, [r4, #4]
 8008814:	6922      	ldr	r2, [r4, #16]
 8008816:	04d9      	lsls	r1, r3, #19
 8008818:	6022      	str	r2, [r4, #0]
 800881a:	d504      	bpl.n	8008826 <__sflush_r+0x76>
 800881c:	1c42      	adds	r2, r0, #1
 800881e:	d101      	bne.n	8008824 <__sflush_r+0x74>
 8008820:	682b      	ldr	r3, [r5, #0]
 8008822:	b903      	cbnz	r3, 8008826 <__sflush_r+0x76>
 8008824:	6560      	str	r0, [r4, #84]	@ 0x54
 8008826:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008828:	602f      	str	r7, [r5, #0]
 800882a:	b1b9      	cbz	r1, 800885c <__sflush_r+0xac>
 800882c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008830:	4299      	cmp	r1, r3
 8008832:	d002      	beq.n	800883a <__sflush_r+0x8a>
 8008834:	4628      	mov	r0, r5
 8008836:	f7ff f9eb 	bl	8007c10 <_free_r>
 800883a:	2300      	movs	r3, #0
 800883c:	6363      	str	r3, [r4, #52]	@ 0x34
 800883e:	e00d      	b.n	800885c <__sflush_r+0xac>
 8008840:	2301      	movs	r3, #1
 8008842:	4628      	mov	r0, r5
 8008844:	47b0      	blx	r6
 8008846:	4602      	mov	r2, r0
 8008848:	1c50      	adds	r0, r2, #1
 800884a:	d1c9      	bne.n	80087e0 <__sflush_r+0x30>
 800884c:	682b      	ldr	r3, [r5, #0]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d0c6      	beq.n	80087e0 <__sflush_r+0x30>
 8008852:	2b1d      	cmp	r3, #29
 8008854:	d001      	beq.n	800885a <__sflush_r+0xaa>
 8008856:	2b16      	cmp	r3, #22
 8008858:	d11d      	bne.n	8008896 <__sflush_r+0xe6>
 800885a:	602f      	str	r7, [r5, #0]
 800885c:	2000      	movs	r0, #0
 800885e:	e021      	b.n	80088a4 <__sflush_r+0xf4>
 8008860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008864:	b21b      	sxth	r3, r3
 8008866:	e01a      	b.n	800889e <__sflush_r+0xee>
 8008868:	690f      	ldr	r7, [r1, #16]
 800886a:	2f00      	cmp	r7, #0
 800886c:	d0f6      	beq.n	800885c <__sflush_r+0xac>
 800886e:	0793      	lsls	r3, r2, #30
 8008870:	bf18      	it	ne
 8008872:	2300      	movne	r3, #0
 8008874:	680e      	ldr	r6, [r1, #0]
 8008876:	bf08      	it	eq
 8008878:	694b      	ldreq	r3, [r1, #20]
 800887a:	1bf6      	subs	r6, r6, r7
 800887c:	600f      	str	r7, [r1, #0]
 800887e:	608b      	str	r3, [r1, #8]
 8008880:	2e00      	cmp	r6, #0
 8008882:	ddeb      	ble.n	800885c <__sflush_r+0xac>
 8008884:	4633      	mov	r3, r6
 8008886:	463a      	mov	r2, r7
 8008888:	4628      	mov	r0, r5
 800888a:	6a21      	ldr	r1, [r4, #32]
 800888c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008890:	47e0      	blx	ip
 8008892:	2800      	cmp	r0, #0
 8008894:	dc07      	bgt.n	80088a6 <__sflush_r+0xf6>
 8008896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800889a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800889e:	f04f 30ff 	mov.w	r0, #4294967295
 80088a2:	81a3      	strh	r3, [r4, #12]
 80088a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088a6:	4407      	add	r7, r0
 80088a8:	1a36      	subs	r6, r6, r0
 80088aa:	e7e9      	b.n	8008880 <__sflush_r+0xd0>
 80088ac:	20400001 	.word	0x20400001

080088b0 <_fflush_r>:
 80088b0:	b538      	push	{r3, r4, r5, lr}
 80088b2:	690b      	ldr	r3, [r1, #16]
 80088b4:	4605      	mov	r5, r0
 80088b6:	460c      	mov	r4, r1
 80088b8:	b913      	cbnz	r3, 80088c0 <_fflush_r+0x10>
 80088ba:	2500      	movs	r5, #0
 80088bc:	4628      	mov	r0, r5
 80088be:	bd38      	pop	{r3, r4, r5, pc}
 80088c0:	b118      	cbz	r0, 80088ca <_fflush_r+0x1a>
 80088c2:	6a03      	ldr	r3, [r0, #32]
 80088c4:	b90b      	cbnz	r3, 80088ca <_fflush_r+0x1a>
 80088c6:	f7fe fa03 	bl	8006cd0 <__sinit>
 80088ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d0f3      	beq.n	80088ba <_fflush_r+0xa>
 80088d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80088d4:	07d0      	lsls	r0, r2, #31
 80088d6:	d404      	bmi.n	80088e2 <_fflush_r+0x32>
 80088d8:	0599      	lsls	r1, r3, #22
 80088da:	d402      	bmi.n	80088e2 <_fflush_r+0x32>
 80088dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088de:	f7fe fb2a 	bl	8006f36 <__retarget_lock_acquire_recursive>
 80088e2:	4628      	mov	r0, r5
 80088e4:	4621      	mov	r1, r4
 80088e6:	f7ff ff63 	bl	80087b0 <__sflush_r>
 80088ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80088ec:	4605      	mov	r5, r0
 80088ee:	07da      	lsls	r2, r3, #31
 80088f0:	d4e4      	bmi.n	80088bc <_fflush_r+0xc>
 80088f2:	89a3      	ldrh	r3, [r4, #12]
 80088f4:	059b      	lsls	r3, r3, #22
 80088f6:	d4e1      	bmi.n	80088bc <_fflush_r+0xc>
 80088f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088fa:	f7fe fb1d 	bl	8006f38 <__retarget_lock_release_recursive>
 80088fe:	e7dd      	b.n	80088bc <_fflush_r+0xc>

08008900 <memmove>:
 8008900:	4288      	cmp	r0, r1
 8008902:	b510      	push	{r4, lr}
 8008904:	eb01 0402 	add.w	r4, r1, r2
 8008908:	d902      	bls.n	8008910 <memmove+0x10>
 800890a:	4284      	cmp	r4, r0
 800890c:	4623      	mov	r3, r4
 800890e:	d807      	bhi.n	8008920 <memmove+0x20>
 8008910:	1e43      	subs	r3, r0, #1
 8008912:	42a1      	cmp	r1, r4
 8008914:	d008      	beq.n	8008928 <memmove+0x28>
 8008916:	f811 2b01 	ldrb.w	r2, [r1], #1
 800891a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800891e:	e7f8      	b.n	8008912 <memmove+0x12>
 8008920:	4601      	mov	r1, r0
 8008922:	4402      	add	r2, r0
 8008924:	428a      	cmp	r2, r1
 8008926:	d100      	bne.n	800892a <memmove+0x2a>
 8008928:	bd10      	pop	{r4, pc}
 800892a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800892e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008932:	e7f7      	b.n	8008924 <memmove+0x24>

08008934 <_sbrk_r>:
 8008934:	b538      	push	{r3, r4, r5, lr}
 8008936:	2300      	movs	r3, #0
 8008938:	4d05      	ldr	r5, [pc, #20]	@ (8008950 <_sbrk_r+0x1c>)
 800893a:	4604      	mov	r4, r0
 800893c:	4608      	mov	r0, r1
 800893e:	602b      	str	r3, [r5, #0]
 8008940:	f7fc fb14 	bl	8004f6c <_sbrk>
 8008944:	1c43      	adds	r3, r0, #1
 8008946:	d102      	bne.n	800894e <_sbrk_r+0x1a>
 8008948:	682b      	ldr	r3, [r5, #0]
 800894a:	b103      	cbz	r3, 800894e <_sbrk_r+0x1a>
 800894c:	6023      	str	r3, [r4, #0]
 800894e:	bd38      	pop	{r3, r4, r5, pc}
 8008950:	2000037c 	.word	0x2000037c

08008954 <memcpy>:
 8008954:	440a      	add	r2, r1
 8008956:	4291      	cmp	r1, r2
 8008958:	f100 33ff 	add.w	r3, r0, #4294967295
 800895c:	d100      	bne.n	8008960 <memcpy+0xc>
 800895e:	4770      	bx	lr
 8008960:	b510      	push	{r4, lr}
 8008962:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008966:	4291      	cmp	r1, r2
 8008968:	f803 4f01 	strb.w	r4, [r3, #1]!
 800896c:	d1f9      	bne.n	8008962 <memcpy+0xe>
 800896e:	bd10      	pop	{r4, pc}

08008970 <__assert_func>:
 8008970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008972:	4614      	mov	r4, r2
 8008974:	461a      	mov	r2, r3
 8008976:	4b09      	ldr	r3, [pc, #36]	@ (800899c <__assert_func+0x2c>)
 8008978:	4605      	mov	r5, r0
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68d8      	ldr	r0, [r3, #12]
 800897e:	b14c      	cbz	r4, 8008994 <__assert_func+0x24>
 8008980:	4b07      	ldr	r3, [pc, #28]	@ (80089a0 <__assert_func+0x30>)
 8008982:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008986:	9100      	str	r1, [sp, #0]
 8008988:	462b      	mov	r3, r5
 800898a:	4906      	ldr	r1, [pc, #24]	@ (80089a4 <__assert_func+0x34>)
 800898c:	f000 f870 	bl	8008a70 <fiprintf>
 8008990:	f000 f880 	bl	8008a94 <abort>
 8008994:	4b04      	ldr	r3, [pc, #16]	@ (80089a8 <__assert_func+0x38>)
 8008996:	461c      	mov	r4, r3
 8008998:	e7f3      	b.n	8008982 <__assert_func+0x12>
 800899a:	bf00      	nop
 800899c:	20000018 	.word	0x20000018
 80089a0:	080091db 	.word	0x080091db
 80089a4:	080091e8 	.word	0x080091e8
 80089a8:	08009216 	.word	0x08009216

080089ac <_calloc_r>:
 80089ac:	b570      	push	{r4, r5, r6, lr}
 80089ae:	fba1 5402 	umull	r5, r4, r1, r2
 80089b2:	b934      	cbnz	r4, 80089c2 <_calloc_r+0x16>
 80089b4:	4629      	mov	r1, r5
 80089b6:	f7ff f99d 	bl	8007cf4 <_malloc_r>
 80089ba:	4606      	mov	r6, r0
 80089bc:	b928      	cbnz	r0, 80089ca <_calloc_r+0x1e>
 80089be:	4630      	mov	r0, r6
 80089c0:	bd70      	pop	{r4, r5, r6, pc}
 80089c2:	220c      	movs	r2, #12
 80089c4:	2600      	movs	r6, #0
 80089c6:	6002      	str	r2, [r0, #0]
 80089c8:	e7f9      	b.n	80089be <_calloc_r+0x12>
 80089ca:	462a      	mov	r2, r5
 80089cc:	4621      	mov	r1, r4
 80089ce:	f7fe fa35 	bl	8006e3c <memset>
 80089d2:	e7f4      	b.n	80089be <_calloc_r+0x12>

080089d4 <__ascii_mbtowc>:
 80089d4:	b082      	sub	sp, #8
 80089d6:	b901      	cbnz	r1, 80089da <__ascii_mbtowc+0x6>
 80089d8:	a901      	add	r1, sp, #4
 80089da:	b142      	cbz	r2, 80089ee <__ascii_mbtowc+0x1a>
 80089dc:	b14b      	cbz	r3, 80089f2 <__ascii_mbtowc+0x1e>
 80089de:	7813      	ldrb	r3, [r2, #0]
 80089e0:	600b      	str	r3, [r1, #0]
 80089e2:	7812      	ldrb	r2, [r2, #0]
 80089e4:	1e10      	subs	r0, r2, #0
 80089e6:	bf18      	it	ne
 80089e8:	2001      	movne	r0, #1
 80089ea:	b002      	add	sp, #8
 80089ec:	4770      	bx	lr
 80089ee:	4610      	mov	r0, r2
 80089f0:	e7fb      	b.n	80089ea <__ascii_mbtowc+0x16>
 80089f2:	f06f 0001 	mvn.w	r0, #1
 80089f6:	e7f8      	b.n	80089ea <__ascii_mbtowc+0x16>

080089f8 <_realloc_r>:
 80089f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089fc:	4607      	mov	r7, r0
 80089fe:	4614      	mov	r4, r2
 8008a00:	460d      	mov	r5, r1
 8008a02:	b921      	cbnz	r1, 8008a0e <_realloc_r+0x16>
 8008a04:	4611      	mov	r1, r2
 8008a06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a0a:	f7ff b973 	b.w	8007cf4 <_malloc_r>
 8008a0e:	b92a      	cbnz	r2, 8008a1c <_realloc_r+0x24>
 8008a10:	f7ff f8fe 	bl	8007c10 <_free_r>
 8008a14:	4625      	mov	r5, r4
 8008a16:	4628      	mov	r0, r5
 8008a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a1c:	f000 f841 	bl	8008aa2 <_malloc_usable_size_r>
 8008a20:	4284      	cmp	r4, r0
 8008a22:	4606      	mov	r6, r0
 8008a24:	d802      	bhi.n	8008a2c <_realloc_r+0x34>
 8008a26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a2a:	d8f4      	bhi.n	8008a16 <_realloc_r+0x1e>
 8008a2c:	4621      	mov	r1, r4
 8008a2e:	4638      	mov	r0, r7
 8008a30:	f7ff f960 	bl	8007cf4 <_malloc_r>
 8008a34:	4680      	mov	r8, r0
 8008a36:	b908      	cbnz	r0, 8008a3c <_realloc_r+0x44>
 8008a38:	4645      	mov	r5, r8
 8008a3a:	e7ec      	b.n	8008a16 <_realloc_r+0x1e>
 8008a3c:	42b4      	cmp	r4, r6
 8008a3e:	4622      	mov	r2, r4
 8008a40:	4629      	mov	r1, r5
 8008a42:	bf28      	it	cs
 8008a44:	4632      	movcs	r2, r6
 8008a46:	f7ff ff85 	bl	8008954 <memcpy>
 8008a4a:	4629      	mov	r1, r5
 8008a4c:	4638      	mov	r0, r7
 8008a4e:	f7ff f8df 	bl	8007c10 <_free_r>
 8008a52:	e7f1      	b.n	8008a38 <_realloc_r+0x40>

08008a54 <__ascii_wctomb>:
 8008a54:	4603      	mov	r3, r0
 8008a56:	4608      	mov	r0, r1
 8008a58:	b141      	cbz	r1, 8008a6c <__ascii_wctomb+0x18>
 8008a5a:	2aff      	cmp	r2, #255	@ 0xff
 8008a5c:	d904      	bls.n	8008a68 <__ascii_wctomb+0x14>
 8008a5e:	228a      	movs	r2, #138	@ 0x8a
 8008a60:	f04f 30ff 	mov.w	r0, #4294967295
 8008a64:	601a      	str	r2, [r3, #0]
 8008a66:	4770      	bx	lr
 8008a68:	2001      	movs	r0, #1
 8008a6a:	700a      	strb	r2, [r1, #0]
 8008a6c:	4770      	bx	lr
	...

08008a70 <fiprintf>:
 8008a70:	b40e      	push	{r1, r2, r3}
 8008a72:	b503      	push	{r0, r1, lr}
 8008a74:	4601      	mov	r1, r0
 8008a76:	ab03      	add	r3, sp, #12
 8008a78:	4805      	ldr	r0, [pc, #20]	@ (8008a90 <fiprintf+0x20>)
 8008a7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a7e:	6800      	ldr	r0, [r0, #0]
 8008a80:	9301      	str	r3, [sp, #4]
 8008a82:	f000 f83d 	bl	8008b00 <_vfiprintf_r>
 8008a86:	b002      	add	sp, #8
 8008a88:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a8c:	b003      	add	sp, #12
 8008a8e:	4770      	bx	lr
 8008a90:	20000018 	.word	0x20000018

08008a94 <abort>:
 8008a94:	2006      	movs	r0, #6
 8008a96:	b508      	push	{r3, lr}
 8008a98:	f000 fa06 	bl	8008ea8 <raise>
 8008a9c:	2001      	movs	r0, #1
 8008a9e:	f7fc f9f0 	bl	8004e82 <_exit>

08008aa2 <_malloc_usable_size_r>:
 8008aa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008aa6:	1f18      	subs	r0, r3, #4
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	bfbc      	itt	lt
 8008aac:	580b      	ldrlt	r3, [r1, r0]
 8008aae:	18c0      	addlt	r0, r0, r3
 8008ab0:	4770      	bx	lr

08008ab2 <__sfputc_r>:
 8008ab2:	6893      	ldr	r3, [r2, #8]
 8008ab4:	b410      	push	{r4}
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	6093      	str	r3, [r2, #8]
 8008abc:	da07      	bge.n	8008ace <__sfputc_r+0x1c>
 8008abe:	6994      	ldr	r4, [r2, #24]
 8008ac0:	42a3      	cmp	r3, r4
 8008ac2:	db01      	blt.n	8008ac8 <__sfputc_r+0x16>
 8008ac4:	290a      	cmp	r1, #10
 8008ac6:	d102      	bne.n	8008ace <__sfputc_r+0x1c>
 8008ac8:	bc10      	pop	{r4}
 8008aca:	f000 b931 	b.w	8008d30 <__swbuf_r>
 8008ace:	6813      	ldr	r3, [r2, #0]
 8008ad0:	1c58      	adds	r0, r3, #1
 8008ad2:	6010      	str	r0, [r2, #0]
 8008ad4:	7019      	strb	r1, [r3, #0]
 8008ad6:	4608      	mov	r0, r1
 8008ad8:	bc10      	pop	{r4}
 8008ada:	4770      	bx	lr

08008adc <__sfputs_r>:
 8008adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ade:	4606      	mov	r6, r0
 8008ae0:	460f      	mov	r7, r1
 8008ae2:	4614      	mov	r4, r2
 8008ae4:	18d5      	adds	r5, r2, r3
 8008ae6:	42ac      	cmp	r4, r5
 8008ae8:	d101      	bne.n	8008aee <__sfputs_r+0x12>
 8008aea:	2000      	movs	r0, #0
 8008aec:	e007      	b.n	8008afe <__sfputs_r+0x22>
 8008aee:	463a      	mov	r2, r7
 8008af0:	4630      	mov	r0, r6
 8008af2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008af6:	f7ff ffdc 	bl	8008ab2 <__sfputc_r>
 8008afa:	1c43      	adds	r3, r0, #1
 8008afc:	d1f3      	bne.n	8008ae6 <__sfputs_r+0xa>
 8008afe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b00 <_vfiprintf_r>:
 8008b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b04:	460d      	mov	r5, r1
 8008b06:	4614      	mov	r4, r2
 8008b08:	4698      	mov	r8, r3
 8008b0a:	4606      	mov	r6, r0
 8008b0c:	b09d      	sub	sp, #116	@ 0x74
 8008b0e:	b118      	cbz	r0, 8008b18 <_vfiprintf_r+0x18>
 8008b10:	6a03      	ldr	r3, [r0, #32]
 8008b12:	b90b      	cbnz	r3, 8008b18 <_vfiprintf_r+0x18>
 8008b14:	f7fe f8dc 	bl	8006cd0 <__sinit>
 8008b18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b1a:	07d9      	lsls	r1, r3, #31
 8008b1c:	d405      	bmi.n	8008b2a <_vfiprintf_r+0x2a>
 8008b1e:	89ab      	ldrh	r3, [r5, #12]
 8008b20:	059a      	lsls	r2, r3, #22
 8008b22:	d402      	bmi.n	8008b2a <_vfiprintf_r+0x2a>
 8008b24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b26:	f7fe fa06 	bl	8006f36 <__retarget_lock_acquire_recursive>
 8008b2a:	89ab      	ldrh	r3, [r5, #12]
 8008b2c:	071b      	lsls	r3, r3, #28
 8008b2e:	d501      	bpl.n	8008b34 <_vfiprintf_r+0x34>
 8008b30:	692b      	ldr	r3, [r5, #16]
 8008b32:	b99b      	cbnz	r3, 8008b5c <_vfiprintf_r+0x5c>
 8008b34:	4629      	mov	r1, r5
 8008b36:	4630      	mov	r0, r6
 8008b38:	f000 f938 	bl	8008dac <__swsetup_r>
 8008b3c:	b170      	cbz	r0, 8008b5c <_vfiprintf_r+0x5c>
 8008b3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b40:	07dc      	lsls	r4, r3, #31
 8008b42:	d504      	bpl.n	8008b4e <_vfiprintf_r+0x4e>
 8008b44:	f04f 30ff 	mov.w	r0, #4294967295
 8008b48:	b01d      	add	sp, #116	@ 0x74
 8008b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b4e:	89ab      	ldrh	r3, [r5, #12]
 8008b50:	0598      	lsls	r0, r3, #22
 8008b52:	d4f7      	bmi.n	8008b44 <_vfiprintf_r+0x44>
 8008b54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b56:	f7fe f9ef 	bl	8006f38 <__retarget_lock_release_recursive>
 8008b5a:	e7f3      	b.n	8008b44 <_vfiprintf_r+0x44>
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b60:	2320      	movs	r3, #32
 8008b62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008b66:	2330      	movs	r3, #48	@ 0x30
 8008b68:	f04f 0901 	mov.w	r9, #1
 8008b6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b70:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008d1c <_vfiprintf_r+0x21c>
 8008b74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008b78:	4623      	mov	r3, r4
 8008b7a:	469a      	mov	sl, r3
 8008b7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b80:	b10a      	cbz	r2, 8008b86 <_vfiprintf_r+0x86>
 8008b82:	2a25      	cmp	r2, #37	@ 0x25
 8008b84:	d1f9      	bne.n	8008b7a <_vfiprintf_r+0x7a>
 8008b86:	ebba 0b04 	subs.w	fp, sl, r4
 8008b8a:	d00b      	beq.n	8008ba4 <_vfiprintf_r+0xa4>
 8008b8c:	465b      	mov	r3, fp
 8008b8e:	4622      	mov	r2, r4
 8008b90:	4629      	mov	r1, r5
 8008b92:	4630      	mov	r0, r6
 8008b94:	f7ff ffa2 	bl	8008adc <__sfputs_r>
 8008b98:	3001      	adds	r0, #1
 8008b9a:	f000 80a7 	beq.w	8008cec <_vfiprintf_r+0x1ec>
 8008b9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ba0:	445a      	add	r2, fp
 8008ba2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ba4:	f89a 3000 	ldrb.w	r3, [sl]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	f000 809f 	beq.w	8008cec <_vfiprintf_r+0x1ec>
 8008bae:	2300      	movs	r3, #0
 8008bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008bb8:	f10a 0a01 	add.w	sl, sl, #1
 8008bbc:	9304      	str	r3, [sp, #16]
 8008bbe:	9307      	str	r3, [sp, #28]
 8008bc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008bc4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008bc6:	4654      	mov	r4, sl
 8008bc8:	2205      	movs	r2, #5
 8008bca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bce:	4853      	ldr	r0, [pc, #332]	@ (8008d1c <_vfiprintf_r+0x21c>)
 8008bd0:	f7fe f9b3 	bl	8006f3a <memchr>
 8008bd4:	9a04      	ldr	r2, [sp, #16]
 8008bd6:	b9d8      	cbnz	r0, 8008c10 <_vfiprintf_r+0x110>
 8008bd8:	06d1      	lsls	r1, r2, #27
 8008bda:	bf44      	itt	mi
 8008bdc:	2320      	movmi	r3, #32
 8008bde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008be2:	0713      	lsls	r3, r2, #28
 8008be4:	bf44      	itt	mi
 8008be6:	232b      	movmi	r3, #43	@ 0x2b
 8008be8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008bec:	f89a 3000 	ldrb.w	r3, [sl]
 8008bf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008bf2:	d015      	beq.n	8008c20 <_vfiprintf_r+0x120>
 8008bf4:	4654      	mov	r4, sl
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	f04f 0c0a 	mov.w	ip, #10
 8008bfc:	9a07      	ldr	r2, [sp, #28]
 8008bfe:	4621      	mov	r1, r4
 8008c00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c04:	3b30      	subs	r3, #48	@ 0x30
 8008c06:	2b09      	cmp	r3, #9
 8008c08:	d94b      	bls.n	8008ca2 <_vfiprintf_r+0x1a2>
 8008c0a:	b1b0      	cbz	r0, 8008c3a <_vfiprintf_r+0x13a>
 8008c0c:	9207      	str	r2, [sp, #28]
 8008c0e:	e014      	b.n	8008c3a <_vfiprintf_r+0x13a>
 8008c10:	eba0 0308 	sub.w	r3, r0, r8
 8008c14:	fa09 f303 	lsl.w	r3, r9, r3
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	46a2      	mov	sl, r4
 8008c1c:	9304      	str	r3, [sp, #16]
 8008c1e:	e7d2      	b.n	8008bc6 <_vfiprintf_r+0xc6>
 8008c20:	9b03      	ldr	r3, [sp, #12]
 8008c22:	1d19      	adds	r1, r3, #4
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	9103      	str	r1, [sp, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	bfbb      	ittet	lt
 8008c2c:	425b      	neglt	r3, r3
 8008c2e:	f042 0202 	orrlt.w	r2, r2, #2
 8008c32:	9307      	strge	r3, [sp, #28]
 8008c34:	9307      	strlt	r3, [sp, #28]
 8008c36:	bfb8      	it	lt
 8008c38:	9204      	strlt	r2, [sp, #16]
 8008c3a:	7823      	ldrb	r3, [r4, #0]
 8008c3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008c3e:	d10a      	bne.n	8008c56 <_vfiprintf_r+0x156>
 8008c40:	7863      	ldrb	r3, [r4, #1]
 8008c42:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c44:	d132      	bne.n	8008cac <_vfiprintf_r+0x1ac>
 8008c46:	9b03      	ldr	r3, [sp, #12]
 8008c48:	3402      	adds	r4, #2
 8008c4a:	1d1a      	adds	r2, r3, #4
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	9203      	str	r2, [sp, #12]
 8008c50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008c54:	9305      	str	r3, [sp, #20]
 8008c56:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008d20 <_vfiprintf_r+0x220>
 8008c5a:	2203      	movs	r2, #3
 8008c5c:	4650      	mov	r0, sl
 8008c5e:	7821      	ldrb	r1, [r4, #0]
 8008c60:	f7fe f96b 	bl	8006f3a <memchr>
 8008c64:	b138      	cbz	r0, 8008c76 <_vfiprintf_r+0x176>
 8008c66:	2240      	movs	r2, #64	@ 0x40
 8008c68:	9b04      	ldr	r3, [sp, #16]
 8008c6a:	eba0 000a 	sub.w	r0, r0, sl
 8008c6e:	4082      	lsls	r2, r0
 8008c70:	4313      	orrs	r3, r2
 8008c72:	3401      	adds	r4, #1
 8008c74:	9304      	str	r3, [sp, #16]
 8008c76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c7a:	2206      	movs	r2, #6
 8008c7c:	4829      	ldr	r0, [pc, #164]	@ (8008d24 <_vfiprintf_r+0x224>)
 8008c7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008c82:	f7fe f95a 	bl	8006f3a <memchr>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	d03f      	beq.n	8008d0a <_vfiprintf_r+0x20a>
 8008c8a:	4b27      	ldr	r3, [pc, #156]	@ (8008d28 <_vfiprintf_r+0x228>)
 8008c8c:	bb1b      	cbnz	r3, 8008cd6 <_vfiprintf_r+0x1d6>
 8008c8e:	9b03      	ldr	r3, [sp, #12]
 8008c90:	3307      	adds	r3, #7
 8008c92:	f023 0307 	bic.w	r3, r3, #7
 8008c96:	3308      	adds	r3, #8
 8008c98:	9303      	str	r3, [sp, #12]
 8008c9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c9c:	443b      	add	r3, r7
 8008c9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ca0:	e76a      	b.n	8008b78 <_vfiprintf_r+0x78>
 8008ca2:	460c      	mov	r4, r1
 8008ca4:	2001      	movs	r0, #1
 8008ca6:	fb0c 3202 	mla	r2, ip, r2, r3
 8008caa:	e7a8      	b.n	8008bfe <_vfiprintf_r+0xfe>
 8008cac:	2300      	movs	r3, #0
 8008cae:	f04f 0c0a 	mov.w	ip, #10
 8008cb2:	4619      	mov	r1, r3
 8008cb4:	3401      	adds	r4, #1
 8008cb6:	9305      	str	r3, [sp, #20]
 8008cb8:	4620      	mov	r0, r4
 8008cba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008cbe:	3a30      	subs	r2, #48	@ 0x30
 8008cc0:	2a09      	cmp	r2, #9
 8008cc2:	d903      	bls.n	8008ccc <_vfiprintf_r+0x1cc>
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d0c6      	beq.n	8008c56 <_vfiprintf_r+0x156>
 8008cc8:	9105      	str	r1, [sp, #20]
 8008cca:	e7c4      	b.n	8008c56 <_vfiprintf_r+0x156>
 8008ccc:	4604      	mov	r4, r0
 8008cce:	2301      	movs	r3, #1
 8008cd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8008cd4:	e7f0      	b.n	8008cb8 <_vfiprintf_r+0x1b8>
 8008cd6:	ab03      	add	r3, sp, #12
 8008cd8:	9300      	str	r3, [sp, #0]
 8008cda:	462a      	mov	r2, r5
 8008cdc:	4630      	mov	r0, r6
 8008cde:	4b13      	ldr	r3, [pc, #76]	@ (8008d2c <_vfiprintf_r+0x22c>)
 8008ce0:	a904      	add	r1, sp, #16
 8008ce2:	f7fd fbad 	bl	8006440 <_printf_float>
 8008ce6:	4607      	mov	r7, r0
 8008ce8:	1c78      	adds	r0, r7, #1
 8008cea:	d1d6      	bne.n	8008c9a <_vfiprintf_r+0x19a>
 8008cec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008cee:	07d9      	lsls	r1, r3, #31
 8008cf0:	d405      	bmi.n	8008cfe <_vfiprintf_r+0x1fe>
 8008cf2:	89ab      	ldrh	r3, [r5, #12]
 8008cf4:	059a      	lsls	r2, r3, #22
 8008cf6:	d402      	bmi.n	8008cfe <_vfiprintf_r+0x1fe>
 8008cf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008cfa:	f7fe f91d 	bl	8006f38 <__retarget_lock_release_recursive>
 8008cfe:	89ab      	ldrh	r3, [r5, #12]
 8008d00:	065b      	lsls	r3, r3, #25
 8008d02:	f53f af1f 	bmi.w	8008b44 <_vfiprintf_r+0x44>
 8008d06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d08:	e71e      	b.n	8008b48 <_vfiprintf_r+0x48>
 8008d0a:	ab03      	add	r3, sp, #12
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	462a      	mov	r2, r5
 8008d10:	4630      	mov	r0, r6
 8008d12:	4b06      	ldr	r3, [pc, #24]	@ (8008d2c <_vfiprintf_r+0x22c>)
 8008d14:	a904      	add	r1, sp, #16
 8008d16:	f7fd fe31 	bl	800697c <_printf_i>
 8008d1a:	e7e4      	b.n	8008ce6 <_vfiprintf_r+0x1e6>
 8008d1c:	080091c0 	.word	0x080091c0
 8008d20:	080091c6 	.word	0x080091c6
 8008d24:	080091ca 	.word	0x080091ca
 8008d28:	08006441 	.word	0x08006441
 8008d2c:	08008add 	.word	0x08008add

08008d30 <__swbuf_r>:
 8008d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d32:	460e      	mov	r6, r1
 8008d34:	4614      	mov	r4, r2
 8008d36:	4605      	mov	r5, r0
 8008d38:	b118      	cbz	r0, 8008d42 <__swbuf_r+0x12>
 8008d3a:	6a03      	ldr	r3, [r0, #32]
 8008d3c:	b90b      	cbnz	r3, 8008d42 <__swbuf_r+0x12>
 8008d3e:	f7fd ffc7 	bl	8006cd0 <__sinit>
 8008d42:	69a3      	ldr	r3, [r4, #24]
 8008d44:	60a3      	str	r3, [r4, #8]
 8008d46:	89a3      	ldrh	r3, [r4, #12]
 8008d48:	071a      	lsls	r2, r3, #28
 8008d4a:	d501      	bpl.n	8008d50 <__swbuf_r+0x20>
 8008d4c:	6923      	ldr	r3, [r4, #16]
 8008d4e:	b943      	cbnz	r3, 8008d62 <__swbuf_r+0x32>
 8008d50:	4621      	mov	r1, r4
 8008d52:	4628      	mov	r0, r5
 8008d54:	f000 f82a 	bl	8008dac <__swsetup_r>
 8008d58:	b118      	cbz	r0, 8008d62 <__swbuf_r+0x32>
 8008d5a:	f04f 37ff 	mov.w	r7, #4294967295
 8008d5e:	4638      	mov	r0, r7
 8008d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	6922      	ldr	r2, [r4, #16]
 8008d66:	b2f6      	uxtb	r6, r6
 8008d68:	1a98      	subs	r0, r3, r2
 8008d6a:	6963      	ldr	r3, [r4, #20]
 8008d6c:	4637      	mov	r7, r6
 8008d6e:	4283      	cmp	r3, r0
 8008d70:	dc05      	bgt.n	8008d7e <__swbuf_r+0x4e>
 8008d72:	4621      	mov	r1, r4
 8008d74:	4628      	mov	r0, r5
 8008d76:	f7ff fd9b 	bl	80088b0 <_fflush_r>
 8008d7a:	2800      	cmp	r0, #0
 8008d7c:	d1ed      	bne.n	8008d5a <__swbuf_r+0x2a>
 8008d7e:	68a3      	ldr	r3, [r4, #8]
 8008d80:	3b01      	subs	r3, #1
 8008d82:	60a3      	str	r3, [r4, #8]
 8008d84:	6823      	ldr	r3, [r4, #0]
 8008d86:	1c5a      	adds	r2, r3, #1
 8008d88:	6022      	str	r2, [r4, #0]
 8008d8a:	701e      	strb	r6, [r3, #0]
 8008d8c:	6962      	ldr	r2, [r4, #20]
 8008d8e:	1c43      	adds	r3, r0, #1
 8008d90:	429a      	cmp	r2, r3
 8008d92:	d004      	beq.n	8008d9e <__swbuf_r+0x6e>
 8008d94:	89a3      	ldrh	r3, [r4, #12]
 8008d96:	07db      	lsls	r3, r3, #31
 8008d98:	d5e1      	bpl.n	8008d5e <__swbuf_r+0x2e>
 8008d9a:	2e0a      	cmp	r6, #10
 8008d9c:	d1df      	bne.n	8008d5e <__swbuf_r+0x2e>
 8008d9e:	4621      	mov	r1, r4
 8008da0:	4628      	mov	r0, r5
 8008da2:	f7ff fd85 	bl	80088b0 <_fflush_r>
 8008da6:	2800      	cmp	r0, #0
 8008da8:	d0d9      	beq.n	8008d5e <__swbuf_r+0x2e>
 8008daa:	e7d6      	b.n	8008d5a <__swbuf_r+0x2a>

08008dac <__swsetup_r>:
 8008dac:	b538      	push	{r3, r4, r5, lr}
 8008dae:	4b29      	ldr	r3, [pc, #164]	@ (8008e54 <__swsetup_r+0xa8>)
 8008db0:	4605      	mov	r5, r0
 8008db2:	6818      	ldr	r0, [r3, #0]
 8008db4:	460c      	mov	r4, r1
 8008db6:	b118      	cbz	r0, 8008dc0 <__swsetup_r+0x14>
 8008db8:	6a03      	ldr	r3, [r0, #32]
 8008dba:	b90b      	cbnz	r3, 8008dc0 <__swsetup_r+0x14>
 8008dbc:	f7fd ff88 	bl	8006cd0 <__sinit>
 8008dc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dc4:	0719      	lsls	r1, r3, #28
 8008dc6:	d422      	bmi.n	8008e0e <__swsetup_r+0x62>
 8008dc8:	06da      	lsls	r2, r3, #27
 8008dca:	d407      	bmi.n	8008ddc <__swsetup_r+0x30>
 8008dcc:	2209      	movs	r2, #9
 8008dce:	602a      	str	r2, [r5, #0]
 8008dd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd8:	81a3      	strh	r3, [r4, #12]
 8008dda:	e033      	b.n	8008e44 <__swsetup_r+0x98>
 8008ddc:	0758      	lsls	r0, r3, #29
 8008dde:	d512      	bpl.n	8008e06 <__swsetup_r+0x5a>
 8008de0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008de2:	b141      	cbz	r1, 8008df6 <__swsetup_r+0x4a>
 8008de4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008de8:	4299      	cmp	r1, r3
 8008dea:	d002      	beq.n	8008df2 <__swsetup_r+0x46>
 8008dec:	4628      	mov	r0, r5
 8008dee:	f7fe ff0f 	bl	8007c10 <_free_r>
 8008df2:	2300      	movs	r3, #0
 8008df4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008df6:	89a3      	ldrh	r3, [r4, #12]
 8008df8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008dfc:	81a3      	strh	r3, [r4, #12]
 8008dfe:	2300      	movs	r3, #0
 8008e00:	6063      	str	r3, [r4, #4]
 8008e02:	6923      	ldr	r3, [r4, #16]
 8008e04:	6023      	str	r3, [r4, #0]
 8008e06:	89a3      	ldrh	r3, [r4, #12]
 8008e08:	f043 0308 	orr.w	r3, r3, #8
 8008e0c:	81a3      	strh	r3, [r4, #12]
 8008e0e:	6923      	ldr	r3, [r4, #16]
 8008e10:	b94b      	cbnz	r3, 8008e26 <__swsetup_r+0x7a>
 8008e12:	89a3      	ldrh	r3, [r4, #12]
 8008e14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e1c:	d003      	beq.n	8008e26 <__swsetup_r+0x7a>
 8008e1e:	4621      	mov	r1, r4
 8008e20:	4628      	mov	r0, r5
 8008e22:	f000 f882 	bl	8008f2a <__smakebuf_r>
 8008e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e2a:	f013 0201 	ands.w	r2, r3, #1
 8008e2e:	d00a      	beq.n	8008e46 <__swsetup_r+0x9a>
 8008e30:	2200      	movs	r2, #0
 8008e32:	60a2      	str	r2, [r4, #8]
 8008e34:	6962      	ldr	r2, [r4, #20]
 8008e36:	4252      	negs	r2, r2
 8008e38:	61a2      	str	r2, [r4, #24]
 8008e3a:	6922      	ldr	r2, [r4, #16]
 8008e3c:	b942      	cbnz	r2, 8008e50 <__swsetup_r+0xa4>
 8008e3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e42:	d1c5      	bne.n	8008dd0 <__swsetup_r+0x24>
 8008e44:	bd38      	pop	{r3, r4, r5, pc}
 8008e46:	0799      	lsls	r1, r3, #30
 8008e48:	bf58      	it	pl
 8008e4a:	6962      	ldrpl	r2, [r4, #20]
 8008e4c:	60a2      	str	r2, [r4, #8]
 8008e4e:	e7f4      	b.n	8008e3a <__swsetup_r+0x8e>
 8008e50:	2000      	movs	r0, #0
 8008e52:	e7f7      	b.n	8008e44 <__swsetup_r+0x98>
 8008e54:	20000018 	.word	0x20000018

08008e58 <_raise_r>:
 8008e58:	291f      	cmp	r1, #31
 8008e5a:	b538      	push	{r3, r4, r5, lr}
 8008e5c:	4605      	mov	r5, r0
 8008e5e:	460c      	mov	r4, r1
 8008e60:	d904      	bls.n	8008e6c <_raise_r+0x14>
 8008e62:	2316      	movs	r3, #22
 8008e64:	6003      	str	r3, [r0, #0]
 8008e66:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6a:	bd38      	pop	{r3, r4, r5, pc}
 8008e6c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008e6e:	b112      	cbz	r2, 8008e76 <_raise_r+0x1e>
 8008e70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e74:	b94b      	cbnz	r3, 8008e8a <_raise_r+0x32>
 8008e76:	4628      	mov	r0, r5
 8008e78:	f000 f830 	bl	8008edc <_getpid_r>
 8008e7c:	4622      	mov	r2, r4
 8008e7e:	4601      	mov	r1, r0
 8008e80:	4628      	mov	r0, r5
 8008e82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e86:	f000 b817 	b.w	8008eb8 <_kill_r>
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d00a      	beq.n	8008ea4 <_raise_r+0x4c>
 8008e8e:	1c59      	adds	r1, r3, #1
 8008e90:	d103      	bne.n	8008e9a <_raise_r+0x42>
 8008e92:	2316      	movs	r3, #22
 8008e94:	6003      	str	r3, [r0, #0]
 8008e96:	2001      	movs	r0, #1
 8008e98:	e7e7      	b.n	8008e6a <_raise_r+0x12>
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	4620      	mov	r0, r4
 8008e9e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008ea2:	4798      	blx	r3
 8008ea4:	2000      	movs	r0, #0
 8008ea6:	e7e0      	b.n	8008e6a <_raise_r+0x12>

08008ea8 <raise>:
 8008ea8:	4b02      	ldr	r3, [pc, #8]	@ (8008eb4 <raise+0xc>)
 8008eaa:	4601      	mov	r1, r0
 8008eac:	6818      	ldr	r0, [r3, #0]
 8008eae:	f7ff bfd3 	b.w	8008e58 <_raise_r>
 8008eb2:	bf00      	nop
 8008eb4:	20000018 	.word	0x20000018

08008eb8 <_kill_r>:
 8008eb8:	b538      	push	{r3, r4, r5, lr}
 8008eba:	2300      	movs	r3, #0
 8008ebc:	4d06      	ldr	r5, [pc, #24]	@ (8008ed8 <_kill_r+0x20>)
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	4608      	mov	r0, r1
 8008ec2:	4611      	mov	r1, r2
 8008ec4:	602b      	str	r3, [r5, #0]
 8008ec6:	f7fb ffcc 	bl	8004e62 <_kill>
 8008eca:	1c43      	adds	r3, r0, #1
 8008ecc:	d102      	bne.n	8008ed4 <_kill_r+0x1c>
 8008ece:	682b      	ldr	r3, [r5, #0]
 8008ed0:	b103      	cbz	r3, 8008ed4 <_kill_r+0x1c>
 8008ed2:	6023      	str	r3, [r4, #0]
 8008ed4:	bd38      	pop	{r3, r4, r5, pc}
 8008ed6:	bf00      	nop
 8008ed8:	2000037c 	.word	0x2000037c

08008edc <_getpid_r>:
 8008edc:	f7fb bfba 	b.w	8004e54 <_getpid>

08008ee0 <__swhatbuf_r>:
 8008ee0:	b570      	push	{r4, r5, r6, lr}
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ee8:	4615      	mov	r5, r2
 8008eea:	2900      	cmp	r1, #0
 8008eec:	461e      	mov	r6, r3
 8008eee:	b096      	sub	sp, #88	@ 0x58
 8008ef0:	da0c      	bge.n	8008f0c <__swhatbuf_r+0x2c>
 8008ef2:	89a3      	ldrh	r3, [r4, #12]
 8008ef4:	2100      	movs	r1, #0
 8008ef6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008efa:	bf14      	ite	ne
 8008efc:	2340      	movne	r3, #64	@ 0x40
 8008efe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008f02:	2000      	movs	r0, #0
 8008f04:	6031      	str	r1, [r6, #0]
 8008f06:	602b      	str	r3, [r5, #0]
 8008f08:	b016      	add	sp, #88	@ 0x58
 8008f0a:	bd70      	pop	{r4, r5, r6, pc}
 8008f0c:	466a      	mov	r2, sp
 8008f0e:	f000 f849 	bl	8008fa4 <_fstat_r>
 8008f12:	2800      	cmp	r0, #0
 8008f14:	dbed      	blt.n	8008ef2 <__swhatbuf_r+0x12>
 8008f16:	9901      	ldr	r1, [sp, #4]
 8008f18:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008f1c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008f20:	4259      	negs	r1, r3
 8008f22:	4159      	adcs	r1, r3
 8008f24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f28:	e7eb      	b.n	8008f02 <__swhatbuf_r+0x22>

08008f2a <__smakebuf_r>:
 8008f2a:	898b      	ldrh	r3, [r1, #12]
 8008f2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f2e:	079d      	lsls	r5, r3, #30
 8008f30:	4606      	mov	r6, r0
 8008f32:	460c      	mov	r4, r1
 8008f34:	d507      	bpl.n	8008f46 <__smakebuf_r+0x1c>
 8008f36:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008f3a:	6023      	str	r3, [r4, #0]
 8008f3c:	6123      	str	r3, [r4, #16]
 8008f3e:	2301      	movs	r3, #1
 8008f40:	6163      	str	r3, [r4, #20]
 8008f42:	b003      	add	sp, #12
 8008f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f46:	466a      	mov	r2, sp
 8008f48:	ab01      	add	r3, sp, #4
 8008f4a:	f7ff ffc9 	bl	8008ee0 <__swhatbuf_r>
 8008f4e:	9f00      	ldr	r7, [sp, #0]
 8008f50:	4605      	mov	r5, r0
 8008f52:	4639      	mov	r1, r7
 8008f54:	4630      	mov	r0, r6
 8008f56:	f7fe fecd 	bl	8007cf4 <_malloc_r>
 8008f5a:	b948      	cbnz	r0, 8008f70 <__smakebuf_r+0x46>
 8008f5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f60:	059a      	lsls	r2, r3, #22
 8008f62:	d4ee      	bmi.n	8008f42 <__smakebuf_r+0x18>
 8008f64:	f023 0303 	bic.w	r3, r3, #3
 8008f68:	f043 0302 	orr.w	r3, r3, #2
 8008f6c:	81a3      	strh	r3, [r4, #12]
 8008f6e:	e7e2      	b.n	8008f36 <__smakebuf_r+0xc>
 8008f70:	89a3      	ldrh	r3, [r4, #12]
 8008f72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008f76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f7a:	81a3      	strh	r3, [r4, #12]
 8008f7c:	9b01      	ldr	r3, [sp, #4]
 8008f7e:	6020      	str	r0, [r4, #0]
 8008f80:	b15b      	cbz	r3, 8008f9a <__smakebuf_r+0x70>
 8008f82:	4630      	mov	r0, r6
 8008f84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f88:	f000 f81e 	bl	8008fc8 <_isatty_r>
 8008f8c:	b128      	cbz	r0, 8008f9a <__smakebuf_r+0x70>
 8008f8e:	89a3      	ldrh	r3, [r4, #12]
 8008f90:	f023 0303 	bic.w	r3, r3, #3
 8008f94:	f043 0301 	orr.w	r3, r3, #1
 8008f98:	81a3      	strh	r3, [r4, #12]
 8008f9a:	89a3      	ldrh	r3, [r4, #12]
 8008f9c:	431d      	orrs	r5, r3
 8008f9e:	81a5      	strh	r5, [r4, #12]
 8008fa0:	e7cf      	b.n	8008f42 <__smakebuf_r+0x18>
	...

08008fa4 <_fstat_r>:
 8008fa4:	b538      	push	{r3, r4, r5, lr}
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	4d06      	ldr	r5, [pc, #24]	@ (8008fc4 <_fstat_r+0x20>)
 8008faa:	4604      	mov	r4, r0
 8008fac:	4608      	mov	r0, r1
 8008fae:	4611      	mov	r1, r2
 8008fb0:	602b      	str	r3, [r5, #0]
 8008fb2:	f7fb ffb5 	bl	8004f20 <_fstat>
 8008fb6:	1c43      	adds	r3, r0, #1
 8008fb8:	d102      	bne.n	8008fc0 <_fstat_r+0x1c>
 8008fba:	682b      	ldr	r3, [r5, #0]
 8008fbc:	b103      	cbz	r3, 8008fc0 <_fstat_r+0x1c>
 8008fbe:	6023      	str	r3, [r4, #0]
 8008fc0:	bd38      	pop	{r3, r4, r5, pc}
 8008fc2:	bf00      	nop
 8008fc4:	2000037c 	.word	0x2000037c

08008fc8 <_isatty_r>:
 8008fc8:	b538      	push	{r3, r4, r5, lr}
 8008fca:	2300      	movs	r3, #0
 8008fcc:	4d05      	ldr	r5, [pc, #20]	@ (8008fe4 <_isatty_r+0x1c>)
 8008fce:	4604      	mov	r4, r0
 8008fd0:	4608      	mov	r0, r1
 8008fd2:	602b      	str	r3, [r5, #0]
 8008fd4:	f7fb ffb3 	bl	8004f3e <_isatty>
 8008fd8:	1c43      	adds	r3, r0, #1
 8008fda:	d102      	bne.n	8008fe2 <_isatty_r+0x1a>
 8008fdc:	682b      	ldr	r3, [r5, #0]
 8008fde:	b103      	cbz	r3, 8008fe2 <_isatty_r+0x1a>
 8008fe0:	6023      	str	r3, [r4, #0]
 8008fe2:	bd38      	pop	{r3, r4, r5, pc}
 8008fe4:	2000037c 	.word	0x2000037c

08008fe8 <_init>:
 8008fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fea:	bf00      	nop
 8008fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fee:	bc08      	pop	{r3}
 8008ff0:	469e      	mov	lr, r3
 8008ff2:	4770      	bx	lr

08008ff4 <_fini>:
 8008ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ff6:	bf00      	nop
 8008ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008ffa:	bc08      	pop	{r3}
 8008ffc:	469e      	mov	lr, r3
 8008ffe:	4770      	bx	lr
